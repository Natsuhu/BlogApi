/*
 Navicat Premium Data Transfer

 Source Server         : Localhost
 Source Server Type    : MySQL
 Source Server Version : 50736
 Source Host           : localhost:3306
 Source Schema         : forest_blog

 Target Server Type    : MySQL
 Target Server Version : 50736
 File Encoding         : 65001

 Date: 08/02/2023 21:17:08
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '文章标题',
  `thumbnail` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '略缩图地址',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '文章内容',
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL COMMENT '描述',
  `is_published` bit(1) NOT NULL COMMENT '是否公开',
  `is_recommend` bit(1) NOT NULL COMMENT '是否推荐',
  `is_appreciation` bit(1) NOT NULL COMMENT '是否开启赞赏',
  `is_comment_enabled` bit(1) NOT NULL COMMENT '是否允许评论',
  `create_time` datetime NOT NULL COMMENT '发表时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `views` int(11) NOT NULL COMMENT '查看数',
  `words` int(11) NULL DEFAULT NULL COMMENT '字数',
  `read_time` int(11) NULL DEFAULT NULL COMMENT '阅读时长',
  `category_id` int(32) NOT NULL COMMENT '分类ID',
  `is_top` bit(1) NULL DEFAULT NULL COMMENT '是否置顶',
  `author_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '作者名字',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, 'IP层', '', '### 网络层\n\n**2.1 网络层提供的两种服务（使用第二种）**\n\n* 虚电路服务。传统电信网的主要业务是提供电话服务。电信网使用昂贵的程控交换机，用面向连接的通信方式，使电信网络能向用户（实际上就是电话机）提供可靠传输的服务。当两台计算机进行通信时，也应先建立连接（但在分组交换中是建立一条虚电路VC），以预留双方通信所需的一切网络资源。然后双方就沿着已建立的虚电路发送分组。这样的分组的首部不需要填写完整的目的主机地址，而只需要填写这条虚电路的编号，应而减少了分组的开销。这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组无错误按序到达终点，不丢失也不重复。在通信结束后要释放建立的虚电路。\n* 数据报服务。互联网采用的设计思路是：网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。（这里的数据报就是指分组）。网络在发送分组时不需要先建立连接。每一个分组独立发送，与其前后的分组无关（不进行编号）。网络层不提供服务质量的承诺。由于网络层提供的是不可靠传输服务，这就使网络中的路由器比较简单，且价格低廉。如果主机中的进程之间的通信需要是可靠的，那么由网络的主机中的运输层负责。\n\n<img src=\"D:\\Typora\\picture\\image-20220224153327729.png\" alt=\"image-20220224153327729\" style=\"zoom: 50%;\" />\n\n**2.2 网际协议IP**\n\n​       与IP协议配套使用的协议还有3个：1.地址解析协议ARP。2.网际控制报文协议ICMP。3.网际组管理协议IGMP。（还有一个已淘汰的协议，逆地址解析协议RARP）由于网际协议IP是用来使互连起来的许多计算机网络能够进行通信，因此TCP/IP体系中的网络层常常被称为网际层。\n\n**2.2.1 虚拟互联网络**\n\n​       从一般的概念来讲，将网络互连起来要使用一些中间设备：\n\n​     （1）物理层使用的中间设备叫转发器。\n\n​     （2）数据链路层使用的中间设备叫网桥或桥接器\n\n​     （3）网络层使用的中间设备叫路由器\n\n​     （4）网络层以上使用的中间设备叫网关。用网关连接两个不兼容的系统需要在高层进行协议的转换。\n\n​        当中间设备是转发器或网桥时，这仅仅是把一个网络扩大了，而从网络层的角度看，这仍然是一个网络，一般并不能称之为网络互连。网关由于比较复杂，目前使用的较少。因此，目前讨论网络互连，就是指用路由器进行网络互连和路由选择。由于参加互连的计算机网络都使用相同的网际协议IP，因此可以把互连以后的计算机网络看成一个虚拟互连网络。所谓虚拟互连，就是指逻辑互连，互连起来的各种物理网络的异构性本来是客观存在的，但利用IP协议就可以使这些性能各异的网络在网络层看起来好像是一个统一的网络。\n\n**2.2.2 分类的IP地址**\n\n​        **1. IP地址及其表示方法**\n\n​        IP地址就是给互联网上的每一台主机或路由器的每一个接口分配一个在全世界范围内是唯一的32为的标识符。IP地址的编址方法共经历过三个历史阶段。\n\n​      （1）分类的IP地址。这是最基本的编址方法。\n\n​      （2）子网的划分。这是对基本编址方法的改进。\n\n​      （3）构成超网。这是比较新的无分类编址方法。\n\n* 分类的IP地址。分为A、B、C、D、E五类，每一类地址都由两个固定长度字段组成，第一个字段是网络号，标志主机或路由器所连接到的网络，一个网络号在整个互联网范围内必须是唯一的 。第二个字段是主机号，标志该主机或路由器。一台主机号在它前面的网络号所指明的网络范围内必须是唯一的。故一个IP地址在整个互联网范围内是唯一的。\n* A、B和C类地址的网络号字段分别是1，2，3个字节长，而网络号字段的最前面有1~3位的类别位，分别为0，10，110。\n* A类、B类、和C类地址的主机号字段分别为3个、2个和1个字节长。\n* D类地址（前4位是1110）用于多播。E类地址（前4位是1111）保留为以后使用。\n\n<img src=\"D:\\Typora\\picture\\image-20220225113651742.png\" alt=\"image-20220225113651742\" style=\"zoom: 50%;\" />\n\n​        A，B，C类地址都是单播地址，是最常用的。另外，由于近年来已经广泛使用无分类IP地址进行路由选择，A、B、C类地址的区分已经成为历史。分类的原因是，各种网络的差异很大，有的网络主机多，有的主机少，为了满足不同用户的需求，便进行如此分类。对主机或路由器来说，IP地址都是32位的二进制代码。为提高可读性，在每8位插入一个空格（机器中没有空格）加上一个点，并用等效的十进制表示。这就是点分十进制。\n\n<img src=\"D:\\Typora\\picture\\image-20220225114706269.png\" alt=\"image-20220225114706269\" style=\"zoom:50%;\" />\n\n​        **2. 常用的三种类别的IP地址**\n\n* A类。A类地址的网络号占1个字节，只有7位可供使用。可指派的网络号是2^7-2=126个，减2的原因是：1.IP地址中的全0表示“这个（this）”，作为保留地址，意思是“本网络”；2.网络号为127保留作为本地软件环回测试本主机进程之间的通信。目的地址为环回地址的IP数据报永远不会出现在任何网络上，因为网络号为127的地址根本不是一个网络地址。A类地址的主机号占3个字节，因此每一个A类网络中的最大主机数是2^24-2=16777214个，减2的原因是，全0的主机号字段表示该IP地址是“本主机”所连接到的单个网络地址，全1表示“所有的（all）”，因此全1的主机号字段表示该网络上的所有主机。\n* B类。B类地址的网络号字段有2个字节，剩下14位可以分配。由于B类地址128.0.0.0不可指派，因此B类地址可指派的网络数为2^14-1=16383。B类地址的每一个网络上的最大主机数为2^16-2=65534。减2是要减去全0和全1的主机号。\n* C类。C类地址有3个字节的网络号字段，剩下21位可以分配。C类网络地址192.0.0.0不可指派，因此C类地址可指派的网络总数是2^21-1=2097151个。每个C类地址的最大主机数是2^8-2=254个。\n\n<img src=\"D:\\Typora\\picture\\image-20220225141951000.png\" alt=\"image-20220225141951000\" style=\"zoom:50%;\" />\n\n<img src=\"D:\\Typora\\picture\\image-20220225142018209.png\" alt=\"image-20220225142018209\" style=\"zoom:49.5%;\" />\n\n​        IP地址具有一些重要特点\n\n* 每个IP地址都由网络号和主机号组成。这样分级的好处是：1.IP地址管理机构在分配IP地址时只分配网络号，剩下的主机号由得到该网络号的单位自行分配。这样就方便了IP地址的管理。2.路由器仅根据目的主机所连接的网络号来转发分组，这样可以使路由表中的项目数大幅减少。\n* 实际上IP地址是标志一台主机或路由器和一条链路的接口。当一台主机同时连接到两个网络时，该主机必须同时具有两个不同网络号的IP地址。由于一个路由器至少应当连接到两个网络，因此一个路由器至少有两个不同的IP地址。\n* 用转发器或网桥连接起来的若干个局域网任位一个网络，因为这些局域网都具有相同的网络号。具有不同网络号的局域网必须使用路由器进行互连。\n* 在IP地址中，所有分配到网络号的网络都是平等的。所谓平等，是指互联网同等对待每一个IP地址。\n\n**2.2.3 IP地址与硬件地址**\n\n​        IP地址是网络层和以上各层使用的地址，是一种逻辑地址（因为IP地址用软件实现，故称逻辑地址）。物理地址是数据链路层和物理层使用的地址。IP地址放在IP数据报的首部，而硬件地址放在MAC帧的首部，故在数据链路层看不见数据报的IP地址。IP数据报从传送开始到结束，其IP数据报首部的源地址与目的地址是始终不变的，但MAC帧首部的源地址和目的地址一直在变。\n\n<img src=\"D:\\Typora\\picture\\image-20220225145103178.png\" alt=\"image-20220225145103178\" style=\"zoom:50%;\" />\n\n**2.2.4 地址解析协议ARP**\n\n​        主机或路由器怎样知道，应当在MAC帧的首部填入怎样的硬件地址？ARP协议被用来解决这个问题，它可以将IP地址解析出硬件地址。由于是IP协议使用了ARP协议，因此通常把ARP协议划分为网络层，其实根据它的作用，将其划分为链路层也是可以的。另外，DHCP协议包含了RARP功能。\n\n​        ARP协议的要点：\n\n* 虽然网络层使用IP地址，但在实际网络的链路上传送数据帧时，最终还是得使用该网络的硬件地址。但IP地址和硬件地址之间并不存在简单的映射关系。而且，在一个网络上可能经常有主机加入进来或撤走，更换适配器也会使主机的硬件地址改变。ARP协议解决这个问题的方法是在主机ARP高速缓存中存放一个从IP地址到硬件地址的映射表，这个表经常动态更新。\n* 当主机A向本局域网上的B发送IP数据报时，先在ARP高速缓存中查看有无主机B的IP地址。如有，就直接把地址写入MAC帧，然后通过局域网发送。若没有，则ARP进程在本局域网上广播一个ARP分组，分组中包含本机的IP地址和硬件地址，还有目标主机的IP地址（也就B的IP地址），主机B的IP地址与ARP请求分组中的IP地址一致，则收下这帧（其他主机的IP地址与请求的IP地址不同，则不理睬），并向主机A发送ARP响应分组（注意，响应分组是一对一发送而非广播），内容包含B的IP地址和硬件地址。主机A收到主机B的ARP分组后，就在高速缓存中写入主机B的IP地址和硬件地址的映射，同时B也写入了A的映射。\n* ARP对保存在高速缓存中的每一个映射地址项目都设置生存时间（如，10~20分钟）。超过生存时间的项目就从高速缓存中删除。另外，ARP解决的是同一局域网上的主机或路由器的IP地址和硬件地址的映射问题。\n\n**2.2.5 IP数据报的格式**\n\n​        IP数据报由首部和数据两部分组成。首部的前一部分是固定长度，共20字节，是IP数据报必须具有的。在首部的固定部分的后面是一些可选字段，长度可变。\n\n​        **1. IP数据报首部的固定部分中各字段**\n\n<img src=\"D:\\Typora\\picture\\image-20220228144659302.png\" alt=\"image-20220228144659302\" style=\"zoom:40%;\" />\n\n* 版本：占4位，指IP协议版本。通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为IPv4。\n* 首部长度：占4位，可表示的最大十进制数值是15。首部长度字段所表示数的单位是4字节。因为IP首部的固定长度是20字节，因此首部长度字段的最小值是20/4=5，最大值是15。所以首部长度的最大值为15*4=60字节，由于首部长度字段的单位是4字节，所以数据报的数据部分永远在4字节的整数倍时开始。\n* 区分服务：占8位。用来获得更好的服务。该字段实际上一直未被使用过，只有在使用区分服务时，这个字段才起作用。在一般情况下都不使用这个字段。\n* 总长度：占16位。指首部和数据报之和的长度，单位为字节。数据报的最大长度为2^16-1=65535字节。实际上极少传送这么长的数据报。当数据报长度超过链路层的MTU，就必须把过长的数据报进行分片处理。\n* 标识：占16位。IP软件在存储器中维持的一个计数器，每产生一个数据报，计数器就+1，并赋值给标识字段。标识字段非序号，因为IP是无连接服务，不存在按序接收的问题。当数据报过长（如超过MTU）而必须分片时，这个标识字段的值被复制到所有的数据报片中。相同标识字段的值使分片后的各数据报片最后能正确组合成原数据报。\n* 标志：占3位，目前只有两位有意义。最低为记为MF。当MF=1时，表示后面“还有分片”的数据报。MF=0表示这是若干分片的最后一个。中间一位记为DF，意思是“不能分片”。当DF=0时，才允许分片。\n* 片偏移：占13位。片偏移指出：较长的分组在分片后，某片在原分组的相对位置。每个分片的长度一定是8字节的整数倍。（片偏移的值其实就是排序值）\n* 生存时间：占8位。生存时间字段常用的英文缩写是TTL。由发出数据报的源点设置这个字段，目的是防止无法交付的数据报无限制地在网络中兜圈子，从而浪费网络资源。最初TTL是以秒为单位，数据报在路由器消耗的时间小于1秒，就把TTL的值-1，当TTL为0，就丢弃这个数据报。由于现在路由器处理数据报的时间远远小于1秒，故将TTL字段的功能改为“跳数限制”（名称不变）。路由器每次转发数据报分组就把TTL值-1，减到0就丢弃。因此现在TTL的单位不再是秒，而是跳数。显然，数据报在互联网中经过的路由器最大值是255。若把TTL的初始值设置为1，就表明这个数据报只能在本局域网中传送。\n* 协议：占8位。协议字段指出此数据报携带的数据是何种协议。常用的协议和对应的协议字段如下：\n\n<img src=\"D:\\Typora\\picture\\image-20220228135046796.png\" alt=\"image-20220228135046796\" style=\"zoom:50%;\" />\n\n* 首部检验和：占16位。此字段只检验数据报的首部，不包括数据部分。计算方法：将IP数据报首部划分为许多16位字的序列，并把检验和字段置零，用反码算术运算把所有16位字相加后，将得到的和的反码写入检验字段。接收方同样使用反码算术运算把16位字相加，得出结果取反。若首部未发生任何变化，则此结果一定为0\n\n<img src=\"D:\\Typora\\picture\\image-20220228144542832.png\" alt=\"image-20220228144542832\" style=\"zoom:40%;\" />\n\n* 源地址、目的地址：均占32位。\n\n​        **2. IP数据报首部的可变部分**\n\n​        可变部分就是一个选项字段。该字段用来支持排错、测量以及安全等措施，内容很丰富。此字段的长度取决于所选择的项目。某些选项项目只需要1各字节，它只包括1各字节的选项代码。而有的选项需要多个字节，这些选项一个个拼接起来，中间不需要分隔符，最后用全0的填充字段补齐成为4字节的整数倍。首部的可变部分增加了IP数据报的功能，同时也增加了路由器处理数据的开销。实际上这些选项很少使用，很多路由器都不考虑IP首部的选项字段，因此IPv6把IP数据报的首部长度做成固定的。\n\n**2.2.6 IP层转发分组的流程**\n\n​        路由器在转发分组时，仅根据网络号进行转发。在路由表中，每一条路由最主要的是以下两个信息（实际上路由表还包含其他信息）：（目的网络地址，下一跳地址）\n\n<img src=\"D:\\Typora\\picture\\image-20220228160040885.png\" alt=\"image-20220228160040885\" style=\"zoom:50%;\" />\n\n根据目的网络地址来确定下一跳路由器，这样做可得出以下结果：\n\n​        （1）IP数据报最终一定可以找到目的主机所在的目的网络上的路由器。\n\n​        （2）只有到达最后一个路由器，才试图向目的主机进行直接交付。\n\n​        在考虑到安全问题，或者为方便网络管理人员控制或测试网络，可以采用特定主机路由。即对特定的目的主机指明一个路由，大多数情况下都允许有这样的特例。路由器还可以采用默认路由以减少路由表所占用的空间和搜索路由表所用的时间。这种转发方式在一个网络只有很少的对外连接时是很有用的。\n\n​        IP数据报首部的IP地址仅包含源地址和目的地址，待转发的数据报如何找到下一跳路由器？分组转发算法如下：\n\n​        （1）从数据报的首部提取目的主机IP地址D，得出目的网络地址为N。\n\n​        （2）若N为此路由器直接相连的网络，则直接交付，不需要经过其他路由器。否则执行下一步。\n\n​        （3）若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由。否则执行下一步。\n\n​        （4）若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器，否则执行下一步。\n\n​        （5）报告转发分组出错。\n\n​        路由表并没有给分组指明到某个网络的完整路径。路由表指出，到某个网络应当先到某个路由器在到达下一台路由器后，再继续查找路由表，这样一步一步查找下去，直到达到目的网络。路由表如何建立和更新，看后续内容。\n\n**2.3 划分子网和构造超网**\n\n**2.3.1 划分子网**\n\n​        **1. 从两级IP地址到三级IP地址**\n\n​        早期IP地址的一些缺点：\n\n​        （1）IP地址空间的利用率低。\n\n​        （2）给每一个物理网络分配一个网络号会使路由表变太大而使网络性能变坏。\n\n​        （3）两级IP地址不够灵活。\n\n​       划分子网的基本思路：\n\n​        （1）一个拥有许多物理网络的单位，可将所属的物理网络划分为若干个子网。这个单位对外仍然表现为一个网络。\n\n​        （2）划子网的方法是从网络的主机号借用若干位作为子网号。两级的IP地址就变为三级：网络号.子网号.主机号。\n\n​        （3）从其他主机发送给本单位某台主机的IP数据报，仍然是根据IP数据报的目的网络号找到连接在本单位网络上的路由器，然后该路由器再按照网络号和子网号找到目标主机。\n\n​        **2. 子网掩码**\n\n​        由于IP地址本身以及数据报的首部都没有包含任何关于子网划分的信息，所以从IP数据报首部无法看出源主机或目的主机所连接的网络是否进行了子网的划分。使用子网掩码来表示子网划分。子网掩码和IP地址一样，也是32位，由连续的1和0组成。使用子网掩码的好处是：不管网络是否划分子网，只需要把子网掩码和IP地址进行逐位“与”运算，就可以立即得出网络地址。\n\n**2.3.2 使用子网是分组的转发**\n\n​        使用子网划分后，路由表必须包含三项内容：目的网络地址、子网掩码、下一跳地址。转发分组的算法如下：\n\n​        （1）从收到的数据报的首部提取目的IP地址D。\n\n​        （2）先判断是否为直接交付。对路由器直接相连的网络逐个检查：用各网络的子网掩码和D逐位相“与”，看结果是否和相应的网络地址匹配。若匹配，则把分组直接交付。否则就是间接交付，执行（3）。\n\n​        （3）若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行（4）\n\n​        （4）对路由表中的每一行，用其中的子网掩码和D逐为相“与”，其结果为N。若N与该行的目的网络地址匹配，则把数据报传给该行指明的下一跳路由器，否则执行（5）。\n\n​        （5）若路由表有一个默认路由，则传给默认路由。否则执行（6）\n\n​        （6）报错\n\n**2.3.3 无分类编址CIDR（构造超网）**\n\n​        **1. 网络前缀**\n\n​        CIDR最主要的特点有两个：（1）CIDR消除了传统的A类、B类和C类地址以及划分子网的概念，因而能更加有效的分配IPv4的地址空间，并且在新的IPv6使用前容许互联网的规模继续增长。CIDR把32位的IP地址划分为前后两个部分。前面是“网络前缀”，用来指明网络，后面部分用来指明主机。因此CIDR使IP地址从三级编址（使用子网掩码）又回到两级编址，但这已是无分类的两级编。CIDR使用“斜线记法”，在IP地址后面加上“/”,然后写上<font color=\"red\">网络前缀所占的位数</font>。（2）CIDR把网络前缀相同的连续的IP地址组成一个“CIDR地址块”。只需知道CIDR地址块中的任何一个地址，就可以这个地址块的起始地址和最大地址。例如，128.14.35.7/20  。这个地址块的最小地址和最大地址可以很方便的得出：\n\n<img src=\"D:\\Typora\\picture\\image-20220307144146505.png\" alt=\"image-20220307144146505\" style=\"zoom: 67%;\" />\n\n另外，上面两个全0和全1的地址一般并不使用。CIDR使用32位子网掩码，如上面这个地址，/20地址块的掩码就是20个连续的1，后面是0，斜线记法中，斜线后面的数字就是地址掩码中1的个数。\n\n​        **2. 最长前缀匹配**\n\n​        在使用CIDR时，路由表中的项目也有相应改变。每个项目由“网络前缀”和“下一跳地址”组成。但是在查找路由表时，可能会得到不止一个匹配结果。从匹配结果中选择具有最长网络前缀的路由。这即是最长前缀匹配。因为网络前缀越长，其地址块越小，而路由也就越具体。最长前缀匹配也称最佳匹配。例子如下：\n\n​        某个大学的IP地址是206.0.68.0/22。其下的某个系的IP地址是206.0.71.128/25。这个系希望ISP把转发给自己的数据报直接发送给自己系而不经过大学的路由器，所以在ISP的路由器的路由表中，至少要有大学和这个系的项目。假定ISP收到一个数据报，其目的IP地址为D=206.0.71.130。把D分别和路由表中这两个项目的掩码逐位相与：\n\n<img src=\"D:\\Typora\\picture\\image-20220309144306228.png\" alt=\"image-20220309144306228\" style=\"zoom:50%;\" />\n\n可以看出，这两个地址都是匹配的，但根据最长前缀匹配的原理，应当选择后者。\n\n​        **3. 使用二叉线索查找路由表**\n\n​        *暂时放一放*\n\n**2.4 网际控制报文协议ICMP**\n\n​        为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用ICMP协议，它允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP是互联网标准协议，但非高层协议（看起来好像是高层，因为ICMP报文是装在IP数据报中，作为其中的数据部分），而是IP层协议。ICMP报文作为IP层数据报的数据，加上数据报的首部，组成IP数据报发送出去。下面是ICMP报文格式图\n\n<img src=\"D:\\Typora\\picture\\image-20220309153824144.png\" alt=\"image-20220309153824144\" style=\"zoom:50%;\" />\n\n**2.4.1 ICMP报文的种类**\n\n​        ICMP报文的种类有两种，是ICMP差错报告报文和ICMP询问报文。\n\n​        ICMP报文的前4字节是统一格式，共3个字段：类型、代码和检验和。接下来的4个字节的内容与ICMP的类型有关。最后是数据字段，其长度取决于ICMP的类型。下面是几种常用的ICMP报文类型。\n\n<img src=\"D:\\Typora\\picture\\image-20220309154414963.png\" alt=\"image-20220309154414963\" style=\"zoom:50%;\" />\n\n表中的参数共4种，即：\n\n​        （1）终点不可达，当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。\n\n​        （2）超时，当路由器收到生存时间为零的数据报时，除了丢弃该数据报外，还得向源点发送超时报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送超时报文。\n\n​        （3）参数问题，当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。\n\n​        （4）改变路由（重定向），路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器\n\n​        关于改变路由报文，我们知道，当主机发送数据报时，首先查找主机自己的路由表，看应当从哪一个接口把数据报发送出去。在互联网中主机数量远远大于路由器数量，出于效率考虑，主机不和连接在网络上的路由器交换路由信息。在主机刚开始工作时，一般都在路由表设置一个默认路由器IP地址。而默认路由器知道到每个目的网络的最佳路由。如果默认路由器发现主机发往某个目的地址的数据报的最佳路由应当经过网络上的另一个路由器R时，就用改变路由报文把这情况告诉主机。于是，该主机就在其路由表中增加一个项目：到某某目的地址应经过路由器R（而不是默认路由）\n\n​        所有的ICMP差错报告报文中的数据字段都具有相同的格式。把收到的需要进行差错报告的IP数据报的首部和数据字段的前8个字节提取出来，作为ICMP报文的数据字段。再加上相应的ICMP差错报告报文的前8字节（ICMP的首部），就构成ICMP差错报告报文。提取收到的数据报的数据字段前8字节是为了得到TCP层的端口号及TCP层报文的发送序号。整个ICMP报文作为IP数据报的数据字段发送给源点。\n\n<img src=\"D:\\Typora\\picture\\image-20220316133107515.png\" alt=\"image-20220316133107515\" style=\"zoom:50%;\" />\n\n下面是不应发送ICMP差错报告报文的几种情况：\n\n​        （1）对ICMP差错报告报文，不再发送ICMP差错报告报文。\n\n​        （2）对第一个分片的数据报片的所有后续数据报片，都不发送ICMP差错报告报文。\n\n​        （3）对具有多播地址的数据报，都不发送ICMP差错报告报文。\n\n​        （4）对具有特殊地址（如127.0.0.0等）的数据报，不发送ICMP差错报告报文。\n\n常用的ICMP询问报文有两种：\n\n* 回送请求和回答，ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到改报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达以及了解有关状态。\n* 时间戳请求和回答，ICMP时间戳请求报文是请某台主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1990年1月1日起到当前时刻一共有多少秒。时间戳请求与回答可用于时钟同步和时间测量。\n\n**2.4.2 ICMP的应用举例**\n\n​        分组网间探测PING，用于测试两台主机间的连通性。PING使用了ICMP回送请求与回送回答报文。PING是应用层直接使用网络层ICMP的一个例子，它没有通过运输层。使用方法，CMD输入ping IP地址。另一个非常有用的应用是traceroute（在Unix中使用此命令，在Windows使用tracert）。\n\n​        tracert的工作原理：从源主机向目的主机发送一连串的IP数据报，数据报中封装的是无法交付的UDP用户数据报，第一个数据报P1的生存时间TTL设置为1。当P1到达路径上的第一个路由器R1时，路由器R1先收下，然后把TTL减1。由于TTL等于0了，R1就把P1丢弃了，并向源主机发送一个ICMP时间超过差错报告报文。接着发送P2，并设置TTL为2，重复上述过程。每次发送TTL都+1，直到到达目的主机，但由于IP数据报中封装的是无法交付的UDP数据报，因此目的主机要向源主机发送ICMP终点不可达差错报告。\n\n​        从原则上讲，IP数据报经过的路由器越多，所花费的时间越长，但是互联网的拥塞程度随时都在变化，也难以预料，因此完全有可能，经过更多的路由器反而花费的时间更少。\n\n**2.5 互联网的路由选择协议**\n\n**2.5.1 有关路由选择协议的几个基本概念**\n\n​        **1. 理想的路由算法**\n\n​        路由选择协议的核心就是路由算法，即需要何种算法来获得路由表中的各个项目，理想的算法应具有以下特点。\n\n* 算法必须正确和完整，所谓“正确”就是，沿着各路由表所指引的路由，分组一定能到达目的网络和目的主机。\n* 算法在计算上应简单，路由选择的计算不应使网络通信量增加太多的额外开销。\n* 算法能适应通信质量和网络拓扑的变化，算法能自适应改变路由以均衡各链路的负载，当某结点、链路发生故障不能工作，或者修好在投入允许，算法也能及时改变路由。\n* 算法应具有稳定性，在网络通信量和网络拓扑相对稳定时，路由算法收敛于一个可以接受的解，而不应使得出的路由不停变化。\n* 算法应是公平的，路由选择算法对所有用户都是公平的。\n* 算法应最佳，算法应当能找到最好的路由，使得分组平均时延最小而网络吞吐量最大。\n\n​        一个实际的路由选择算法应尽可能的接近于理想的算法。在不用应用条件下，对以上的六个方面也可有不同的侧重。\n\n若从路由算法能否随网络的通信量或拓扑自适应地进行调整变化来划分，则可以分为，“静态路由选择策略”和“动态路由选择策略”。也称非自适应路由选择和自适应路由选择，它们分别适合简单的小网络（人工配置每条路由）以及复杂的大网络。\n\n​        **2. 分层次的路由选择协议**\n\n​        互联网采用的路由选择协议主要是自适应的、分布式路由选择协议。因为：\n\n​        （1）互联网规模很大，若让所有的路由器知道网络应怎样到达，则这种路由表将非常大，处理起来也花很多时间。\n\n​        （2）许多单位不愿意外界了解自己单位网络的布局细节和本部门所采用的路由选择协议，但同时希望连接到互联网。\n\n​        为此，可以把整个互联网划分为许多较小的自治系统，一般都记为AS。AS是在单一技术管理下的一组路由器，而这些路由器使用一种自治系统内部的路由选择协议和共同度量。一个AS对其他AS表现出的一个单一的和一致的路由器选择策。在目前的互联网中，一个大ISP就是一个自治系统。这样，互联网就把路由选择协议分为两大类，即：\n\n​        （1）内部网关协议IGP，即在一个自治系统内部使用的路由选择协议，这与互联网中的其他自治系统选用的什么路由器选择协议无关。目前这类路由选择协议使用得最多，如RIP和OSPF协议。\n\n​        （2）外部网关协议EGP，若源主机和目的主机处在不同的自治系统中（这两个自治系统可能使用不同的内部网关协议），当数据报传到一个自治系统的边界时，需要使用EGP协议将路由选择信息传到该自治系统中，目前使用最多的外部网关协议是BGP的版本4（BGP-4）\n\n​        自治系统之间的路由选择也叫做域间路由选择，而自治系统内部的路由选择叫域内路由选择。\n\n<img src=\"D:\\Typora\\picture\\image-20220316152209964.png\" alt=\"image-20220316152209964\" style=\"zoom:50%;\" />\n\n**2.5.2 内部网关协议RIP**\n\n​        **1. 工作原理**\n\n​        RIP的中文名叫路由信息协议，很少被使用。RIP是一种分布式的基于距离向量的路由器选择协议，其最大的优点是简单。该协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。RIP将“距离”定义如下：从一路由器到直接连接的网络的距离定义为1。从一路由器到非直接连接的网络的距离定义为所经过的路由器数+1。RIP协议的“距离”也称为“跳数”，因为每经过一个路由器，跳数就+1。RIP认为好的路由就是他通过的路由器的数目少，即“距离短”。RIP允许一条路径最多只能包含15个路由器，当“距离”为16时即相当于不可达。可见RIP只适合小型互联网。另外，到直接连接的网络的距离也可定义为0。RIP不能在两个网络之间同时使用多条路由。RIP选择一条具有最少路由器的路由，哪怕还存在另一条高速但路由器较多的路由。\n\n​        RIP和OSPF都是分布式路由选择协议。它们的共同特点就是每一个路由器都要不断地和其他一些路由器交换路由信息。需要弄清楚的三个要点是：和哪些路由交换信息，交换什么信息，什么时候交换信息\n\n​        RIP协议的特点是：\n\n​        （1）仅和相邻的路由器交换信息。所谓相邻，就是两个路由器交换信息不经过另一个路由器。\n\n​        （2）路由器交换的信息是当前本路由器所知道的全部信息，即自己现在的路由表。\n\n​        （3）按固定的时间间隔交换路由信息，如每隔30秒根据收到的路由表更新路由表。当网络拓扑发生变化，路由器也及时向相邻路由器通告拓扑变化后的路由信息。\n\n​        路由器在刚开始工作时，它的路由表是空的。然后路由器就得出到直接相连的几个网络的距离，接着，每一个路由器也只会和数目非常有限的相邻路由器交换并更新路由信息，进过若干次更新后，所有路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。', '这是计算机网络IP层的笔记，之前上班的时候写的，还没写完，巨多！', b'0', b'1', b'1', b'0', '2022-04-28 16:09:12', '2022-04-28 16:09:12', 27, 10015, 50, 3, b'1', 'NatsuKaze');
INSERT INTO `article` VALUES (2, '数据链路层笔记', '', '### 数据链路层\n\n**1.两种主要的信道类型**\n\n* 点对点信道。这种信道使用一对一点对点通信方式\n* 广播信道。这种信道使用一对多的广播通信方式，此信道连接的主机很多，必须使用专用的共享信道协议来协调这些主机的数据发送\n\n**1.1 使用点对点信道的数据链路层**\n\n**1.1.1 数据链路和帧**\n\n* 链路。从一个结点到相邻结点的一段物理线路（有线或无线），中间无任何其他的交换结点。\n* 数据链路。在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议控制数据的传输。把实现这些协议的硬件和软件加到链路上，就构成了数据链路。\n* 网络适配器。既有硬件也包括软件，用于实现数据链路的协议。一般的适配器都包括了数据链路层和物理层这两层的功能\n* 帧。数据链路层把网络层交下来的数据构成帧发送到链路上，以及把接受到的帧中的数据取出上交给网络层。\n\n**1.1.2 三个基本问题**\n\n​        数据链路层协议有许多种，但其中三个基本问题是共同的：封装成帧，透明传输，差错检查\n\n* 封装成帧。分别在网络层传下来的数据的前面和后面添加首部和尾部，构成了一个完整的帧。这样的帧就是数据链路层的数据传送单元。帧长=首部+数据+尾部。首部和尾部的一个重要作用是进行帧定界，此外它们还包括许多必要的控制信息。发送帧时，是从首部开始发送，各种链路层协议都对首部和尾部的个格式有明确的规定。为了提高帧的传送效率，数据部分应尽可能的大于首部和尾部的长度。每种链路层协议都规定了数据部分长度上限----最大传送单元\n\n<img src=\"D:\\Typora\\picture\\image-20220211154016559.png\" alt=\"image-20220211154016559\" style=\"zoom:50%;\" />\n\n* 帧定界符。当数据部分是可打印的ASSCII码组成的文本文件时，帧定界可以使用特殊的帧定界符。ASCII码是7位编码，一共组合成128个不同的ASCII码。可打印的有95个（即键盘可输入的95个），不可打印的控制字符有33个。首部使用使用控制字符SOH，十六进制位01。尾部使用EOT，十六进制为04。接收端必须读取到SOH和EOT后，才认定为一个完整的帧，否则丢弃。\n\n<img src=\"D:\\Typora\\picture\\image-20220211155733912.png\" alt=\"image-20220211155733912\" style=\"zoom:50%;\" />\n\n* 透明传输。当数据部分是非ASCII码的文本文件时，若其中的某个字节的二进制代码恰好和SOH或EOT一样，链路层会错误的判断帧边界，导致数据错误。解决方法是，若数据部分出现帧定界符SOH或EOT，在这个SOH或EOT的前面插入转义字符ESC（十六进制为1B），同样，如果数据部分出现ESC，那么在ESC前面插入ESC。接收端在收到该帧后，会删除数据部分插入的转义字符。此方法称为字节填充。\n\n<img src=\"D:\\Typora\\picture\\image-20220211160731505.png\" alt=\"image-20220211160731505\" style=\"zoom:50%;\" />\n\n<img src=\"D:\\Typora\\picture\\image-20220211160758281.png\" alt=\"image-20220211160758281\" style=\"zoom:50%;\" />\n\n* 差错检查。比特在传输过程中可能会出错，例如1变0或者0变1。这就叫比特差错。目前在链路层广泛使用循环冗余检验CRC的检错技术。常用的生成多项式有CRC-16，CRC-CCITT，CRC-32。除比特差错外，还有传输差错，即帧丢失，帧重复，帧失序。解决方法，在CRC检错的基础上，增加帧编号、确认和重传机制。但对于通信质量良好的有线传输链路，链路层协议不使用确认和重传机制，即不要求链路层向上提供可靠传输的服务，如果出现了差错并要求进行改正，那么交由上层协议（如TCP）来完成。对于通信质量较差的无线传输链路，数据链路层协议使用确认重传机制，链路层向上提供可靠传输服务。\n\n**1.2 点对点协议PPP**\n\n**1.2.1 PPP协议的特点**\n\n​        PPP协议就是用户计算机和ISP进行通信时所使用的链路层协议\n\n​        ***1. PPP协议应满足的需求***\n\n* 简单。对数据链路层的帧，不需要纠错，不需要序号，也不需要流量控制。（因为最复杂的功能交由TCP处理了）\n* 封装成帧。PPP协议必须规定特殊的字符作为帧定界符\n* 透明性。\n* 多种网络层协议。PPP协议必须能在在同一条物理链路上同时支持多种网络层协议（如IP和IPX等）的运行。当点对点链路所连接的是局域网或路由器，PPP协议必须同时支持在链路所连接的局域网或路由器上运行的各种网络层协议。\n* 多种链路类型。PPP协议必须能够在多种类型的链路上运行。例如，串行的或并行的，同步或异步，低速或高速的，等。\n* 差错检测。PPP协议必须能对接收端收到的帧进行检测，并立即丢弃有差错的帧。\n* 检测连接状态。PPP协议必须具有一种机制能够及时自动检测出链路是否处于正常工作状态。\n* 最大传送单元。PPP协议必须对每一种类型的点对点链路设置MTU的标准默认值\n* 网络层地址协商。PPP协议必须提供一种机制使通信的两个网络层的实体能够通过协商知道或能够配置彼此的网络层地址。\n* 数据压缩协商。PPP协议必须提供一种方法来协商使用数据压缩算法。但PPP协议不要求将数据压缩算法进行标准化。\n\n​       *在TCP/IP协议族中，可靠传输由TCP负责。此外，PPP协议只支持全双工链路*\n\n​        ***2. PPP协议的组成***\n\n* 一个将IP数据报封装道串行链路的方法。IP数据报在PPP帧中就是其信息部分。这个信息部分的长度受MTU的限制。\n* 一个用来建立、配置和测试数据链路连接的链路控制协议LCP。通信双方可协商一些选项。\n* 一套网络控制协议NCP，其中的每一个协议支持不同的网络层协议。\n\n**1.2.2 PPP协议的帧格式**\n\n* 各字段的意义。PPP帧的首部和尾部分别为四个字段和两个字段。首部的第一个字段和尾部的第二个字段都是标志字段F，它标志一个帧的开始或结束。如果连续出现两个标志字段，表明这是一个空帧，应当丢弃。首部第二个和第三个字段A和C均无携带PPP帧的信息，第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP帧的信息字段就是IP数据报，同样的，0xC021对应LCP数据，0x8021对应网络层的控制数据。信息字段长度可变，不超过1500字节。尾部的第一个字段（2字节），是使用CRC的帧检验序列FCS。\n\n<img src=\"D:\\Typora\\picture\\image-20220213180051745.png\" alt=\"image-20220213180051745\" style=\"zoom:67%;\" />\n\n* 字节填充。PPP使用异步传输时，它将转义字符定义为0x7D，并使用字节填充。填充方法：1.信息字段中出现的每一个0x7E字节转变为2字节序列（0x7D，0x5E）2.信息字段中出现一个0x7D的字节，则把0x7D转变为2字节序列（0x7D，0x5D）3.信息字段出现ASCII码的控制字符（即数值小于0x20的字符），则在该字符前加入一个0x7D字节，同时将该字符的编码加以改变。\n\n* 零比特填充。PPP协议在SONET/SDH链路，使用同步传输。在这种情况下，PPP协议采用零比特填充方法来实现透明传输。其具体做法是，先扫描信息字段，只要发现5个连续的1，则立即填入一个0（因为帧定界符的二进制为01111110）。在接收端，每发现5个连续的1，就删除后面的0。\n\n**1.2.3 PPP协议的工作状态**\n\n* PPP链路的初始化。当用户拨号接入ISP后，就建立了一条从用户个人电脑道ISP的物理连接。这时，用户个人电脑向ISP发送一系列的LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，网络控制协议NCP给新接入的用户个人电脑分配一个临时的IP地址。这样，用户个人电脑就成为互联网上的一个有IP地址的主机了。当用户通信完毕时，NCP释放网络层连接，收回原来分配出去的IP地址。接着，LCP释放链路层连接，最后释放的是物理层连接。\n* 工作状态。PPP链路的起始和终止状态永远是“链路静止”状态，这时在用户个人电脑和ISP的路由器之间并不存在物理层的连接。当用户个人电脑通过调制解调器呼叫路由器（通常是在屏幕上点击连接按钮），路由器就能检查到调制解调器发出的载波信号。在双方建立物理层连接后，PPP就进入“链路建立”状态，其目的是建立链路层的LCP连接。这时LCP开始协商一些配置选项，即发送LCP的配置请求帧。这是一个PPP帧，其协议字段置为LCP对应的代码，信息字段包含特定的配置请求。链路另一端可以发送以下几种响应中的一种：1.配置确认帧（所有选项都接受）2.配置否认帧（所有选项都理解但不能接受）3.配置拒绝帧（选项有的无法识别或不能接受，需要协商）。\n* LCP配置选项。包括链路上的最大帧长、所使用的鉴别协议的规定，以及不使用PPP帧中的地址和控制字段（因为这两个字段的值是固定的，没有任何信息量，可以在PPP帧首部中省略这两个字节）。\n* “鉴别”状态。协商结束后双方就建立了LCP链路，接着进入鉴别状态。在此状态下，只允许传送LCP协议的分组、鉴别协议的分组以及检测链路质量的分组。若使用口令鉴别协议PAP,则需要发起通信的一方发送身份标识符和口令。系统可允许用户重试若干次。如需要有更好的安全性，则可使用更复杂的口令握手鉴别协议CHAP。若鉴别身份失败，则转到“链路终止”状态。若鉴别成功，则进入“网络层协议”状态。\n* “网络层协议”状态。PPP链路的两端的网络控制协议NCP根据网络层的不同协议互相交换网络层特定的网络控制分组。PPP协议两端的网络层可以允许不同的网络层协议，但仍然可使用同一个PPP协议进行通信。如果在PPP链路上运行的是IP协议，则对PPP链路的每一端配置IP协议模块（如分配IP地址）时就要使用NCP中支持IP的协议——IP控制协议IPCP。IPCP分组也封装成PPP帧（协议字段为0x8021）在PPP链路上传送。在低速链路上运行时，双方还可以协商使用压缩TCP和IP首部，以减少链路上发送的比特数。\n* “链路打开”状态。当网络层配置完毕后，链路就进入可进行数据通信的“链路打开”状态。链路的两个PPP端点可以彼此向对方发送分组。两个PPP端点还可以发送回送请求LCP分组和回送回答LCP分组，以检测链路的状态。\n* “链路终止”状态。数据传输结束后，可以由链路的一端发送终止请求LCP分组请求终止链路连接，在收到对方发来的终止确认LCP分组后，转到“链路终止”状态。如果链路出现故障，也会从“链路打开”状态转到“链路终止”状态。当调制解调器的载波停止后，则回到“链路静止”状态。\n\n<img src=\"D:\\Typora\\picture\\image-20220215153846148.png\" alt=\"image-20220215153846148\" style=\"zoom: 67%;\" />\n\n​       PPP协议已经不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容\n\n**1.3 使用广播信道的数据链路层**\n\n​       广播信道可以进行一对多的通信\n\n**1.3.1 局域网的数据链路层**\n\n* 局域网的主要特点。主要特点是：网络为一个单位所拥有，且地理范围和站点数目均有限。具有以下一些优点：1.具有广播功能，从一个站点可很方便访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。2.便于提高系统的扩展和逐渐演变，各设备的位置可灵活调整和改变。3.提高了系统的可靠性，可用性和生存性。\n* 局域网分类。按网络拓扑进行分类：星形网，环形网，总线网\n* 共享信道。两种技术实现共享信道。1.静态划分信道，详见2章2.4节。2.动态媒体接入控制，又称多点接入，其特点是信道并非在用户通信时固定分配给用户。这里又分为以下两类：（1）随机接入，其特点是所有的用户可随机的发送信息。但如果恰巧有两个或更多的用户在同一时刻发送信息，那么在共享媒体上就要产生碰撞（即发生了冲突），使得这些用户的发送都失败。因此，必须有解决碰撞的网络协议。（2）受控接入。其特点是用户不能随机的发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询或称为轮询。\n\n​       **1. 以太网的两个标准**\n\n​        IEEE 802委员会将局域网的数据链路层拆成两个子层，即逻辑链路控制LLC，和媒体接入控制MAC。目前LLC的作用已经消失了。很多厂商生产的适配器上仅装有MAC协议而没有LLC协议\n\n​        **2. 适配器的作用**\n\n​        适配器即网卡，其上面装有处理器和存储器，（包括RAM和ROM）适配器和局域网之间的通信是通过电缆或双绞线以串行传输方式进行的，而适配器和计算机之间的通信是通过主板上的I/O总线以并行传输的方式进行的，因此，适配器的一个重要功能是要进行串行传输和并行传输的转换。由于网络上的数据率和计算机总线上的数据率并不相同，因此适配器中必须装有对数据进行缓存的存储芯片。适配器还要能实现以太网协议，其需要驱动程序支持。\n\n​        适配器在收发各种帧时，不使用计算机CPU。对于有差错的帧，将其直接丢弃。对于正确的帧，适配器使用中断来通知计算机，并交付网络层。计算机的硬件地址，就在适配器的ROM中\n\n<img src=\"D:\\Typora\\picture\\image-20220218142356644.png\" alt=\"image-20220218142356644\" style=\"zoom:67%;\" />\n\n**1.3.2 CSMA/CD（载波监听多点接入/碰撞检测）协议**\n\n* 总线的特点。特点是，当一台计算机发送数据时，总线上的所有计算机都能检测到这个数据。这就是广播通信方式。如果使每台计算机的适配器都有一个与其他适配器不同的地址，在发送数据帧时，在首部写明接收站的地址，这样就可以在具有广播特性的总线上实现一对一通信。\n* 无连接。为通信简便，以太网采用无连接的工作方式，即不必先简历连接就可以直接发送数据。提供的是不可靠交付。对于差错帧是否重传，由高层决定。以太网发送的数据使用曼彻斯特编码的信号。\n* 多点接入。多点接入说明这是总线型网络。\n* 载波监听。载波监听就算检测信道，不管在发送前还是发送中，每个站都必须不停的检测信道。发送前检测，是为了获得发送权，此时若有其他站在发送数据，必须等信道空闲才能发送。发送中检测，是为了及时发现是否有其他站的发送和本站发送的碰撞。\n* 碰撞检测。即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。\n\n​        使用CSMA/CD协议的以太网不可能进行全双工通信，只能进行半双工通信。对于长度小于64字节的帧，需要填充一些字符，使帧长不小于64.因为对于长度小于64字节的帧，都是由于冲突而异常中止的无效帧\n\n**1.3.3 使用集线器的星型拓扑**\n\n​        从表面看，使用集线器的局域网在物理上是一个星型网。但逻辑上仍是一个总线网，各站共享逻辑上的总线，使用的依旧是CSMA/CD协议。\n\n* 集线器的一些特点。1.一个集线器有许多接口，通过RJ-45插头与计算机的适配器相连。2.工作在物理层，它的每个接口仅简单的转发比特，不进行碰撞检测。3.采用专门的芯片，进行自适应串音回波抵消。\n\n**1.3.4 以太网的信道利用率**\n\n​        以太网的利用率达到30%就已经处于重载的情况。很多的网络容量被网上的碰撞消耗掉了。\n\n**1.3.5 以太网的MAC层**\n\n* MAC层的硬件地址。又称MAC地址。一个地址标识一个适配器，这个地址以二进制写在适配器的主板中。\n* MAC帧格式。由5个字段组成，前两个字段分别为6字节长的目的地址和源地址。第三个是2字节的类型字段，用来标志上一层使用的是什么协议，以便把收到的MAC帧的数据上交给上层的这个协议。第四个是数据字段，其长度在46到1500字节之间，最后一个是4字节CRC的检验序列FCS。\n* MAC帧格式的两种标准的区别。IEEE 802.3规定的MAC帧的第三个字段是“长度/类型”。当这个字段值大于0x0600时（十进制为1536），就表示“类型”。这样的帧和以太网V2 MAC帧完全一样。只有当这个字段值小于0x0600时，从表示“长度“，即MAC帧的数据部分长度，若数据字段的长度与长度字段的值不一致，则为无效的MAC帧。实际上由于以太网采用曼切斯特编码，长度字段并无实际意义。当”长度/类型“字段值小于0x0600时，数据字段必须装入上面的LLC子层的LLC帧。\n\n**1.4 扩展的以太网**\n\n​        扩展的以太网在网络层看来任然是一个网络\n\n**1.4.1 在物理层扩展以太网**\n\n\n\n', '计算机网络--数据链路层笔记', b'0', b'1', b'1', b'0', '2022-04-26 11:12:01', '2022-04-26 15:21:54', 11, 5342, 27, 3, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (3, '[转载]SpringMVC中使用Interceptor拦截器', NULL, '<p>SpringMVC 中的Interceptor 拦截器也是相当重要和相当有用的，它的主要作用是拦截用户的请求并进行相应的处理。比如通过它来进行权限验证，或者是来判断用户是否登陆，或者是像12306 那样子判断当前时间是否是购票时间。</p><p><br></p><p>一、定义Interceptor实现类</p><p>SpringMVC 中的Interceptor 拦截请求是通过HandlerInterceptor 来实现的。在SpringMVC 中定义一个Interceptor 非常简单，主要有两种方式，第一种方式是要定义的Interceptor类要实现了Spring 的HandlerInterceptor 接口，或者是这个类继承实现了HandlerInterceptor 接口的类，比如Spring 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter ；第二种方式是实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。</p><p><br></p><p>（一）实现HandlerInterceptor接口</p><p>HandlerInterceptor 接口中定义了三个方法，我们就是通过这三个方法来对用户的请求进行拦截处理的。</p><p><br></p><p>（1 ）preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 方法，顾名思义，该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean 类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。</p><p><br></p><p>（2 ）postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 方法，由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行，这和Struts2里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</p><p><br></p><p>（3 ）afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex) 方法，该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的。</p><p><br></p><p>下面是一个简单的代码说明：</p><p><br></p><p>import javax.servlet.http.HttpServletRequest;</p><p>import javax.servlet.http.HttpServletResponse;</p><p>import org.springframework.web.servlet.HandlerInterceptor;</p><p>import org.springframework.web.servlet.ModelAndView;</p><p>public class SpringMVCInterceptor implements HandlerInterceptor {</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，SpringMVC中的Interceptor拦截器是链式的，可以同时存在&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 多个Interceptor，然后SpringMVC会根据声明的前后顺序一个接一个的执行，而且所有的Interceptor中的preHandle方法都会在&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* Controller方法调用之前调用。SpringMVC的这种Interceptor链式结构也是可以进行中断的，这种中断方式是令preHandle的返&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 回值为false，当preHandle的返回值为false的时候整个请求就结束了。&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public boolean preHandle(HttpServletRequest request,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletResponse response, Object handler) throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return false;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 后，也就是在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 作。这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用，这跟Struts2里面的拦截器的执行过程有点像，&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 只是Struts2里面的intercept方法中要手动的调用ActionInvocation的invoke方法，Struts2中调用ActionInvocation的invoke方法就是调用下一个Interceptor&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 或者是调用action，然后要在Interceptor之前调用的内容都写在调用invoke之前，要在Interceptor之后调用的内容都写在调用invoke方法之后。&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public void postHandle(HttpServletRequest request,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletResponse response, Object handler,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ModelAndView modelAndView) throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行，&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 这个方法的主要作用是用于清理资源的，当然这个方法也只能在当前这个Interceptor的preHandle方法的返回值为true时才会执行。&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public void afterCompletion(HttpServletRequest request,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletResponse response, Object handler, Exception ex)</p><p>&nbsp; &nbsp; throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; }</p><p>}</p><p>（二）实现WebRequestInterceptor 接口</p><p>WebRequestInterceptor 中也定义了三个方法，我们也是通过这三个方法来实现拦截的。这三个方法都传递了同一个参数WebRequest ，那么这个WebRequest 是什么呢？这个WebRequest 是Spring 定义的一个接口，它里面的方法定义都基本跟HttpServletRequest 一样，在WebRequestInterceptor 中对WebRequest 进行的所有操作都将同步到HttpServletRequest 中，然后在当前请求中一直传递。</p><p><br></p><p>（1 ）preHandle(WebRequest request) 方法。该方法将在请求处理之前进行调用，也就是说会在Controller 方法调用之前被调用。这个方法跟HandlerInterceptor 中的preHandle 是不同的，主要区别在于该方法的返回值是void ，也就是没有返回值，所以我们一般主要用它来进行资源的准备工作，比如我们在使用Hibernate 的时候可以在这个方法中准备一个Hibernate 的Session 对象，然后利用WebRequest 的setAttribute(name, value, scope) 把它放到WebRequest 的属性中。这里可以说说这个setAttribute 方法的第三个参数scope ，该参数是一个Integer 类型的。在WebRequest 的父层接口RequestAttributes 中对它定义了三个常量：</p><p><br></p><p>SCOPE_REQUEST ：它的值是0 ，代表只有在request 中可以访问。</p><p><br></p><p>SCOPE_SESSION ：它的值是1 ，如果环境允许的话它代表的是一个局部的隔离的session，否则就代表普通的session，并且在该session范围内可以访问。</p><p><br></p><p>SCOPE_GLOBAL_SESSION ：它的值是2 ，如果环境允许的话，它代表的是一个全局共享的session，否则就代表普通的session，并且在该session 范围内可以访问。</p><p><br></p><p>（2 ）postHandle(WebRequest request, ModelMap model) 方法。该方法将在请求处理之后，也就是在Controller 方法调用之后被调用，但是会在视图返回被渲染之前被调用，所以可以在这个方法里面通过改变数据模型ModelMap 来改变数据的展示。该方法有两个参数，WebRequest 对象是用于传递整个请求数据的，比如在preHandle 中准备的数据都可以通过WebRequest 来传递和访问；ModelMap 就是Controller 处理之后返回的Model 对象，我们可以通过改变它的属性来改变返回的Model 模型。</p><p><br></p><p>（3 ）afterCompletion(WebRequest request, Exception ex) 方法。该方法会在整个请求处理完成，也就是在视图返回并被渲染之后执行。所以在该方法中可以进行资源的释放操作。而WebRequest 参数就可以把我们在preHandle 中准备的资源传递到这里进行释放。Exception 参数表示的是当前请求的异常对象，如果在Controller中抛出的异常已经被Spring 的异常处理器给处理了的话，那么这个异常对象就是是null 。</p><p><br></p><p>&nbsp;</p><p><br></p><p>下面是一个简单的代码说明：</p><p><br></p><p>import org.springframework.ui.ModelMap;</p><p>import org.springframework.web.context.request.WebRequest;</p><p>import org.springframework.web.context.request.WebRequestInterceptor;</p><p>public class AllInterceptor implements WebRequestInterceptor {</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public void preHandle(WebRequest request) throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(\"AllInterceptor...............................\");</p><p>&nbsp; &nbsp; &nbsp; &nbsp; request.setAttribute(\"request\", \"request\", WebRequest.SCOPE_REQUEST);//这个是放到request范围内的，所以只能在当前请求中的request中获取到&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; request.setAttribute(\"session\", \"session\", WebRequest.SCOPE_SESSION);//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; request.setAttribute(\"globalSession\", \"globalSession\", WebRequest.SCOPE_GLOBAL_SESSION);//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问&nbsp;&nbsp;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public void postHandle(WebRequest request, ModelMap map) throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for (String key:map.keySet())</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(key + \"-------------------------\");;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; map.put(\"name3\", \"value3\");</p><p>&nbsp; &nbsp; &nbsp; &nbsp; map.put(\"name1\", \"name1\");</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; /**&nbsp;</p><p>&nbsp; &nbsp; &nbsp;* 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放&nbsp;</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; @Override</p><p>&nbsp; &nbsp; public void afterCompletion(WebRequest request, Exception exception)</p><p>&nbsp; &nbsp; throws Exception {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub&nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(exception + \"-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-=\");</p><p>&nbsp; &nbsp; }</p><p>}</p><p><br></p><p>&nbsp;二、把定义的拦截器类加到SpringMVC的拦截体系中</p><p>1.在SpringMVC的配置文件中加上支持MVC的schema</p><p><br></p><p>xmlns:mvc=\"http://www.springframework.org/schema/mvc\"</p><p>xsi:schemaLocation=\" http://www.springframework.org/schema/mvc</p><p>&nbsp; &nbsp; http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"</p><p>下面是我的声明示例：</p><p><br></p><p><br></p><p><br></p><p>这样在SpringMVC的配置文件中就可以使用mvc标签了，mvc标签中有一个mvc:interceptors是用于声明SpringMVC的拦截器的。</p><p><br></p><p>&nbsp;</p><p><br></p><p>（二）使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</p><p><br></p><p><br></p><p>&nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp;&nbsp;</p><p><br></p><p><br></p><p>由上面的示例可以看出可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。</p><p><br></p><p>在mvc:interceptors标签下声明interceptor主要有两种方式：</p><p><br></p><p>（1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。</p><p><br></p><p>（2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。</p><p><br></p><p>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p><p><br></p><p><br></p><p><br></p>', '', b'1', b'1', b'0', b'0', '2017-10-06 23:54:18', '2018-11-25 20:51:52', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (4, 'springmvc 表单中文乱码解决方案', NULL, '<p>基本上通过在 web.xml 了配置拦截器就可以解决。</p><p>这里需要注意的是，最好把这段代码放在web.xml中开头的位置，因为拦截有顺序，如果放在后面的话容易拦截不到。</p><p>拦截器代码如下</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-xml\"><li class=\"alt\"><span><span class=\"comments\"><!--post乱码过滤器--></span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"comments\"><!-- 配置springMVC编码过滤器 --></span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"tag\">&lt;</span><span class=\"tag-name\">filter</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">filter-name</span><span class=\"tag\">&gt;</span><span>CharacterEncodingFilter</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">filter-name</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">filter-class</span><span class=\"tag\">&gt;</span><span>org.springframework.web.filter.CharacterEncodingFilter</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">filter-class</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!-- 设置过滤器中的属性值 --></span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">init-param</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">param-name</span><span class=\"tag\">&gt;</span><span>encoding</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">param-name</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">param-value</span><span class=\"tag\">&gt;</span><span>UTF-8</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">param-value</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">init-param</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!-- 启动过滤器 --></span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">init-param</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">param-name</span><span class=\"tag\">&gt;</span><span>forceEncoding</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">param-name</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">param-value</span><span class=\"tag\">&gt;</span><span>true</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">param-value</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">init-param</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"\"><span><span class=\"tag\"><!--</span--><span class=\"tag-name\">filter</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span><span class=\"comments\"><!-- 过滤所有请求 --></span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"tag\">&lt;</span><span class=\"tag-name\">filter-mapping</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">filter-name</span><span class=\"tag\">&gt;</span><span>CharacterEncodingFilter</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">filter-name</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span><span>/*</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li><li class=\"alt\"><span><span class=\"tag\"><!--</span--><span class=\"tag-name\">filter-mapping</span><span class=\"tag\">&gt;</span><span>&nbsp;&nbsp;</span></span></span></li></ol></div></div><p><br></p><p>顺便再补充其他的几个可能原因。</p><p></p><p>1、数据库和数据表不是 utf-8 编码</p><p>就在前几天，我遇到的问题正是这个。当时是刚从 windows 搬到 mac。也是在提交 post 表单的时候，中文一直是乱码，后台百度发现，原来是 navicat 的原因。就是在新建 数据库连接(注意是连接)，不能选择 utf-8，应该选择默认的自动。这个地方很坑人。</p><p>数据库和数据表当然是 utf-8，一般这种情况很少出错。</p><p>&nbsp;</p><p>2、修改 Tomcat 的 server.xml 文件，添加 utf-8 编码</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-j\"><li class=\"alt\"><span><span><connector port=< span=\"\"><span class=\"string\">\"8080\"</span><span>&nbsp;protocol=</span><span class=\"string\">\"HTTP/1.1\"</span><span>&nbsp;&nbsp;</span></connector port=<></span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectionTimeout=<span class=\"string\">\"20000\"</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redirectPort=<span class=\"string\">\"8443\"</span><span>&nbsp;URIEncoding=</span><span class=\"string\">\"UTF-8\"</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useBodyEncodingForURI=<span class=\"string\">\"true\"</span><span>&nbsp;/&gt;&nbsp;&nbsp;</span></span></li></ol></div></div><br><p></p><p>3、注意你的 IDE (如Eclipse,IntelliJ IDEA)的 jsp 文件编码，一般在右下角可以看出来，通常我们也要把默认的编码设置为 utf-8。</p><p>&nbsp;</p><p>4、还有一种方法就是 直接对接收到的数据编码转换，我感觉有点麻烦，所以不是很喜欢</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-j\"><li class=\"alt\"><span><span>String&nbsp;name=</span><span class=\"keyword\">new</span><span>&nbsp;String((user.getUname()).getBytes(</span><span class=\"string\">\"ISO-8859-1\"</span><span>),</span><span class=\"string\">\"utf8\"</span><span>);&nbsp;&nbsp;</span></span></li></ol></div></div><p><span>总结：一般来说，第一种拦截器方法是可用的，要注意的是要把拦截器代码放到 web.xml 头部，防止拦截不到，还有表单一定要 post 方式提交。</span></p><p></p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 12:12:42', '2018-11-25 20:52:13', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (5, '[转载]HTTP的幂等性', NULL, '<div id=\"header\"><h2>理解HTTP幂等性</h2></div><div id=\"post_detail\"><div class=\"post\"><div class=\"postText\"><div id=\"cnblogs_post_body\"><p>基于HTTP协议的Web API是时下最为流行的一种分布式服务提供方式。无论是在大型互联网应用还是企业级架构中，我们都见到了越来越多的SOA或RESTful的Web API。为什么Web API如此流行呢？我认为很大程度上应归功于简单有效的HTTP协议。HTTP协议是一种分布式的面向资源的网络应用层协议，无论是服务器端提供Web服务，还是客户端消费Web服务都非常简单。再加上浏览器、<a href=\"https://liuyanzhao.com/tag/java/\" title=\"查看与 Java 相关的文章\" target=\"_blank\">Java</a>script、AJAX、JSON以及HTML5等技术和工具的发展，互联网应用架构设计表现出了从传统的PHP、JSP、ASP.NET等服务器端动态网页向Web API + RIA（富互联网应用）过渡的趋势。Web API专注于提供业务服务，RIA专注于用户界面和交互设计，从此两个领域的分工更加明晰。在这种趋势下，Web API设计将成为服务器端程序员的必修课。然而，正如简单的<a href=\"https://liuyanzhao.com/tag/java/\" title=\"查看与 Java 相关的文章\" target=\"_blank\">Java</a>语言并不意味着高质量的<a href=\"https://liuyanzhao.com/tag/java/\" title=\"查看与 Java 相关的文章\" target=\"_blank\">Java</a>程序，简单的HTTP协议也不意味着高质量的Web API。要想设计出高质量的Web API，还需要深入理解分布式系统及HTTP协议的特性。</p><h2>幂等性定义</h2><p>本文所要探讨的正是HTTP协议涉及到的一种重要性质：幂等性(Idempotence)。在HTTP/1.1规范中幂等性的定义是：</p><blockquote><p>Methods can also have the property of \"idempotence\" in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.</p></blockquote><p>从定义上看，HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性属于语义范畴，正如编译器只能帮助检查语法错误一样，HTTP规范也没有办法通过消息格式等语法手段来定义它，这可能是它不太受到重视的原因之一。但实际上，幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。</p><h2>分布式事务 vs 幂等设计</h2><p>为什么需要幂等性呢？我们先从一个例子说起，假设有一个从账户取钱的远程API（可以是HTTP的，也可以不是），我们暂时用类函数的方式记为：</p><pre><code>bool withdraw(account_id, amount)\r\n</code></pre><p>withdraw的语义是从account_id对应的账户中扣除amount数额的钱；如果扣除成功则返回true，账户余额减少amount；如果扣除失败则返回false，账户余额不变。值得注意的是：和本地环境相比，我们不能轻易假设分布式环境的可靠性。一种典型的情况是withdraw请求已经被服务器端正确处理，但服务器端的返回结果由于网络等原因被掉丢了，导致客户端无法得知处理结果。如果是在网页上，一些不恰当的设计可能会使用户认为上一次操作失败了，然后刷新页面，这就导致了withdraw被调用两次，账户也被多扣了一次钱。如图1所示：</p><p><img src=\"/uploads/2017/10/20171007153621950.png\" alt=\"20171007153621950.png\"><br></p><p>图1</p><p>这个问题的解决方案一是采用分布式事务，通过引入支持分布式事务的中间件来保证withdraw功能的事务性。分布式事务的优点是对于调用者很简单，复杂性都交给了中间件来管理。缺点则是一方面架构太重量级，容易被绑在特定的中间件上，不利于异构系统的集成；另一方面分布式事务虽然能保证事务的ACID性质，而但却无法提供性能和可用性的保证。</p><p>另一种更轻量级的解决方案是幂等设计。我们可以通过一些技巧把withdraw变成幂等的，比如：</p><pre><code>int create_ticket() \r\nbool idempotent_withdraw(ticket_id, account_id, amount)\r\n</code></pre><p>create_ticket的语义是获取一个服务器端生成的唯一的处理号ticket_id，它将用于标识后续的操作。idempotent_withdraw和withdraw的区别在于关联了一个ticket_id，一个ticket_id表示的操作至多只会被处理一次，每次调用都将返回第一次调用时的处理结果。这样，idempotent_withdraw就符合幂等性了，客户端就可以放心地多次调用。</p><p>基于幂等性的解决方案中一个完整的取钱流程被分解成了两个步骤：1.调用create_ticket()获取ticket_id；2.调用idempotent_withdraw(ticket_id, account_id, amount)。虽然create_ticket不是幂等的，但在这种设计下，它对系统状态的影响可以忽略，加上idempotent_withdraw是幂等的，所以任何一步由于网络等原因失败或超时，客户端都可以重试，直到获得结果。如图2所示：</p><p><img src=\"/uploads/2017/10/20171007153648208.png\" alt=\"20171007153648208.png\"><br></p><div id=\"cnblogs_post_body\"><p>图2</p><p>和分布式事务相比，幂等设计的优势在于它的轻量级，容易适应异构环境，以及性能和可用性方面。在某些性能要求比较高的应用，幂等设计往往是唯一的选择。</p><h2>HTTP的幂等性</h2><p>HTTP协议本身是一种面向资源的应用层协议，但对HTTP协议的使用实际上存在着两种不同的方式：一种是RESTful的，它把HTTP当成应用层协议，比较忠实地遵守了HTTP协议的各种规定；另一种是SOA的，它并没有完全把HTTP当成应用层协议，而是把HTTP协议作为了传输层协议，然后在HTTP之上建立了自己的应用层协议。本文所讨论的HTTP幂等性主要针对RESTful风格的，不过正如上一节所看到的那样，幂等性并不属于特定的协议，它是分布式系统的一种特性；所以，不论是SOA还是RESTful的Web API设计都应该考虑幂等性。下面将介绍HTTP GET、DELETE、PUT、POST四种主要方法的语义和幂等性。</p><p>HTTP GET方法用于获取资源，不应有副作用，所以是幂等的。比如：GET http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><p>HTTP DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><p>比较容易混淆的是HTTP POST和PUT。POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在HTTP规范中对POST和PUT是这样定义的：</p><blockquote><p>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line ...... If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.</p><p>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.</p></blockquote><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</p><p>在介绍了几种操作的语义和幂等性之后，我们来看看如何通过Web API的形式实现前面所提到的取款功能。很简单，用POST /tickets来实现create_ticket；用PUT /accounts/account_id/ticket_id&amp;amount=xxx来实现idempotent_withdraw。值得注意的是严格来讲amount参数不应该作为URI的一部分，真正的URI应该是/accounts/account_id/ticket_id，而amount应该放在请求的body中。这种模式可以应用于很多场合，比如：论坛网站中防止意外的重复发帖。</p><h2>总结</h2><p>上面简单介绍了幂等性的概念，用幂等设计取代分布式事务的方法，以及HTTP主要方法的语义和幂等性特征。其实，如果要追根溯源，幂等性是数学中的一个概念，表达的是N次变换与1次变换的结果相同，有兴趣的读者可以从Wikipedia上进一步了解。</p><h2>参考</h2><p><a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">RFC 2616, Hypertext Transfer Protocol -- HTTP/1.1, Method Definitions</a></p><p><a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://devhawk.net/2007/11/09/the-importance-of-idempotence/\">The Importance of Idempotence</a></p><p><a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://stackoverflow.com/questions/630453/put-vs-post-in-rest\">Stackoverflow - PUT vs POST in REST</a></p></div><p>&nbsp;</p><p>&nbsp;</p><p>原文地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html</a></p></div></div></div></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:37:20', '2018-11-25 20:51:05', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (6, '使用rapid-framework继承jsp页面', NULL, '<p>对于多张网页页面，许多部分都是相同的，应该继承同一个页面，该页面是所有页面的父页面。<br></p><p>后来搜了一下找到一个<code>rapid-framework</code>的东西，由于我使用的是<code>maven</code>，所以引入很简单。</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-xml\"><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">dependency</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">groupId</span><span class=\"tag\">&gt;</span>com.googlecode.rapid-framework<span class=\"tag\"><!--</span--><span class=\"tag-name\">groupId</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\">&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">artifactId</span><span class=\"tag\">&gt;</span>rapid-core<span class=\"tag\"><!--</span--><span class=\"tag-name\">artifactId</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li><li class=\"\">&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">version</span><span class=\"tag\">&gt;</span>4.0.5<span class=\"tag\"><!--</span--><span class=\"tag-name\">version</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">dependency</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li></ol></div></div><p>父页面</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-xml\"><li class=\"alt\">...&nbsp;&nbsp;</li><li class=\"\"><span class=\"tag\">&lt;</span>%@&nbsp;taglib&nbsp;<span class=\"attribute\">prefix</span>=<span class=\"attribute-value\">\"rapid\"</span>&nbsp;<span class=\"attribute\">uri</span>=<span class=\"attribute-value\">\"http://www.rapid-framework.org.cn/rapid\"</span>&nbsp;%<span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\">...&nbsp;&nbsp;</li><li class=\"\">&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">body</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!-- 正文 --></span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">rapid:block</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"content\"</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">rapid:block</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">body</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li></ol></div></div><p></p><p></p><ul></ul><p>&nbsp;<code><rapid:block name=\"content\"></rapid:block></code>定义叫做<code>content</code>的一块，该部分可以让子页面重写。</p><p></p><p>子页面</p><p></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-xml\"><li class=\"alt\"><span class=\"tag\">&lt;</span>%@&nbsp;page&nbsp;<span class=\"attribute\">contentType</span>=<span class=\"attribute-value\">\"text/html;charset=UTF-8\"</span>&nbsp;<span class=\"attribute\">language</span>=<span class=\"attribute-value\">\"java\"</span>&nbsp;%<span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"\"><span class=\"tag\">&lt;</span>%@&nbsp;taglib&nbsp;<span class=\"attribute\">prefix</span>=<span class=\"attribute-value\">\"rapid\"</span>&nbsp;<span class=\"attribute\">uri</span>=<span class=\"attribute-value\">\"http://www.rapid-framework.org.cn/rapid\"</span>&nbsp;%<span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">rapid:override</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"content\"</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;这是内容&nbsp;&nbsp;</li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">rapid:override</span><span class=\"tag\">&gt;</span>&nbsp;&nbsp;</span></li><li class=\"\"><span class=\"tag\">&lt;</span>%@&nbsp;include&nbsp;<span class=\"attribute\">file</span>=<span class=\"attribute-value\">\"base.jsp\"</span>%<span class=\"tag\">&gt;</span>&nbsp;&nbsp;</li></ol></div></div><p></p><p></p><li>&nbsp;&lt;%@ include file=\"base.jsp\"%&gt;引入父页面</li><p></p><li>重写父页面中叫做content的部分。</li><p></p><li>访问子页面，父页面内部的元素不会显示，代替的是子页面重写的内容。</li>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:30:17', '2018-11-25 20:54:02', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (7, 'JDBC常用API和使用', NULL, '<h2>一、JDBC 常用 API</h2><p><strong>1、Connection 接口</strong></p><table width=\"695\" class=\"layui-table\"><tbody><tr><td>方法名称</td><td>功能描述</td></tr><tr><td>getMetaData()</td><td>该方法用于返回数据库的元数据的 DatabaseMetaData 对象</td></tr><tr><td>createStatement</td><td>用于创建一个 Statement 对象来将 SQL 语句发送到数据库</td></tr><tr><td>preparedStatement(String sql)</td><td>用于创建一个 PreparedStatement 对象来将参数化的SQL语句发送到数据库</td></tr><tr><td>prepareCall(String sql)</td><td>用于创建一个 CallableStatement 对象来调用数据库存储过程</td></tr></tbody></table><p><strong>2、Statement 接口</strong></p><table width=\"696\" class=\"layui-table\"><tbody><tr><td>方法名称</td><td>功能描述</td></tr><tr><td>boolean execute(String sql)</td><td>用于执行各种 SQL 语句,该方法返回一个 boolean 类型的值。如果为 true,表示所执行的 SQL 语句具备查询结果，可通过 Statement 的getResultSet() 方法查询结果</td></tr><tr><td>int executeUpdate(String sql)</td><td>用于执行 SQL 中的 insert、update 和 delete 语句，该方法返回一个 int 类型的值，表示影响数据库中的行数</td></tr><tr><td>ResultSet executeQuery(String sql)</td><td>用于执行 SQL 中的 select 语句（查询，遍历），该方法返回一个表示查询结果的 ResultSet 对象</td></tr></tbody></table><p><strong>&nbsp;<span>execute是executeQuery和executeUpdate的综合.</span></strong></p><p><strong><span>通常我们没有必要使用execute方法来执行SQL语句，而是使用 executeQuery 或 executeUpdate 更适合。</span></strong></p><p>具体可参考：<a href=\"https://liuyanzhao.com/5278.html\" target=\"_blank\" rel=\"noopener noreferrer\">execute、executeUpdate、executeQuery三者的区别</a></p><p><strong>3、PreparedStatement 接口</strong></p><table width=\"695\" class=\"layui-table\"><tbody><tr><td>方法名称</td><td>功能描述</td></tr><tr><td>executeUpdate()</td><td>在此 PreparedStatement 对象中执行 SQL 语句，该语句必须是一个 DML 语句，或者无返回内容的 SQL 语句，比如 DDL 语句</td></tr><tr><td>executeQuery()</td><td>在此 PreparedStatement 对象中执行 SQL 语句，该方法返回的是 ResultSet 对象</td></tr><tr><td>setInt(int parameterIndex, int x)</td><td>将指定的参数设置为 int 值</td></tr><tr><td>setFloat(int parameterIndex, float x)</td><td>将指定的参数设置为 Float 值</td></tr><tr><td>setString(int parameterIndex, String x)</td><td>将指定参数设置的给定的 Date 值</td></tr><tr><td>setDate(int parameterIndex, Date x)</td><td>将指定参数设置给定的 Date 值</td></tr><tr><td>addBatch()</td><td>将一组参数添加到此 PreparedStatement 对象的批处理命令中</td></tr><tr><td>setCharacterStream(parameterIndex, reader, length)</td><td>将指定的输入流写入数据库的文本字段</td></tr><tr><td>setBinaryStream(parameterIndex, x, length)</td><td>将二进制的输入流数据写入到二进制的字段中</td></tr></tbody></table><p>DML 语句：SELECT、UPDATE、INSERT、DELETE</p><p>DLL 语句：CREATE DROP ALERT</p><p>具体参考:&nbsp;<a href=\"https://liuyanzhao.com/5283.html\" target=\"_blank\" rel=\"noopener noreferrer\">sql语句分为三类(DML,DDL,DCL)-介绍</a></p><p>4、ResultSet 接口</p><table class=\"layui-table\"><tbody><tr><td>getString(int columnIndex)</td><td>用于获取 指定字段的 String 类型的值，参数 columnIndex 代表字段的索引</td></tr><tr><td>getString(String columnName)</td><td>&nbsp;用于获取指定字段的 String 类型的值，参数 columnIndex 代表字段名称</td></tr><tr><td>getInt(int columnIndex)</td><td>&nbsp;用于获取指定字段的 int 类型的值，参数 columnIndex 代表字段的索引</td></tr><tr><td>getInt(String columnName)</td><td>&nbsp;用于获取指定字段的 int 类型的值，参数 columnIndex 代表字段名称</td></tr><tr><td>getDate(int columnIndex)</td><td>&nbsp;用于获取指定字段的 Date类型的值，参数 columnIndex 代表字段索引</td></tr><tr><td>getDate(String columnName)</td><td>&nbsp;用于获取指定字段的 Date类型的值，参数 columnIndex 代表字段名称</td></tr><tr><td>next()</td><td>&nbsp;将游标从当前位置移到下一位置</td></tr><tr><td>absolute(int row)</td><td>将游标移到此 ResultSet 对象的指定行</td></tr><tr><td>afterLast()</td><td>将游标移动到此 ResultSet 对象的末尾，即最后一行之后</td></tr><tr><td>beforeFirst()</td><td>将游标移动到此 ResultSet 对象开头，即第一行之前</td></tr><tr><td>previous()</td><td>将游标移动到此 ResultSet 对象的上一行</td></tr><tr><td>last()</td><td>将游标移动到此 &nbsp;Result 对象的最后一行</td></tr></tbody></table><h2>二、案例</h2><p><strong>1、往数据库里添加数据</strong></p><p>① 数据表结构如下</p><p><img src=\"/uploads/2017/10/2017100715402014.png\" alt=\"2017100715402014.png\"><br></p><p><span>② 代码如下</span></p><p><span></span></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-j\"><li class=\"alt\"><span><span class=\"keyword\">package</span><span>&nbsp;com.liuyanzhao;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.Connection;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.Date;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.DriverManager;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.PreparedStatement;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.SQLException;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.text.ParseException;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.text.SimpleDateFormat;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"comment\">/*</span>&nbsp;</span></li><li class=\"\"><span><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span>&nbsp;</span></li><li class=\"alt\"><span><span class=\"comment\">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">class</span><span>&nbsp;Demo1&nbsp;{&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;URL&nbsp;=&nbsp;</span><span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/jdbc_study?useUnicode=true&amp;characterEncoding=utf8\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;USER&nbsp;=&nbsp;</span><span class=\"string\">\"root\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;PASSWORD&nbsp;=&nbsp;</span><span class=\"string\">\"\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;Connection&nbsp;conn&nbsp;=&nbsp;</span><span class=\"keyword\">null</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;</span><span class=\"keyword\">throws</span><span>&nbsp;ClassNotFoundException,&nbsp;SQLException,&nbsp;ParseException&nbsp;{&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//1、加载驱动，需要提前把&nbsp;jar&nbsp;包添加到&nbsp;classpath&nbsp;中</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//2、创建应用程序与数据库连接的&nbsp;Connection&nbsp;对象</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn&nbsp;=&nbsp;DriverManager.getConnection(URL,&nbsp;USER,&nbsp;PASSWORD);&nbsp;&nbsp;</span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//3、要执行的&nbsp;sql&nbsp;语句：name,password,email,status通过占位符填数,create_date&nbsp;自动为当前时间</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sql&nbsp;=&nbsp;<span class=\"string\">\"&nbsp;INSERT&nbsp;INTO&nbsp;users\"</span><span>+&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"string\">\"(name,password,birthday,email,create_date,status)&nbsp;\"</span><span>+&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"string\">\"VALUES(\"</span><span>+&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"string\">\"?,?,?,?,current_date(),?)\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//4、创建执行&nbsp;SQL&nbsp;语句的&nbsp;PreparedStatement&nbsp;对象</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreparedStatement&nbsp;ptmt&nbsp;=&nbsp;conn.prepareStatement(sql);&nbsp;&nbsp;</span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptmt.setString(<span class=\"number\">1</span><span>,&nbsp;</span><span class=\"string\">\"小美\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptmt.setString(<span class=\"number\">2</span><span>,&nbsp;</span><span class=\"string\">\"123456\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptmt.setDate(<span class=\"number\">3</span><span>,</span><span class=\"keyword\">new</span><span>&nbsp;Date((</span><span class=\"keyword\">new</span><span>&nbsp;SimpleDateFormat(</span><span class=\"string\">\"yyyy-MM-dd\"</span><span>).parse(</span><span class=\"string\">\"2011-10-1\"</span><span>)).getTime())&nbsp;);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptmt.setString(<span class=\"number\">4</span><span>,&nbsp;</span><span class=\"string\">\"xiaomei@126.com\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptmt.setInt(<span class=\"number\">5</span><span>,&nbsp;</span><span class=\"number\">1</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//5、真正执行&nbsp;sql&nbsp;语句，并返回影响的行数</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span><span>&nbsp;x&nbsp;=&nbsp;ptmt.executeUpdate();&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"影响行数：\"</span><span>&nbsp;+&nbsp;x);&nbsp;</span><span class=\"comment\">//返回1</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"\"><span>}&nbsp;&nbsp;</span></li></ol></div></div><br><p></p><p>③运行结果</p><p>上面的操作，将在 jdbc_study 数据库的 users 表中添加一条记录，终端显示 1</p><p><strong>2、查询（打印）数据库信息</strong></p><p>①数据表如下</p><p><img src=\"/uploads/2017/10/20171007154127663.png\" alt=\"20171007154127663.png\"><br></p><p><span>②代码如下</span></p><p><span></span></p><div><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol start=\"1\" class=\"dp-j\"><li class=\"alt\"><span><span class=\"keyword\">package</span><span>&nbsp;com.liuyanzhao;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.Connection;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.Date;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.DriverManager;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.PreparedStatement;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.ResultSet;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.sql.SQLException;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;java.text.ParseException;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;java.text.SimpleDateFormat;&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"comment\">/*</span>&nbsp;</span></li><li class=\"alt\"><span><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span>&nbsp;</span></li><li class=\"\"><span><span class=\"comment\">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">class</span><span>&nbsp;Demo2&nbsp;{&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;URL&nbsp;=&nbsp;</span><span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/jdbc_study?useUnicode=true&amp;characterEncoding=utf8\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;USER&nbsp;=&nbsp;</span><span class=\"string\">\"root\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">final</span><span>&nbsp;String&nbsp;PASSWORD&nbsp;=&nbsp;</span><span class=\"string\">\"\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;Connection&nbsp;conn&nbsp;=&nbsp;</span><span class=\"keyword\">null</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span><span>&nbsp;</span><span class=\"keyword\">static</span><span>&nbsp;</span><span class=\"keyword\">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;</span><span class=\"keyword\">throws</span><span>&nbsp;ClassNotFoundException,&nbsp;SQLException,&nbsp;ParseException&nbsp;{&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//1、加载驱动，需要提前把&nbsp;jar&nbsp;包添加到&nbsp;classpath&nbsp;中</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//2、创建应用程序与数据库连接的&nbsp;Connection&nbsp;对象</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn&nbsp;=&nbsp;DriverManager.getConnection(URL,&nbsp;USER,&nbsp;PASSWORD);&nbsp;&nbsp;</span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//3、要执行的&nbsp;sql&nbsp;语句：name,password,email,satic&nbsp;通过占位符填数,create_date&nbsp;自动为当前时间</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sql&nbsp;=&nbsp;<span class=\"string\">\"&nbsp;SELECT&nbsp;*&nbsp;FROM&nbsp;users\"</span><span>;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//4、创建执行&nbsp;SQL&nbsp;语句的&nbsp;PreparedStatement&nbsp;对象</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreparedStatement&nbsp;ptmt&nbsp;=&nbsp;conn.prepareStatement(sql);&nbsp;&nbsp;</span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//5、真正执行&nbsp;sql&nbsp;语句，并返回影响的&nbsp;ResultSet</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet&nbsp;rs&nbsp;=&nbsp;ptmt.executeQuery();&nbsp;&nbsp;</span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//6、打印&nbsp;ResultSet&nbsp;数据集</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">while</span><span>(rs.next())&nbsp;{&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getInt(<span class=\"string\">\"id\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getString(<span class=\"string\">\"name\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getString(<span class=\"string\">\"password\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getDate(<span class=\"string\">\"birthday\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getString(<span class=\"string\">\"email\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getDate(<span class=\"string\">\"create_date\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(rs.getInt(<span class=\"string\">\"status\"</span><span>)+</span><span class=\"string\">\"&nbsp;\"</span><span>);&nbsp;&nbsp;</span></span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();&nbsp;&nbsp;</span></li><li class=\"alt\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=\"alt\"><span>}&nbsp;&nbsp;</span></li></ol></div></div><p>③ 运行结果</p><p></p><p>控制台上可以看到如下界面</p><p><img src=\"/uploads/2017/10/20171007154222212.jpg\" alt=\"20171007154222212.jpg\"><br></p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:42:43', '2018-11-25 20:51:27', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (8, 'Hibernate 简单的CURD操作', NULL, '<h2>一、单表操作 CURD 实例</h2><ul><li>save</li><li>update</li><li>delete</li><li>get/load (查询单个记录)</li></ul><p>&nbsp;</p><h2>二、代码实现</h2><p><strong>StudentTest.java</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testSaveStudnets()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//生成学生对象</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Student();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setName(<span class=\"string\">\"陶渊明\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;s.setSex(<span class=\"number\">1</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setBirthday(<span class=\"keyword\">new</span>&nbsp;Date());</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;Address&nbsp;address&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Address(<span class=\"string\">\"332000\"</span>,<span class=\"string\">\"13512345678\"</span>,<span class=\"string\">\"江西九江\"</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setAddress(address);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;session.save(s);<span class=\"comment\">//保存对象进入数据库</span></li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testGetStudents()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;(Student)&nbsp;session.get(Student.<span class=\"keyword\">class</span>,&nbsp;<span class=\"number\">1</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);</li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testLoadStudents()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;(Student)&nbsp;session.load(Student.<span class=\"keyword\">class</span>,&nbsp;<span class=\"number\">1</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);</li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testUpdateStudents()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;(Student)&nbsp;session.get(Student.<span class=\"keyword\">class</span>,&nbsp;<span class=\"number\">1</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;s.setName(<span class=\"string\">\"五柳先生\"</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;session.update(s);</li><li class=\"\">}</li><li class=\"alt\"></li><li class=\"\"><span class=\"annotation\">@Test</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testDeleteStudents()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;(Student)&nbsp;session.get(Student.<span class=\"keyword\">class</span>,&nbsp;<span class=\"number\">1</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;session.delete(s);</li><li class=\"\">}</li></ol></div><p>&nbsp;</p><h2>三、get 和 load 的区别</h2><p><strong>区别一、</strong></p><ul><li>不考虑缓存的情况下，get 方法会在调用之后，立即向数据库发送 sql 语句，返回持久化对象。</li><li>load 方法会在调用后返回一个持久化对象。该代理对象只保留了实体对象的 id，直到使用实体对象的非主键属性时才发出 sql 语句。</li></ul><p><strong>区别二、</strong></p><ul><li>查询数据库中不存在的数据时，get 方法返回 null 。</li><li>load 方法返回异常 org.hibernate.ObjectNotFoundException</li></ul><p>p</p><div><br></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:49:54', '2018-11-25 20:52:33', 5, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (9, 'Hibernate 基本类型', NULL, '<p>这里介绍几个特殊的&nbsp;<a href=\"https://liuyanzhao.com/tag/hibernate/\" title=\"查看与 Hibernate 相关的文章\" target=\"_blank\">Hibernate</a>&nbsp;类型和属性</p><h2>一、日期类型</h2><p>我们的 Student 类有一个成员变量 birthday</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;Date&nbsp;birthday;<span class=\"comment\">//出生日期</span></li></ol></div><p>在我们的 Studnet.hbm.xml 对应的是自动生成的 属性</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">property</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"birthday\"</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"java.util.Date\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">column</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"BIRTHDAY\"</span>&nbsp;<span class=\"tag\">/&gt;</span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">property</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>type 表示该字段的类型，不同的类型，会让数据表的字段类型也不同</p><table class=\"layui-table\"><tbody><tr><td>type（映射类型）</td><td>描述</td></tr><tr><td>java.util.Date</td><td>年月日时分秒（2017-07-25 18:20:12）</td></tr><tr><td>date</td><td>年月日（2017-07-25）</td></tr><tr><td>time</td><td>时分秒（18:20:12）</td></tr><tr><td>timestamp</td><td>年月日时分秒（2017-07-25 18:20:12）</td></tr></tbody></table><h2>二、对象类型</h2><p>我们这里使用使用 Blob 类型存照片</p><p>1、Student 类中 成员变量如下</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;sid;<span class=\"comment\">//学号</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;name;<span class=\"comment\">//姓名</span></li><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;sex;<span class=\"comment\">//性别</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;Date&nbsp;birthday;<span class=\"comment\">//出生日期</span></li><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;address;<span class=\"comment\">//地址</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;Blob&nbsp;picture;<span class=\"comment\">//照片&nbsp;&nbsp;&nbsp;</span></li></ol></div><p>2、然后删除原来的 Student.hbm.xml &nbsp;文件，重新生成</p><p>3、在测试类添加&nbsp;testWriteBlob方法</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testWriteBlob()&nbsp;<span class=\"keyword\">throws</span>&nbsp;Exception&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Student(<span class=\"number\">1</span>,<span class=\"string\">\"杜甫\"</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span>&nbsp;Date(),<span class=\"string\">\"四川\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//先获得照片文件</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;f&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;File(<span class=\"string\">\"d:\"</span>+File.separator+<span class=\"string\">\"boy.jpg\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//获得照片文件的输入流</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;input&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;FileInputStream(f);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//创建Blob对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Blob&nbsp;image&nbsp;=&nbsp;<a href=\"https://liuyanzhao.com/tag/hibernate/\" title=\"查看与 Hibernate 相关的文章\" target=\"_blank\">Hibernate</a>.getLobCreator(session).createBlob(input,input.available());</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//设置照片属性</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setPicture(image);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;session.save(s);</li><li class=\"alt\">}</li></ol></div><p>注意：这里 Blob 是&nbsp;java.sql.Blob 包下</p><p>4、然后使用 Junit Test 运行&nbsp;testWriteBlob 方法</p><p><img src=\"/uploads/2017/10/2017100715505630.png\" alt=\"2017100715505630.png\"><br></p><p>5、为了证明是否真的是写入数据库中，我们重新把照片读出来</p><p>在测试类中添加 testReadBlob 方法</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testReadBlob()&nbsp;<span class=\"keyword\">throws</span>&nbsp;Exception&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;(Student)session.get(Student.<span class=\"keyword\">class</span>,&nbsp;<span class=\"number\">1</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//获得Blob对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Blob&nbsp;image&nbsp;=&nbsp;s.getPicture();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//获得照片的输入流</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;input&nbsp;=&nbsp;image.getBinaryStream();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//创建输出流</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;f&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;File(<span class=\"string\">\"d:\"</span>+File.separator+<span class=\"string\">\"dest.jpg\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//获得输出流</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;OutputStream&nbsp;output&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;FileOutputStream(f);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//创建缓冲区</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">byte</span>[]&nbsp;buff&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;<span class=\"keyword\">byte</span>[input.available()];</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;input.read(buff);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;output.write(buff);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;input.close();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;output.close();</li><li class=\"\">}</li></ol></div><p>6、使用 Junit Test 运行 testReadBlob 方法</p><p>我们可以看到 D 盘，已经生成了一张新照片，dest.jpg</p><p>&nbsp;</p><p><img src=\"/uploads/2017/10/20171007155038568.png\" alt=\"20171007155038568.png\"><br></p><h2>三、组件属性</h2><p>实体类中某个属性属于用户自定义的类的对象，下面我们通过一个例子来解释</p><p>1、实体类 Student.java 成员变量如下</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;sid;<span class=\"comment\">//学号</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;name;<span class=\"comment\">//姓名</span></li><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;sex;<span class=\"comment\">//性别</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;Date&nbsp;birthday;<span class=\"comment\">//出生日期</span></li><li class=\"alt\"><span class=\"comment\">//private&nbsp;String&nbsp;address;//地址</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;Blob&nbsp;picture;<span class=\"comment\">//照片&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;Address&nbsp;address;&nbsp;<span class=\"comment\">//地址</span></li></ol></div><p>我们这里把之前的 String 类型的 address 改成 Address 类型</p><p>2、Address 类 部分代码如下</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;postcode;<span class=\"comment\">//邮编</span></li><li class=\"\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;phone;<span class=\"comment\">//手机</span></li><li class=\"alt\"><span class=\"keyword\">private</span>&nbsp;String&nbsp;address;<span class=\"comment\">//地址</span></li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;Address(String&nbsp;postcode,&nbsp;String&nbsp;phone,&nbsp;String&nbsp;address)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.postcode&nbsp;=&nbsp;postcode;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.phone&nbsp;=&nbsp;phone;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.address&nbsp;=&nbsp;address;</li><li class=\"alt\">}</li></ol></div><p>3、修改 Student.hbm.xml</p><p>将之前的</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">property</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"address\"</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"java.lang.String\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">column</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"ADDRESS\"</span>&nbsp;<span class=\"tag\">/&gt;</span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">property</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>改成</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">component</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"address\"</span>&nbsp;<span class=\"attribute\">class</span>=<span class=\"attribute-value\">\"Address\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">property</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"postcode\"</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"POSTCODE\"</span><span class=\"tag\">/&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">property</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"phone\"</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"PHONE\"</span><span class=\"tag\">/&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">property</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"address\"</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"ADDRESS\"</span><span class=\"tag\">/&gt;</span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">component</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>注意：单词不要打错</p><p>4、修改 测试类 testSaveStudent 代码</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"annotation\">@Test</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testSaveStudnets()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//生成学生对象</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;s&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Student();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setName(<span class=\"string\">\"陶渊明\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;s.setSex(<span class=\"number\">1</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;s.setBirthday(<span class=\"keyword\">new</span>&nbsp;Date());</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//s.setAddress(\"江西九江\");</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Address&nbsp;address&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Address(<span class=\"string\">\"332000\"</span>,<span class=\"string\">\"13512345678\"</span>,<span class=\"string\">\"江西九江\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;s.setAddress(address);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;session.save(s);<span class=\"comment\">//保存对象进入数据库</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;}</li></ol></div><p>5、修改 hibernate.cfg.xml 里的创建表的策略</p><p>因为要修改表结构，暂且把 update 改成 create</p><p>6、用 Junit Test 运行 testSaveStudent 方法</p><p>运行成功，查看数据表</p><p><img src=\"/uploads/2017/10/2017100715512437.jpg\" alt=\"2017100715512437.jpg\"><br></p><p>查看 表结构</p><p><img src=\"/uploads/2017/10/20171007155135604.jpg\" alt=\"20171007155135604.jpg\"><br></p><p>&nbsp;</p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:51:57', '2018-11-25 20:55:13', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (10, 'Mybatis高级映射多对多查询', NULL, '<p>紧接着上一篇文章：<a href=\"https://liuyanzhao.com/5847.html\" target=\"_blank\" rel=\"noopener noreferrer\">Mybatis高级映射一对多查询</a>&nbsp;写</p><h2>一、开发准备</h2><p><strong>1、新建数据表（四张表）和添加测试数据</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-sql\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">DROP</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;IF&nbsp;EXISTS&nbsp;`items`;</li><li class=\"\"><span class=\"keyword\">DROP</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;IF&nbsp;EXISTS&nbsp;`orders`;</li><li class=\"alt\"><span class=\"keyword\">DROP</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;IF&nbsp;EXISTS&nbsp;`<span class=\"func\">user</span>`;</li><li class=\"\"><span class=\"keyword\">DROP</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;IF&nbsp;EXISTS&nbsp;`orderdetail`;</li><li class=\"alt\"></li><li class=\"\">/*items是商品表*/</li><li class=\"alt\"><span class=\"keyword\">CREATE</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;`items`&nbsp;(</li><li class=\"\">&nbsp;&nbsp;`id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;AUTO_INCREMENT,</li><li class=\"alt\">&nbsp;&nbsp;`<span class=\"keyword\">name</span>`&nbsp;<span class=\"keyword\">VARCHAR</span>(32)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'商品名称\',</li><li class=\"\">&nbsp;&nbsp;`price`&nbsp;<span class=\"keyword\">FLOAT</span>(10,1)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'商品定价\',</li><li class=\"alt\">&nbsp;&nbsp;`detail`&nbsp;TEXT&nbsp;COMMENT&nbsp;\'商品描述\',</li><li class=\"\">&nbsp;&nbsp;`pic`&nbsp;<span class=\"keyword\">VARCHAR</span>(64)&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'商品图片\',</li><li class=\"alt\">&nbsp;&nbsp;`createtime`&nbsp;DATETIME&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'生产日期\',</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">PRIMARY</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`id`)</li><li class=\"alt\">)&nbsp;ENGINE=INNODB&nbsp;AUTO_INCREMENT=4&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;CHARSET=utf8;</li><li class=\"\"></li><li class=\"alt\">/*<span class=\"func\">user</span>是用户表*/</li><li class=\"\"><span class=\"keyword\">CREATE</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;`<span class=\"func\">user</span>`&nbsp;(</li><li class=\"alt\">&nbsp;&nbsp;`id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;AUTO_INCREMENT,</li><li class=\"\">&nbsp;&nbsp;`username`&nbsp;<span class=\"keyword\">VARCHAR</span>(32)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'用户名称\',</li><li class=\"alt\">&nbsp;&nbsp;`birthday`&nbsp;<span class=\"keyword\">DATE</span>&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'生日\',</li><li class=\"\">&nbsp;&nbsp;`gender`&nbsp;<span class=\"keyword\">CHAR</span>(1)&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'性别\',</li><li class=\"alt\">&nbsp;&nbsp;`address`&nbsp;<span class=\"keyword\">VARCHAR</span>(256)&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'地址\',</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">PRIMARY</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`id`)</li><li class=\"alt\">)&nbsp;ENGINE=INNODB&nbsp;AUTO_INCREMENT=27&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;CHARSET=utf8;</li><li class=\"\"></li><li class=\"alt\">/*orders是订单表*/</li><li class=\"\"><span class=\"keyword\">CREATE</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;`orders`&nbsp;(</li><li class=\"alt\">&nbsp;&nbsp;`id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;AUTO_INCREMENT,</li><li class=\"\">&nbsp;&nbsp;`user_id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'下单用户id\',</li><li class=\"alt\">&nbsp;&nbsp;`number`&nbsp;<span class=\"keyword\">VARCHAR</span>(32)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'订单号\',</li><li class=\"\">&nbsp;&nbsp;`createtime`&nbsp;DATETIME&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'创建订单时间\',</li><li class=\"alt\">&nbsp;&nbsp;`note`&nbsp;<span class=\"keyword\">VARCHAR</span>(100)&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'备注\',</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">PRIMARY</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`id`),</li><li class=\"alt\">&nbsp;&nbsp;<span class=\"keyword\">KEY</span>&nbsp;`FK_orders_1`&nbsp;(`user_id`),</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">CONSTRAINT</span>&nbsp;`FK_orders_id`&nbsp;<span class=\"keyword\">FOREIGN</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`user_id`)&nbsp;<span class=\"keyword\">REFERENCES</span>&nbsp;`<span class=\"func\">user</span>`&nbsp;(`id`)&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">DELETE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span>&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">UPDATE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span></li><li class=\"alt\">)&nbsp;ENGINE=INNODB&nbsp;AUTO_INCREMENT=6&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;CHARSET=utf8;</li><li class=\"\"></li><li class=\"alt\">/*orderdetail是订单明细表*/</li><li class=\"\"><span class=\"keyword\">DROP</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;IF&nbsp;EXISTS&nbsp;orderdetail;</li><li class=\"alt\"><span class=\"keyword\">CREATE</span>&nbsp;<span class=\"keyword\">TABLE</span>&nbsp;`orderdetail`&nbsp;(</li><li class=\"\">&nbsp;&nbsp;`id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;AUTO_INCREMENT,</li><li class=\"alt\">&nbsp;&nbsp;`orders_id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'订单id\',</li><li class=\"\">&nbsp;&nbsp;`items_id`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"op\">NOT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'商品id\',</li><li class=\"alt\">&nbsp;&nbsp;`items_num`&nbsp;<span class=\"keyword\">INT</span>(11)&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;<span class=\"op\">NULL</span>&nbsp;COMMENT&nbsp;\'商品购买数量\',</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">PRIMARY</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`id`),</li><li class=\"alt\">&nbsp;&nbsp;<span class=\"keyword\">KEY</span>&nbsp;`FK_orderdetail_1`&nbsp;(`orders_id`),</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">KEY</span>&nbsp;`FK_orderdetail_2`&nbsp;(`items_id`),</li><li class=\"alt\">&nbsp;&nbsp;<span class=\"keyword\">CONSTRAINT</span>&nbsp;`FK_orderdetail_1`&nbsp;<span class=\"keyword\">FOREIGN</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`orders_id`)&nbsp;<span class=\"keyword\">REFERENCES</span>&nbsp;`orders`&nbsp;(`id`)&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">DELETE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span>&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">UPDATE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span>,</li><li class=\"\">&nbsp;&nbsp;<span class=\"keyword\">CONSTRAINT</span>&nbsp;`FK_orderdetail_2`&nbsp;<span class=\"keyword\">FOREIGN</span>&nbsp;<span class=\"keyword\">KEY</span>&nbsp;(`items_id`)&nbsp;<span class=\"keyword\">REFERENCES</span>&nbsp;`items`&nbsp;(`id`)&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">DELETE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span>&nbsp;<span class=\"keyword\">ON</span>&nbsp;<span class=\"keyword\">UPDATE</span>&nbsp;<span class=\"keyword\">NO</span>&nbsp;<span class=\"keyword\">ACTION</span></li><li class=\"alt\">)&nbsp;ENGINE=INNODB&nbsp;AUTO_INCREMENT=5&nbsp;<span class=\"keyword\">DEFAULT</span>&nbsp;CHARSET=utf8;</li></ol></div><p>为了测试，我这里随便填了些数据</p><p><img src=\"/uploads/2017/10/20171007155334244.png\" alt=\"20171007155334244.png\"><br></p><p><img src=\"/uploads/2017/10/20171007155349805.png\" alt=\"20171007155349805.png\"><br></p><p><br></p><p><img src=\"/uploads/2017/10/20171007155410485.png\" alt=\"20171007155410485.png\"><br></p><p><br></p><p><strong><img src=\"/uploads/2017/10/20171007155450773.png\" alt=\"20171007155450773.png\"></strong></p><p><strong>2、思路分析</strong></p><p><img src=\"/uploads/2017/10/20171007155545742.png\" alt=\"20171007155545742.png\"><br></p><p>订单项和订单明细是一对多的关系，所以本文主要来查询订单表，然后关联订单明细表，这样就有一对多的问题出来了。</p><p><span>因为多对多比较复杂，总公共有四张表，我们先来分析一下思路：</span></p><blockquote><p><span>1、将用户信息映射到User中；</span></p><p><span>2、在User类中添加订单列表属性<code>List<orders>ordersList</orders></code>，将用户创建的订单映射到ordersList中；</span></p><p><span>3、在Orders中添加订单明细列表属性<code>List<orderdetail>orderDetails</orderdetail></code>，将订单的明细映射到orderDetails中；</span></p><p><span>4、在OrderDetail中添加Items属性，将订单明细所对应的商品映射到Items中。</span></p></blockquote><p>经过这样分析后，感觉虽然有点复杂，但是好像不是很难的样子，映射的方法也跟前面的一样，只不过这里表有点多，关系有点复杂。下面来写映射文件：</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-sql\" start=\"1\"><li class=\"alt\">&lt;<span class=\"keyword\">select</span>&nbsp;id=<span class=\"string\">\"findUserAndItemsResultMap\"</span>&nbsp;resultMap=<span class=\"string\">\"UserAndItemsResultMap\"</span>&gt;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">SELECT</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orders.*,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"func\">user</span>.`username`,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"func\">user</span>.`sex`,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"func\">user</span>.`address`,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.`id`&nbsp;orderdetail_id,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.`items_id`,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.`items_num`,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.`orders_id`,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.`<span class=\"keyword\">name</span>`&nbsp;items_name,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.`detail`&nbsp;items_detail,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.`price`&nbsp;items_price</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">FROM</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orders,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"func\">USER</span>,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">WHERE</span>&nbsp;orders.`user_id`=<span class=\"func\">user</span>.`id`&nbsp;<span class=\"op\">AND</span>&nbsp;orders.`id`&nbsp;=&nbsp;orderdetail.`orders_id`&nbsp;<span class=\"op\">AND</span>&nbsp;orderdetail.`items_id`=items.`id`</li><li class=\"\"><!--<span class=\"keyword\"-->select&gt;</li></ol></div><p>我们先看一下查询结果：</p><p><img src=\"/uploads/2017/10/2017100717420134.png\" alt=\"2017100717420134.png\"><br></p><p><br></p><h2>二、代码实现</h2><p><strong>1、四个持久化类</strong></p><p>① User.java</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.po;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.util.List;</li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">/**</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;用户的持久类</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;User&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;id;&nbsp;<span class=\"comment\">//编号</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;username;&nbsp;<span class=\"comment\">//用户名</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;gender;&nbsp;<span class=\"comment\">//性别</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Date&nbsp;birthday;&nbsp;<span class=\"comment\">//生日</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;address;&nbsp;<span class=\"comment\">//地址</span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;List<orders>&nbsp;getOrdersList()&nbsp;{</orders></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;ordersList;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setOrdersList(List<orders>&nbsp;ordersList)&nbsp;{</orders></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.ordersList&nbsp;=&nbsp;ordersList;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//用户创建的订单列表</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;List<orders>&nbsp;ordersList;</orders></li><li class=\"\"></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getId()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setId(<span class=\"keyword\">int</span>&nbsp;id)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.id&nbsp;=&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getUsername()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;username;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setUsername(String&nbsp;username)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.username&nbsp;=&nbsp;username;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getGender()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;gender;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setGender(String&nbsp;gender)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.gender&nbsp;=&nbsp;gender;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Date&nbsp;getBirthday()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;birthday;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setBirthday(Date&nbsp;birthday)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.birthday&nbsp;=&nbsp;birthday;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getAddress()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;address;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setAddress(String&nbsp;address)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.address&nbsp;=&nbsp;address;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">}</li></ol></div><p>注意：需要在用户表中加入 订单列表</p><p>&nbsp;</p><p>② Items.java</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.po;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;商品的持久类</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Items&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;name;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">double</span>&nbsp;price;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;detail;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;pic;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Date&nbsp;createTime;</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getId()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setId(<span class=\"keyword\">int</span>&nbsp;id)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.id&nbsp;=&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getName()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;name;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setName(String&nbsp;name)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.name&nbsp;=&nbsp;name;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">double</span>&nbsp;getPrice()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;price;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setPrice(<span class=\"keyword\">double</span>&nbsp;price)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.price&nbsp;=&nbsp;price;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getDetail()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;detail;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setDetail(String&nbsp;detail)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.detail&nbsp;=&nbsp;detail;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getPic()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;pic;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setPic(String&nbsp;pic)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.pic&nbsp;=&nbsp;pic;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Date&nbsp;getCreateTime()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;createTime;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setCreateTime(Date&nbsp;createTime)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.createTime&nbsp;=&nbsp;createTime;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li></ol></div><p>&nbsp;</p><p>③ Orders.java</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.po;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.util.List;</li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">/**</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;订单的持久类和扩展类</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Orders&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;id;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;userId;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;number;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Date&nbsp;createTime;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;note;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//订单明细</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;List<orderdetail>&nbsp;orderdetails;</orderdetail></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;List<orderdetail>&nbsp;getOrderdetails()&nbsp;{</orderdetail></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;orderdetails;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setOrderdetails(List<orderdetail>&nbsp;orderdetails)&nbsp;{</orderdetail></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.orderdetails&nbsp;=&nbsp;orderdetails;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getId()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setId(<span class=\"keyword\">int</span>&nbsp;id)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.id&nbsp;=&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getUserId()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;userId;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setUserId(<span class=\"keyword\">int</span>&nbsp;userId)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.userId&nbsp;=&nbsp;userId;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getNumber()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;number;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setNumber(String&nbsp;number)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.number&nbsp;=&nbsp;number;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Date&nbsp;getCreateTime()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;createTime;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setCreateTime(Date&nbsp;createTime)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.createTime&nbsp;=&nbsp;createTime;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;String&nbsp;getNote()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;note;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setNote(String&nbsp;note)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.note&nbsp;=&nbsp;note;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li></ol></div><p>注意：订单列表中，需要订单的详细信息，不需要用户信息</p><p>&nbsp;</p><p>④ Orderdetail.java</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.po;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;订单明细的持久类</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Orderdetail&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;id;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;ordersId;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;itemsId;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;itemsNum;</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//明细对应的商品信息</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Items&nbsp;items;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Items&nbsp;getItems()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;items;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setItems(Items&nbsp;items)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.items&nbsp;=&nbsp;items;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getId()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;id;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setId(<span class=\"keyword\">int</span>&nbsp;id)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.id&nbsp;=&nbsp;id;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getOrdersId()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;ordersId;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setOrdersId(<span class=\"keyword\">int</span>&nbsp;ordersId)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.ordersId&nbsp;=&nbsp;ordersId;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getItemsId()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;itemsId;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setItemsId(<span class=\"keyword\">int</span>&nbsp;itemsId)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.itemsId&nbsp;=&nbsp;itemsId;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">int</span>&nbsp;getItemsNum()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;itemsNum;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setItemsNum(<span class=\"keyword\">int</span>&nbsp;itemsNum)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">this</span>.itemsNum&nbsp;=&nbsp;itemsNum;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">}</li></ol></div><p>注意：订单明细里，需要 商品信息</p><p>&nbsp;</p><p><strong>2、订单代理 即mapper.java</strong></p><p>OrdersMapperCustom.java</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.mapper;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;com.liuyanzhao.mybatis.po.User;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.List;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;订单&nbsp;mapper</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">interface</span>&nbsp;OrdersMapperCustom&nbsp;{</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//查询用户购买的商品信息</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;List<user>&nbsp;findUserAndItemsResultMap()&nbsp;<span class=\"keyword\">throws</span>&nbsp;Exception;</user></li><li class=\"\">}</li></ol></div><p>&nbsp;</p><p><span><strong>3、OrdersMapperCustom.xml &nbsp; &nbsp;映射文件</strong></span></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\"><!--?</span--><span class=\"tag-name\">xml</span>&nbsp;<span class=\"attribute\">version</span>=<span class=\"attribute-value\">\"1.0\"</span>&nbsp;<span class=\"attribute\">encoding</span>=<span class=\"attribute-value\">\"UTF-8\"</span>&nbsp;<span class=\"tag\">?&gt;</span></span></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUBLIC&nbsp;\"-//mybatis.org//DTD&nbsp;Mapper&nbsp;3.0//EN\"</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"<span class=\"tag\">&gt;</span></li><li class=\"alt\"></li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">mapper</span>&nbsp;<span class=\"attribute\">namespace</span>=<span class=\"attribute-value\">\"com.liuyanzhao.mybatis.mapper.OrdersMapperCustom\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--查询用户购买的商品--></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">resultMap</span>&nbsp;<span class=\"attribute\">id</span>=<span class=\"attribute-value\">\"UserAndItemsResultMap\"</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"com.liuyanzhao.mybatis.po.User\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--用户信息--></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">id</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"user_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"id\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">id</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"username\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"username\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"gender\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"gender\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"address\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"address\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--订单信息--></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--一个用户可以对应多个订单，故使用collection映射--></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">collection</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"ordersList\"</span>&nbsp;<span class=\"attribute\">ofType</span>=<span class=\"attribute-value\">\"com.liuyanzhao.mybatis.po.Orders\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">id</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"id\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">id</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"user_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"userId\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"number\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"number\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"createtime\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"createTime\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"node\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"node\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--订单明细--></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--一个订单包括多个明细，故使用collection--></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">collection</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"orderdetails\"</span>&nbsp;<span class=\"attribute\">ofType</span>=<span class=\"attribute-value\">\"com.liuyanzhao.mybatis.po.Orderdetail\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">id</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"orderdetail_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"id\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">id</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"itemsId\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_num\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"itemsNum\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"orders_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"ordersId\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--商品信息--></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!--一个订单明细对应一个商品--></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">association</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"items\"</span>&nbsp;<span class=\"attribute\">javaType</span>=<span class=\"attribute-value\">\"com.liuyanzhao.mybatis.po.Items\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">id</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_id\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"id\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">id</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_name\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"name\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_price\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"price\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">result</span>&nbsp;<span class=\"attribute\">column</span>=<span class=\"attribute-value\">\"items_detail\"</span>&nbsp;<span class=\"attribute\">property</span>=<span class=\"attribute-value\">\"detail\"</span><span class=\"tag\">&gt;</span><span class=\"tag\"><!--</span--><span class=\"tag-name\">result</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">association</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">collection</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">collection</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">resultMap</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">select</span>&nbsp;<span class=\"attribute\">id</span>=<span class=\"attribute-value\">\"findUserAndItemsResultMap\"</span>&nbsp;<span class=\"attribute\">resultMap</span>=<span class=\"attribute-value\">\"UserAndItemsResultMap\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orders.*,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.username,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.gender,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.address,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.id&nbsp;orderdetail_id,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.items_id,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.items_num,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail.orders_id,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.name&nbsp;items_name,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.detail&nbsp;items_detail,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.price&nbsp;items_price</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orders,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user,</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;orderdetail,</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;<span class=\"attribute\">orders.user_id</span>=user.id&nbsp;AND&nbsp;<span class=\"attribute\">orders.id</span>&nbsp;=&nbsp;<span class=\"attribute-value\">orderdetail</span>.orders_id&nbsp;AND&nbsp;<span class=\"attribute\">orderdetail.items_id</span>=items.id</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">select</span><span class=\"tag\">&gt;</span></span></li><li class=\"\"></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">mapper</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>&nbsp;</p><p><span>4、测试类 OrderMapperCustomTest.java</span></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mybatis.test;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;com.liuyanzhao.mybatis.mapper.OrdersMapperCustom;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;com.liuyanzhao.mybatis.po.User;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.apache.ibatis.io.Resources;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.apache.ibatis.session.SqlSession;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.apache.ibatis.session.SqlSessionFactory;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.apache.ibatis.session.SqlSessionFactoryBuilder;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.junit.Before;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.junit.Test;</li><li class=\"alt\"></li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.io.InputStream;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.List;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;Created&nbsp;by&nbsp;Liu_Yanzhao&nbsp;on&nbsp;2017/8/12.</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;OrderMapperCustomTest&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;SqlSessionFactory&nbsp;sqlSessionFactory;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Before</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;setUp()&nbsp;<span class=\"keyword\">throws</span>&nbsp;Exception&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;resource&nbsp;=&nbsp;<span class=\"string\">\"Configuration.xml\"</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;inputStream&nbsp;=&nbsp;Resources.getResourceAsStream(resource);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlSessionFactory&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;SqlSessionFactoryBuilder()</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.build(inputStream);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Test</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;testFindUserAndItemsResultMap()&nbsp;<span class=\"keyword\">throws</span>&nbsp;Exception&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SqlSession&nbsp;sqlSession&nbsp;=&nbsp;sqlSessionFactory.openSession();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//创建代理对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrdersMapperCustom&nbsp;ordersMapperCustom&nbsp;=&nbsp;sqlSession.getMapper(OrdersMapperCustom.<span class=\"keyword\">class</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//调用mapper对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<user>&nbsp;list&nbsp;=&nbsp;ordersMapperCustom.findUserAndItemsResultMap();</user></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(list);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//释放资源</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlSession.close();</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li></ol></div><p>还有其他文件就不补充了，如 mybatis 全局配置文件</p><p>&nbsp;</p><h2>小结</h2><p><span>这样多对多的映射就搞定了。不过还有个问题，就是这里多对多的查询会把所有关联的表的信息都查询出来，然后放到pojo中的对应的List或者某个类中，所以即使我只查了个用户信息，但是这个用户里包含了订单，订单项，商品等信息，感觉装的有点多，好像有时候并不需要这么多冗余的数据出来，但是如果用resultType的话查询出来的字段必须对应pojo中的属性，如果有List等，需要手动装入才行。所以下面总结一下对于这种查询数据比较多的时候，resultType和resultMap各有什么作用？</span></p><blockquote><ol><li>比如我们只需要将查询用户购买的商品信息明细清单（如用户名、用户地址、购买商品名称、购买商品时间、购买商品数量），那么我们完全不需要其他的信息，这个时候就没必要使用resultMap将所有的信息都搞出来，我们可以自己定义一个pojo，包含我们需要的字段即可，然后查询语句只查询我们需要的字段，这样使用resultType会方便很多。</li><li>如果我们需要查询该用户的所有详细信息，比如用户点击该用户或者鼠标放上去，会出来跟该用户相关的订单啊，订单明细啊，商品啊之类的，然后我们要点进去看下详细情况的时候，那就需要使用resultMap了，必须将所有信息都装到这个User中，然后具体啥信息再从User中取，很好理解。</li><li>总结一点：使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括多个list。否则使用resultType比较直接。</li></ol></blockquote><p><span>到这里，mybatis的多对多映射就总结完了。&nbsp;</span></p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:56:00', '2018-11-25 20:53:43', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (11, 'Servlet 实现验证码', NULL, '<h2>分析</h2><p><strong>生成图片实现类</strong></p><p>Image<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>&nbsp;类</p><p>① 定义BufferedImage 对象</p><p>② 获得 Graphics 对象</p><p>③ 通过 Random 产生随机验证码信息</p><p>④ 使用 Graphics 绘制图片</p><p>⑤ 记录验证码信息到 session 中</p><p>⑥ 使用 ImageIO 输出图片</p><h2>代码实现</h2><p>1、新建 web 项目 CheckCode，在 WebContent 下新建 index.jsp</p><p><strong>index.jsp</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\">&lt;</span>%@&nbsp;page&nbsp;<span class=\"attribute\">language</span>=<span class=\"attribute-value\">\"java\"</span>&nbsp;<span class=\"attribute\">contentType</span>=<span class=\"attribute-value\">\"text/html;&nbsp;charset=UTF-8\"</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"attribute\">pageEncoding</span>=<span class=\"attribute-value\">\"UTF-8\"</span>%<span class=\"tag\">&gt;</span></li><li class=\"alt\">&gt;</li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">html</span><span class=\"tag\">&gt;</span></li><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">head</span><span class=\"tag\">&gt;</span></li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">meta</span>&nbsp;<span class=\"attribute\">http-equiv</span>=<span class=\"attribute-value\">\"Content-Type\"</span>&nbsp;<span class=\"attribute\">content</span>=<span class=\"attribute-value\">\"text/html;&nbsp;charset=UTF-8\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">title</span><span class=\"tag\">&gt;</span>Insert&nbsp;title&nbsp;here<span class=\"tag\"><!--</span--><span class=\"tag-name\">title</span><span class=\"tag\">&gt;</span></span></li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">script</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"text/javascript\"</span><span class=\"tag\">&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;reloadCode()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//传个时间参数，防止缓存</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;<span class=\"attribute\">time</span>&nbsp;=&nbsp;<span class=\"attribute-value\">new</span>&nbsp;Date().getTime();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(\"imageCode\")<span class=\"attribute\">.src</span>=<span class=\"attribute-value\">\"&lt;%=request.getContextPath()%&gt;/Image<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>?d=\"</span>+time;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">script</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">head</span><span class=\"tag\">&gt;</span></span></li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">body</span><span class=\"tag\">&gt;</span></li><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">form</span>&nbsp;<span class=\"attribute\">action</span>=<span class=\"attribute-value\">\"&lt;%=request.getContextPath()%&gt;/Login<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>\"</span>&nbsp;<span class=\"attribute\">method</span>=<span class=\"attribute-value\">\"post\"</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;验证码：<span class=\"tag\">&lt;</span><span class=\"tag-name\">input</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"text\"</span>&nbsp;<span class=\"attribute\">name</span>=<span class=\"attribute-value\">\"checkcode\"</span>&nbsp;<span class=\"tag\">/&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">img</span>&nbsp;<span class=\"attribute\">id</span>=<span class=\"attribute-value\">\"imageCode\"</span>&nbsp;<span class=\"attribute\">src</span>=<span class=\"attribute-value\">\"&lt;%=request.getContextPath()%&gt;/Image<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>\"</span>&nbsp;<span class=\"attribute\">alt</span>=<span class=\"attribute-value\">\"验证码\"</span>&nbsp;<span class=\"tag\">/&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">a</span>&nbsp;<span class=\"attribute\">href</span>=<span class=\"attribute-value\">\"javascript:reloadCode();\"</span><span class=\"tag\">&gt;</span>看不清楚<span class=\"tag\"><!--</span--><span class=\"tag-name\">a</span><span class=\"tag\">&gt;</span>&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">br</span>&nbsp;<span class=\"tag\">/&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">input</span>&nbsp;<span class=\"attribute\">type</span>=<span class=\"attribute-value\">\"submit\"</span>&nbsp;&nbsp;<span class=\"attribute\">value</span>=<span class=\"attribute-value\">\"提交\"</span><span class=\"tag\">/&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">form</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">body</span><span class=\"tag\">&gt;</span></span></li><li class=\"\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">html</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>2、在 src 下新建 com.liuyanzhao 包，然后分别新建用于动态画图的 Image<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>&nbsp;类和用于判断验证码是否正确的 Login<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>&nbsp;类</p><p><strong>Image<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>.java</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.awt.Color;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.awt.Graphics;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.awt.image.BufferedImage;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.io.IOException;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Random;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;javax.imageio.ImageIO;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>Exception;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.Http<a href=\"https://liuyanzhao.com/tag/servlet/\" title=\"查看与 Servlet 相关的文章\" target=\"_blank\">Servlet</a>;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.HttpServletRequest;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.HttpServletResponse;</li><li class=\"\"></li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">/*</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;ImageServlet&nbsp;<span class=\"keyword\">extends</span>&nbsp;HttpServlet&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Override</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">protected</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;doGet(HttpServletRequest&nbsp;request,&nbsp;HttpServletResponse&nbsp;response)&nbsp;<span class=\"keyword\">throws</span>&nbsp;ServletException,&nbsp;IOException&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BufferedImage&nbsp;bi&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;BufferedImage(<span class=\"number\">68</span>,&nbsp;<span class=\"number\">22</span>,&nbsp;BufferedImage.TYPE_INT_RGB);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics&nbsp;g&nbsp;=&nbsp;bi.getGraphics();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;c&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Color(<span class=\"number\">200</span>,<span class=\"number\">155</span>,<span class=\"number\">255</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(c);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(<span class=\"number\">0</span>,&nbsp;<span class=\"number\">0</span>,&nbsp;<span class=\"number\">68</span>,&nbsp;<span class=\"number\">22</span>);</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">char</span>[]&nbsp;ch&nbsp;=&nbsp;<span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"</span>.toCharArray();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;r&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Random();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span>&nbsp;len&nbsp;=&nbsp;ch.length,index;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer&nbsp;sb&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;StringBuffer();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&nbsp;i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;=&nbsp;r.nextInt(len);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(<span class=\"keyword\">new</span>&nbsp;Color(r.nextInt(<span class=\"number\">88</span>),r.nextInt(<span class=\"number\">188</span>),r.nextInt(<span class=\"number\">255</span>)));</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(ch[index]+<span class=\"string\">\"\"</span>,&nbsp;(i*<span class=\"number\">15</span>)+<span class=\"number\">3</span>,&nbsp;<span class=\"number\">18</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(ch[index]);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.getSession().setAttribute(<span class=\"string\">\"piccode\"</span>,&nbsp;sb.toString());</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageIO.write(bi,&nbsp;<span class=\"string\">\"JPG\"</span>,&nbsp;response.getOutputStream());</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Override</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">protected</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;doPost(HttpServletRequest&nbsp;request,&nbsp;HttpServletResponse&nbsp;response)&nbsp;<span class=\"keyword\">throws</span>&nbsp;ServletException,&nbsp;IOException&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doGet(request,&nbsp;response);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li></ol></div><p><strong>LoginServlet.java</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.io.IOException;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.io.PrintWriter;</li><li class=\"alt\"></li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.ServletException;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.HttpServlet;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.HttpServletRequest;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;javax.servlet.http.HttpServletResponse;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;LoginServlet&nbsp;<span class=\"keyword\">extends</span>&nbsp;HttpServlet{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Override</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">protected</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;doPost(HttpServletRequest&nbsp;request,&nbsp;HttpServletResponse&nbsp;response)&nbsp;<span class=\"keyword\">throws</span>&nbsp;ServletException,&nbsp;IOException&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;piccode&nbsp;=&nbsp;(String)request.getSession().getAttribute(<span class=\"string\">\"piccode\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;checkcode&nbsp;=&nbsp;request.getParameter(<span class=\"string\">\"checkcode\"</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkcode&nbsp;=&nbsp;checkcode.toUpperCase();<span class=\"comment\">//不区分大小写</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PrintWriter&nbsp;out&nbsp;=&nbsp;response.getWriter();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(piccode.equals(checkcode))&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(<span class=\"string\">\"验证码输入正确\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"keyword\">else</span>&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(<span class=\"string\">\"验证码输入错误\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.flush();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.close();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Override</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">protected</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;doGet(HttpServletRequest&nbsp;request,&nbsp;HttpServletResponse&nbsp;response)&nbsp;<span class=\"keyword\">throws</span>&nbsp;ServletException,&nbsp;IOException&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doPost(request,&nbsp;response);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">}</li></ol></div><p>3、在 web.xml 里添加 Servlet 映射</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span>ImageServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-class</span><span class=\"tag\">&gt;</span>com.liuyanzhao.ImageServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-class</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-mapping</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!-- 映射为 ImageServlet --></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span>ImageServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span>/ImageServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-mapping</span><span class=\"tag\">&gt;</span></span></li><li class=\"\"></li><li class=\"alt\">&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span>LoginServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-class</span><span class=\"tag\">&gt;</span>com.liuyanzhao.LoginServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-class</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-mapping</span><span class=\"tag\">&gt;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comments\"><!-- 映射为 IndexServlet --></span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span>LoginServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-name</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span>/LoginServlet<span class=\"tag\"><!--</span--><span class=\"tag-name\">url-pattern</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\">&nbsp;<span class=\"tag\"><!--</span--><span class=\"tag-name\">servlet-mapping</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>4、运行 Tomcat 服务器，打开浏览器，访问&nbsp;http://localhost:8080/CheckCode</p><p>效果如下</p><p><img src=\"/uploads/2017/10/20171007155723341.png\" alt=\"20171007155723341.png\"><br></p><p>验证码不区分大小写，点击 “看不清楚”可以更换</p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:57:38', '2018-11-25 20:53:29', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (12, 'Integer与int的种种比较你知道多少？', NULL, '<p>如果面试官问Integer与int的区别：估计大多数人只会说道两点，Ingeter是int的包装类，int的初值为0，Ingeter的初值为null。但是如果面试官再问一下Integer a = 1;int b&nbsp;= 1; a==b为true还是为false？估计就有一部分人答不出来了，如果再问一下其他的，估计更多的人会头脑一片混乱。所以我对它们进行了总结，希望对大家有帮助。</p><p><strong>首先看代码：</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"comment\">/*&nbsp;</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"number\">128</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i2&nbsp;=&nbsp;<span class=\"number\">128</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i3&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Integer(<span class=\"number\">128</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//Integer会自动拆箱为int，所以为true</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i&nbsp;==&nbsp;i2);<span class=\"comment\">//true</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i&nbsp;==&nbsp;i3);<span class=\"comment\">//true</span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//java在编译的时候,被翻译成-&gt;&nbsp;Integer&nbsp;i5&nbsp;=&nbsp;Integer.valueOf(127);</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i5&nbsp;=&nbsp;<span class=\"number\">127</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i6&nbsp;=&nbsp;<span class=\"number\">127</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i5&nbsp;==&nbsp;i6);<span class=\"comment\">//true</span></li><li class=\"\"></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i7&nbsp;=&nbsp;<span class=\"number\">128</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i8&nbsp;=&nbsp;<span class=\"number\">128</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i7&nbsp;==&nbsp;i8);<span class=\"comment\">//false</span></li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i9&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Integer(<span class=\"number\">127</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i10&nbsp;=&nbsp;<span class=\"number\">127</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i9&nbsp;==&nbsp;i10);&nbsp;<span class=\"comment\">//false</span></li><li class=\"\"></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i11&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Integer(<span class=\"number\">128</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;i12&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Integer(<span class=\"number\">123</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i11&nbsp;==&nbsp;i12);&nbsp;&nbsp;<span class=\"comment\">//false</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">}</li></ol></div><p><strong>详解如下：</strong></p><p>首先，13行和14行输出结果都为true,因为Integer和int比都会自动拆箱（jdk1.5以上）。</p><p>19行的结果为true,而24行则为false,很多人都不懂为什么。其实java在编译Integer i5 = 127的时候,被翻译成-&gt; Integer i5 = Integer.valueOf(127);所以关键就是看valueOf()函数了。只要看看valueOf()函数的源码就会明白了。JDK源码的valueOf函数式这样的：</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;Integer&nbsp;valueOf(<span class=\"keyword\">int</span>&nbsp;i)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">assert</span>&nbsp;IntegerCache.high&nbsp;&gt;=&nbsp;<span class=\"number\">127</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>&nbsp;(i&nbsp;&gt;=&nbsp;IntegerCache.low&nbsp;&amp;&amp;&nbsp;i&nbsp;&lt;=&nbsp;IntegerCache.high)</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;IntegerCache.cache[i&nbsp;+&nbsp;(-IntegerCache.low)];</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;<span class=\"keyword\">new</span>&nbsp;Integer(i);</li><li class=\"\">}</li></ol></div><p>看一下源码大家都会明白，对于-128到127之间的数，会进行缓存，Integer i5 = 127时，会将127进行缓存，下次再写Integer i6 = 127时，就会直接从缓存中取，就不会new了。所以22行的结果为true,而25行为false。</p><p>对于29行和34行，因为对象不一样，所以为false。</p><p>我对于以上的情况总结如下：</p><p>① 无论如何，<span><strong>Integer与new Integer不会相等</strong></span>。不会经历拆箱过程，i3的引用指向堆，而i4指向专门存放他的内存（常量池），他们的内存地址不一样，所以为false</p><p>②&nbsp;<strong><span>两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false</span></strong></p><p>java在编译Integer i2 = 128的时候,被翻译成-&gt; Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存</p><p>③&nbsp;<strong><span>两</span><span>个都是new出来的,都为false</span></strong></p><p>④&nbsp;<strong><span>int和Integer(无论new否)比，都为true</span></strong>，因为会把Integer自动拆箱为int再去比</p><p>&nbsp;</p><p>参考：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://www.cnblogs.com/liuling/archive/2013/05/05/intAndInteger.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.cnblogs.com/liuling/archive/2013/05/05/intAndInteger.html</a></p><div><br></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:58:51', '2018-11-25 20:52:45', 4, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (13, 'Java如何让程序一直运行，不停止', NULL, '<p>如何让程序一直运行，很容易实现，只需要一直等待输出即可啦</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Scanner;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;LiuYanzhao</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">final</span>&nbsp;String&nbsp;OPERATION_EXIT&nbsp;=&nbsp;<span class=\"string\">\"EXIT\"</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"请开始您的输入，EXIT/E&nbsp;退出\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//怎么让程序一直运行</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scanner&nbsp;scan&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Scanner(System.in);</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">while</span>(scan.hasNext())&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;in&nbsp;=&nbsp;scan.next().toString();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(OPERATION_EXIT.equals(in.toUpperCase())</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;OPERATION_EXIT.substring(<span class=\"number\">0</span>,&nbsp;<span class=\"number\">1</span>).equals(in.toUpperCase()))&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"您成功已退出！\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">break</span>;</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"您输入的值：\"</span>+in);</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">}</li><li></li></ol></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 15:59:33', '2018-11-25 20:47:52', 4, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (14, 'Java中静态代码块、构造代码块的区别', NULL, '<p>直接在类中定义且没有加static关键字的代码块称为{}构造代码块。</p><p><strong><span>构造代码块在创建对象时被调用，每次创建对象都会被调用</span></strong>，并且构造代码块的执行次序优先于类构造函数。</p><p>静态代码块:在java中使用static关键字声明的代码块。<span><strong>静态块用于初始化类，为类的属性初始化。每个静态代码块只会执行一次。由于JVM在加载类时会执行静态代码块，所以静态代码块先于主方法执行</strong></span>。</p><p>注意：1 静态代码块不能存在于任何方法体内。2 静态代码块不能直接访问静态实例变量和实例方法，需要通过类的实例对象来访问。</p><p>静态代码块、构造代码块、构造函数同时存在时的执行顺序：<strong><span>静态代码块 &gt; 构造代码块 &nbsp;&gt; 构造函数</span></strong>；</p><p>&nbsp;</p><p>下面我们来举几个例子说明一切</p><p><strong>demo1：构造方法</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">static</span>&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"静态块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"构造块，在类中定义\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Test()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"构造方法执行\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;}</li><li class=\"alt\"><span class=\"comment\">/*</span></li><li class=\"\"><span class=\"comment\">静态块</span></li><li class=\"alt\"><span class=\"comment\">构造块，在类中定义</span></li><li class=\"\"><span class=\"comment\">构造方法执行</span></li><li class=\"alt\"><span class=\"comment\">构造块，在类中定义</span></li><li class=\"\"><span class=\"comment\">构造方法执行</span></li><li class=\"alt\"><span class=\"comment\">*/</span></li></ol></div><p><strong>demo2:普通代码块</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"comment\">/*普通代码块：在方法或语句中出现的{}就称为普通代码块。</span></li><li class=\"\"><span class=\"comment\">普通代码块和一般的语句执行顺序由他们在代码中出现的次序决定--“先出现先执行”*/</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span>&nbsp;x&nbsp;=&nbsp;<span class=\"number\">3</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"1,普通代码块内的变量x=\"</span>&nbsp;+&nbsp;x);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span>&nbsp;x&nbsp;=&nbsp;<span class=\"number\">1</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"主方法内的变量x=\"</span>&nbsp;+&nbsp;x);</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">int</span>&nbsp;y&nbsp;=&nbsp;<span class=\"number\">7</span>;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"2,普通代码块内的变量y=\"</span>&nbsp;+&nbsp;y);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/*&nbsp;</span></li><li class=\"\"><span class=\"comment\">1,普通代码块内的变量x=3</span></li><li class=\"alt\"><span class=\"comment\">主方法内的变量x=1</span></li><li class=\"\"><span class=\"comment\">2,普通代码块内的变量y=7</span></li><li class=\"alt\"><span class=\"comment\">*/</span></li></ol></div><p><strong>demo3:构造代码块</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"comment\">/*构造块：直接在类中定义且没有加static关键字的代码块称为{}构造代码块。</span></li><li class=\"\"><span class=\"comment\">构造代码块在创建对象时被调用，每次创建对象都会被调用，</span></li><li class=\"alt\"><span class=\"comment\">并且构造代码块的执行次序优先于类构造函数。*/</span></li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"第一代码块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Test()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"构造方法\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"第二构造块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li><li class=\"\"><span class=\"comment\">/*</span></li><li class=\"alt\"><span class=\"comment\">第一代码块</span></li><li class=\"\"><span class=\"comment\">第二构造块</span></li><li class=\"alt\"><span class=\"comment\">构造方法</span></li><li class=\"\"><span class=\"comment\">第一代码块</span></li><li class=\"alt\"><span class=\"comment\">第二构造块</span></li><li class=\"\"><span class=\"comment\">构造方法</span></li><li class=\"alt\"><span class=\"comment\">第一代码块</span></li><li class=\"\"><span class=\"comment\">第二构造块</span></li><li class=\"alt\"><span class=\"comment\">构造方法</span></li><li class=\"\"><span class=\"comment\">*/</span></li></ol></div><p><strong>demo4:静态代码块</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"comment\">/*静态代码块:在java中使用static关键字声明的代码块。</span></li><li class=\"\"><span class=\"comment\">静态块用于初始化类，为类的属性初始化。</span></li><li class=\"alt\"><span class=\"comment\">每个静态代码块只会执行一次。</span></li><li class=\"\"><span class=\"comment\">由于JVM在加载类时会执行静态代码块，所以静态代码块先于主方法执行。</span></li><li class=\"alt\"><span class=\"comment\">如果类中包含多个静态代码块，那么将按照\"先定义的代码先执行，后定义的代码后执行\"。</span></li><li class=\"\"><span class=\"comment\">注意：1&nbsp;静态代码块不能存在于任何方法体内。</span></li><li class=\"alt\"><span class=\"comment\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp;静态代码块不能直接访问静态实例变量和实例方法，需要通过类的实例对象来访问。*/</span></li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">class</span>&nbsp;Code&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Code的构造块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">static</span>&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Code的静态代码块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Code()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Code的构造方法\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Test的构造块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">static</span>&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Test的静态代码块\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;Test()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Test的构造方法\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\">\"Test的主方法\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Code();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Code();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">new</span>&nbsp;Test();</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li><li class=\"\"><span class=\"comment\">/*</span></li><li class=\"alt\"><span class=\"comment\">Test的静态代码块</span></li><li class=\"\"><span class=\"comment\">Test的主方法</span></li><li class=\"alt\"><span class=\"comment\">Code的静态代码块</span></li><li class=\"\"><span class=\"comment\">Code的构造块</span></li><li class=\"alt\"><span class=\"comment\">Code的构造方法</span></li><li class=\"\"><span class=\"comment\">Code的构造块</span></li><li class=\"alt\"><span class=\"comment\">Code的构造方法</span></li><li class=\"\"><span class=\"comment\">Test的构造块</span></li><li class=\"alt\"><span class=\"comment\">Test的构造方法</span></li><li class=\"\"><span class=\"comment\">Test的构造块</span></li><li class=\"alt\"><span class=\"comment\">Test的构造方法</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li></li></ol></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 16:00:06', '2018-11-25 20:47:40', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (15, 'sql语句分为三类(DML,DDL,DCL)-介绍', NULL, '<p><span>DML（data manipulation language）：数据库操作语言</span><br><span>它们是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样</span></p><p>&nbsp;</p><p><span>DDL（data definition language）：的数据库定义语言</span><br><span>主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用</span></p><p>&nbsp;</p><p><span>DCL（Data Control Language）：&nbsp;数据库控制语言</span><br><span>是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</span></p><p>&nbsp;</p><p><strong>详细解释：</strong></p><h2>一、DDL is Data Definition Language statements</h2><p>数据定义语言，用于定义和管理&nbsp;<a href=\"https://liuyanzhao.com/tag/sql/\" title=\"查看与 SQL 相关的文章\" target=\"_blank\">SQL</a>&nbsp;数据库中的所有对象的语言</p><p>1.CREATE - to create objects in the database&nbsp;&nbsp; 创建</p><p>2.ALTER - alters the structure of the database&nbsp;&nbsp; 修改</p><p>3.DROP - delete objects from the database&nbsp;&nbsp; 删除</p><p>4.TRUNCATE - remove all records from a table, including all spaces allocated for the records are removed</p><p>TRUNCATE TABLE [Table Name]。</p><p>下面是对Truncate语句在MS<a href=\"https://liuyanzhao.com/tag/sql/\" title=\"查看与 SQL 相关的文章\" target=\"_blank\">SQL</a>Server2000中用法和原理的说明：</p><p>Truncate table 表名 速度快,而且效率高,因为:</p><p>TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但</p><p>TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。</p><p>DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存</p><p>储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p><p>TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</p><p>对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</p><p>TRUNCATE TABLE 不能用于参与了索引视图的表。</p><p>5.COMMENT - add comments to the data dictionary 注释</p><p>6.GRANT - gives user\'s access privileges to database 授权</p><p>7.REVOKE - withdraw access privileges given with the GRANT command&nbsp;&nbsp; 收回已经授予的权限</p><p>&nbsp;</p><h2>二、DML is Data Manipulation Language statements</h2><p>数据操作语言，SQL中处理数据等操作统称为数据操纵语言</p><p>1.SELECT - retrieve data from the a database&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查询</p><p>2.INSERT - insert data into a table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加</p><p>3.UPDATE - updates existing data within a table&nbsp;&nbsp;&nbsp; 更新</p><p>4.DELETE - deletes all records from a table, the space for the records remain&nbsp;&nbsp; 删除</p><p>5.CALL - call a PL/SQL or Java subprogram</p><p>6.EXPLAIN PLAN - explain access path to data</p><p>Oracle RDBMS执行每一条SQL语句，都必须经过Oracle优化器的评估。所以，了解优化器是如何选择(搜索)路径以及索引是如何被使用的，对优化SQL语句有很大的帮助。Explain可以用来迅速方便地查出对于给定SQL语句中的查询数据是如何得到的即搜索路径(我们通常称为Access Path)。从而使我们选择最优的查询方式达到最大的优化效果。</p><p>7.LOCK TABLE - control concurrency 锁，用于控制并发</p><p>&nbsp;</p><h2>三、DCL is Data Control Language statements</h2><p>数据控制语言，用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等</p><p>1.COMMIT - save work done 提交</p><p>2.SAVEPOINT - identify a point in a transaction to which you can later roll back 保存点</p><p>3.ROLLBACK - restore database to original since the last COMMIT&nbsp;&nbsp; 回滚</p><p>4.SET TRANSACTION - Change transaction options like what rollback segment to use&nbsp;&nbsp; 设置当前事务的特性，它对后面的事务没有影响</p><div><br></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 16:00:50', '2018-11-25 20:47:30', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (16, 'execute、executeUpdate、executeQuery三者的区别', NULL, '<p>1.&nbsp;ResultSet&nbsp;executeQuery(String sql); 执行SQL查询，并返回 ResultSet 对象。</p><p>例如：被执行最多的 SELECT 语句。</p><p>2.int&nbsp;executeUpdate(String sql); 可执行增，删，改，返回执行受到影响的行数。</p><p>例如：&nbsp;INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句</p><p>3.&nbsp;boolean&nbsp;execute(String sql); 可执行任何SQL语句，返回一个布尔值，表示是否返回 ResultSet 。</p><p><strong>&nbsp; &nbsp; &nbsp;<span>&nbsp;&nbsp;execute是executeQuery和executeUpdate的综合.</span></strong></p><p><strong><span>通常我们没有必要使用execute方法来执行SQL语句，而是使用 executeQuery 或 executeUpdate 更适合。</span></strong></p><p>-----</p><p>&nbsp;</p><p>executeUpdate() 这是 PreparedStatement 接口中的方法</p><p>executeUpdate(String sql) 这是 PreparedStatement 从父接口 Statement 中继承过来的方法</p><p>executeUpdate() 中执行 SQL 语句需要在创建 PerparedStatement 时通过 Connection 的 prepareStatement(String sql) 方法中写出，因为 PerparedStatement 中的 SQL 语句数据库需要进行预编译和缓存，因此要在创建 PerparedStatement 对象时给出 SQL 语句。</p><p>而 executeUpdate(String sql) 是 Statement 中的方法，参数中的 SQL 语句只是提交给数据库去执行，并不需要预编译。</p><p><strong>如果 SQL 语句中有 ? 占位符，那么在设置好占位符中的值后，必须使用 executeUpdate() 执行。而 executeUpdate(String sql) 只是提交一个 SQL 语句，且这个语句中不能带有 ? 占位符。</strong></p><p>当然，我们最好不要用 Statement 接口<br>参考：http://www.cnblogs.com/bukudekong/archive/2011/06/22/2086531.html</p>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 16:02:12', '2018-11-25 20:45:25', 2, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (17, 'JSP 中 forward 转发 和 sendRedirect 重定向的区别', NULL, '<h2>本质区别：</h2><div>&nbsp; &nbsp; &nbsp;&nbsp;<b>一句话概括：</b>重定向是客户端行为，转发是服务器行为.</div><div><b>&nbsp; &nbsp; &nbsp;1.请求次数：</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;重定向：重定向行为是做了两次请求，及产生了两个request对象，重定向会导致request对象信息丢失。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;请求转发：转发做了一次请求， 浏览器的地址栏一直是第一次请求的地址。转发是服务器内部request/response控制权的移交。</div><div>&nbsp; &nbsp; &nbsp;&nbsp;<b>2.请求资源地址：</b></div><p><strong>重定向</strong>：web组件可以将请求重定向到任意一个url，而不仅仅是同一个应用。</p><p>重定向的源组件与目标组件不共用同一个HttpServletRequest对象，因此不能在request范围内共享数据。</p><p><strong>请求转发</strong>：转发的源组件与目标组件必须在同一个应用中，两者可以在request范围内共享数据。</p><div><strong>&nbsp; &nbsp; &nbsp; &nbsp;3.一种解释：</strong></div><div><p>假设你去办理某个执照</p><p><strong>重定向</strong>：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。</p><p><strong>请求转发</strong>：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。</p></div><div><h2><b>工作流程：</b></h2></div><p><strong>1.重定向</strong></p><p>浏览器发出http请求&nbsp;&nbsp;<b>&gt;&gt;</b>&nbsp;服务器接受请求并发送302状态码和新的对应的url到浏览器&nbsp;&nbsp;<b>&gt;&gt;</b></p><p>浏览器接收响应并自动请求新的url&nbsp;&nbsp;<b>&gt;&gt;</b>&nbsp;服务器接收请求并寻找客户所需的资源响应到浏览器</p><p><strong>2.转发</strong></p><p>浏览器发出http求其&nbsp;&nbsp;<b>&gt;&gt;</b>&nbsp;服务器接收请求&nbsp;&nbsp;<b>&gt;&gt;</b>　服务器调用内部的一个方法在容器内完成请求处理和转发动作&nbsp;&nbsp;<b>&gt;&gt;</b></p><p>将客户所需资源发送到浏览</p><p>&nbsp;</p><h2><b>调用方式：</b></h2><p>我们知道，在servlet中调用转发、重定向的语句如下：</p><p>request.getRequestDispatcher(\"new.jsp\").forward(request, response);&nbsp;&nbsp; //转发到new.jsp</p><p>response.sendRedirect(\"new.jsp\");&nbsp;&nbsp; //重定向到new.jsp</p><p>在jsp页面中你也会看到通过下面的方式实现转发：</p><p><jsp:forward page=\"apage.jsp\"></jsp:forward></p><p>当然也可以在jsp页面中实现重定向：</p><p>&lt;%response.sendRedirect(\"new.jsp\"); %&gt;&nbsp;//重定向到new.jsp</p><p>&nbsp;</p><div>&nbsp; &nbsp;<strong>&nbsp;&nbsp;1.重定向：</strong></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1).response.sendRedirect(url);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2).response.setState(302);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response.setHeader(\"location\",url);</div><div><strong>&nbsp; &nbsp; &nbsp;2.转发：</strong></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1).request.getRequestDispatcher(url).forward(request,response);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2).request.getRequestDispatcher(url).include(request,response);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3).<jsp:forward page=\"url\"></jsp:forward></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 16:03:08', '2018-11-25 20:47:10', 4, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (18, 'Java中File类的使用', NULL, '<h2>一、File类常用API介绍</h2><p>内容见代码和注释</p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.io.File;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.io.IOException;</li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">/*</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;WellsLiu</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//1.创建一个文件夹对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;File(<span class=\"string\">\"F:\\\\桌面\\\\music\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//判断文件是否存在</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.exists());<span class=\"comment\">//true</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//如果文件夹不存在创建之,否则删除之</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(!file.exists())</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.mkdir();<span class=\"comment\">//创建文件夹</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//else&nbsp;</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//file.delete();</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//是否是一个目录</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.isDirectory());<span class=\"comment\">//true</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//是否是一个文件</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.isFile());<span class=\"comment\">//false</span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//2.创建一个文件对象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file2&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;File(<span class=\"string\">\"F:\\\\桌面\\\\music\\\\1.mp3\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.exists());</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//如果文件不存在创建之，否则删除&nbsp;&nbsp;&nbsp;之</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(file2.exists())</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">try</span>&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file2.createNewFile();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//else&nbsp;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//file2.delete();</span></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//3.常用的File对象API</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file);<span class=\"comment\">//file.toString()的内容，F:\\桌面\\music</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.getAbsolutePath());<span class=\"comment\">//file的绝对路径F:\\桌面\\music</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.getName());<span class=\"comment\">//music</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file2.getName());<span class=\"comment\">//1.mp3</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file.getParent());<span class=\"comment\">//F:\\桌面</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">}</li></ol></div><p>&nbsp;</p><h2>二、遍历目录</h2><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.io.File;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.io.IOException;</li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">/*</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;WellsLiu</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"></li><li class=\"\"><span class=\"comment\">//列出File类一些常用操作比如过滤、遍历等操作</span></li><li class=\"alt\"><span class=\"keyword\">class</span>&nbsp;FileUtils&nbsp;{</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//列出指定目录下(包括子目录)的所有文件</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;listDirectory(File&nbsp;dir)&nbsp;<span class=\"keyword\">throws</span>&nbsp;IOException{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(!dir.exists())&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">throw</span>&nbsp;<span class=\"keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"string\">\"目录\"</span>+dir+<span class=\"string\">\"不存在\"</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(!dir.isDirectory())&nbsp;{&nbsp;<span class=\"comment\">//判断File类的对象是否为文件夹</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">throw</span>&nbsp;<span class=\"keyword\">new</span>&nbsp;IllegalArgumentException(dir+<span class=\"string\">\"不是目录\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span>/*</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1.输出dir目录下的一级文件夹和文件</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;[]&nbsp;filenames&nbsp;=&nbsp;dir.list();//返回的是字符串数组&nbsp;直接子名称</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;string&nbsp;:&nbsp;filenames)&nbsp;{</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(dir+\"\\\\\"+string);//dirstring是文件或文件夹名</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></li><li class=\"alt\"><span class=\"comment\">&nbsp; &nbsp; &nbsp; &nbsp; */</span></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//2.如果要遍历子目录下的目录及所有文件，就需要构造File对象做递归操作</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File[]&nbsp;files&nbsp;=&nbsp;dir.listFiles();<span class=\"comment\">//返回的是直接子目录(文件)的抽象</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(files!=<span class=\"keyword\">null</span>&amp;&amp;files.length&gt;<span class=\"number\">0</span>)&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>(File&nbsp;file:files)&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>(file.isDirectory())&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//递归</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listDirectory(file);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"keyword\">else</span>&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(file);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Test1&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">static</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"keyword\">throws</span>&nbsp;IOException{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileUtils.listDirectory(<span class=\"keyword\">new</span>&nbsp;File(\"C:\\\\Users\\\\Liu_Yanzhao\"));</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\">}</li></ol></div>', NULL, b'1', b'1', b'0', b'0', '2017-10-07 16:04:25', '2018-11-25 20:46:43', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (19, 'java中ImageIcon路径问题', NULL, '<h2><strong>一、问题</strong></h2><p>ImageIcon icon = new ImageIcon(\"logo.jpg\");</p><p>执行结果是icon无法显示</p><p>&nbsp;</p><h2><strong>二、解决</strong></h2><p>类中有如下调用：</p><p><span>ImageIcon icon = new ImageIcon(\"1.jpg\");</span></p><p>&nbsp;</p><p>很自然地认为当前类文件和图片在同一路径下即可。</p><p><span><strong>其实所谓的相对路径起点是工程的根目录，即project。</strong></span></p><p>这行代码执行时在project目录下查找名为a.gif的文件，结果当然是找不到。</p><p>要得到工程的相对路径可通过System.getProperty(\"user.dir\")得到。</p><p>对图片和对文件的查找应该是一致的，如new File()。</p><p>&nbsp;</p><p>1、假如你的工程根目录为：Project1</p><p>你的图片文件放在：Project1/src/images/1.jpg</p><p>所以正确的调用是（不要加Project1）：</p><p>ImageIcon icon = new ImageIcon(\"src/images/1.jpg\");</p><p>&nbsp;</p><p>2、假如你的工程根目录为：Project1</p><p>你的图片文件在：Project1/src/com.liuyanzhao/1.jpg</p><p>所以正确的调用是(<strong>com.liuyanzhao</strong>是包名)</p><p>ImageIcon icon = new ImageIcon(\"src/com/liuyanzhao/1.jpg\");</p><p>这行代码执行时在project/test目录下查找到了文件</p><p>&nbsp;</p><p><strong>总结起来就是一句话：所谓相对路径就是相对于工程根目录的位置^_^</strong></p><p>&nbsp;</p><h2>三、其他</h2><p>查看了一下ImageIcon的构造函数。</p><p>Public ImageIcon(String filename)//参数可以是绝对路径也可以是相对路径</p><p>Public ImageIcon(URL url)</p><p>&nbsp;</p><p>第一种构造不在赘述。</p><p>第二种通过URL来得到图片</p><p>URL url = getClass().getResource(\"a.gif\"); //当前编译后class文件所在目录查找</p><p>ImageIcon icon = new ImageIcon(url);</p><p>&nbsp;</p><p>ImageIcon支持GIF、JPG、PNG等格式。</p>', '123', b'1', b'1', b'0', b'0', '2017-10-07 16:05:55', '2018-11-25 20:46:27', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (20, 'SpringCloud 中使用 Eureka 和 Feign 实现增删改查', NULL, '<p>在没有接触微服务或者分布式项目之前，我们的项目时没有分层的，我们的服务也是没有分层的。</p><p>比如，我们有5台服务器使用 Nginx 做负载均衡，上面都是安装了我们的 Tomcat 服务器，部署的一样的项目。当用户访问某个请求的时候，按照负载均衡的机制(随机、轮询之类)来转发到对应的服务器上，然后在该服务器上先是到 Controller，然后 Service，再到 DAO，然后返回给 Service，返回给 Controller，最后返回给前台。似乎这样也行。</p><p>但是当我们网站访问量不断飙升的时候，似乎有点撑不住了，只能加服务器，成本也明显增加。我们能不能再分一分呢 ？</p><p>同时，我们发现真正比较耗费时间的是一些 IO 操作，比如数据库操作、上传文件之类的。为了方便开发，我们可以把 DAO 和 Service 层放在一起，暂且称为业务层。业务层耗费的远远大于 Controller 层的。我们可以在 5 台服务器中拿 1 台部署 Controller 层，另外 4 台部署业务层代码。</p><p>如果将他们连接起来呢？</p><p>Eureka + Feign！</p><p>Eureka 做注册中心，业务层和控制器层每一个实例可以作为一个服务，比如 UserService 是一个服务,UserController 也可以是一个服务，一个服务可以有多个状态(可以有多台机器注册到该服务)。</p><p>下面通过一个例子来讲解</p><p>&nbsp;</p><p>源码地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/spring-cloud-demo\">https://github.com/saysky/spring-cloud-demo</a></p><p>&nbsp;</p><h2>一、下载源码</h2><p>请上 Github 上下载本例子源码</p><p>源码地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/spring-cloud-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/saysky/spring-cloud-demo</a></p><p>&nbsp;</p><h2>二、项目结构</h2><p>注意这是三个项目(不是一个项目)，用 IDEA 打开分别打开三个项目，最终如图</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8631 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"595\" height=\"224\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-300x113.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-768x289.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-530x200.png 530w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40.png 1334w\" sizes=\"(max-width: 595px) 100vw, 595px\"></a></p><p>&nbsp;</p><p>1、eureka-server（一个 SpringBoot 项目）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8633 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"420\" height=\"262\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png 772w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server-300x187.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server-768x480.png 768w\" sizes=\"(max-width: 420px) 100vw, 420px\"></a></p><p>&nbsp;</p><p>&nbsp;</p><p>2、cloud (一个多模块项目，API + 业务层)&nbsp; &nbsp;<a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8632 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"418\" height=\"121\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png 574w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2-300x87.png 300w\" sizes=\"(max-width: 418px) 100vw, 418px\"></a></p><p>&nbsp;</p><p>&nbsp;</p><p>（1）其中 cloud-api 是 api，里面有 model 和 service接口，cloud-core 和 cloud-web 将依赖它</p><p>到时候需要首先将该模块 install，即打包到本地仓库中</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8634 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"463\" height=\"414\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png 672w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/api-300x269.png 300w\" sizes=\"(max-width: 463px) 100vw, 463px\"></a></p><p>&nbsp;</p><p>（2）其中 cloud-core，里面 dao 和 serviceImpl，作为生产者的存在</p><p>启动类在这里面</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8635 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"439\" height=\"460\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png 800w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/core-286x300.png 286w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/core-768x804.png 768w\" sizes=\"(max-width: 439px) 100vw, 439px\"></a></p><p>&nbsp;</p><p>3、cloud-web( 一个 SpringBoot 项目)</p><p>只有控制器层，需要依赖 cloud-api ，作为消费者的存在(可以是其他人调用)</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8636 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"439\" height=\"359\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png 746w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web-300x245.png 300w\" sizes=\"(max-width: 439px) 100vw, 439px\"></a></p><p>&nbsp;</p><h2>三、如何启动</h2><p>1、新建数据库 summer，导入 user.sql</p><p>2、导入新项目，先后顺序随便(如eureka-server、cloud、cloud-web)</p><p>3、启动 eureka-server 项目，端口为 8761</p><p>4、对 cloud 项目中的 cloud-api 模块进行install，maven命令是 mvn clean install</p><p>5、启动 cloud-core 项目，端口为 8090</p><p>6、（可选）其实这时候我们可以在地址栏访问一下 localhost:8090/user 其实是可以访问的，如果你不行，说明有问题</p><p>7、启动 cloud-web 项目，端口为 8080</p><p>8、在地址栏访问 localhost:8080/user，如果可以看到数据，说明成功</p><p>&nbsp;</p><h2>四、补充</h2><p>1、我这里模拟了四台注册了业务层服务(cloud-producer) 和 一台控制器层服务(cloud-consumer)</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8637 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"644\" height=\"412\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-300x192.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-768x491.png 768w\" sizes=\"(max-width: 644px) 100vw, 644px\"></a></p><p>ps：因为我是用本机测试，所以开了不同的端口表示不同的服务器</p><p>&nbsp;</p><p>2、访问控制器层，然后 Feign 会帮我们在注册中心中找到对应的服务名和对应的方法</p><p>我们访问 localhost:8080/user/1 首先到的是控制器层，控制器层调用 userService，userService 是 Cloud-API 里的，添加了 @FeignClient(name=\"cloud-producer\") 注解，然后找到在注册中心中寻找 cloud-producer 的服务，从一台(负载均衡)服务器中找到 userService 的实现类，即 userServiceImpl，也就是进入了 cloud-core，然后完成一系列 DAO 和 Service 操作，最后返回给 Controller。</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8638 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"625\" height=\"415\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-300x199.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-768x510.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080.png 1148w\" sizes=\"(max-width: 625px) 100vw, 625px\"></a></p><p>其中 Service 和 Service 的实现都需要加 RequestMapping，Service 实现需要加 @RestController，否则会出现 404</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8639 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"627\" height=\"228\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-300x109.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-768x280.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api.png 1538w\" sizes=\"(max-width: 627px) 100vw, 627px\"></a></p><p>所以，其实我们可以直接访问 cloud-core 这一层，在地址栏访问 localhost:8090/user/1</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8640 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"497\" height=\"383\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png 784w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2-300x231.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2-768x592.png 768w\" sizes=\"(max-width: 497px) 100vw, 497px\"></a></p><p>&nbsp;</p><p>事实上，我们访问 控制器的时候，当需要某个 Service 的时候，Feign 帮我们向 Service 又发了一个同样的请求。我们可以直接访问这个 Service 请求</p><p>但是，通常我们会在生产环境中，不让别人直接访问到 Service，可以通过一些机制实现，比如内网啦。</p><p>&nbsp;</p><h2>六、学习过程中遇到的问题</h2><p>1、cloud-web 中注入 userService，一直注入失败，无法扫描到 userServiceImpl</p><p>解决方案：在 cloud-web 启动类上添加</p><p>@EnableFeignClients(basePackages = \"com.liuyanzhao.cloud\")</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8641 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"566\" height=\"159\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-300x84.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-768x216.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22.png 1572w\" sizes=\"(max-width: 566px) 100vw, 566px\"></a></p><p>&nbsp;</p><p>2、出现 404 错误</p><p>cloud-core 里的 userServiceImpl 也需要加 @RequestMapping，并且需要将 @Service 改成 @RestController</p><p>&nbsp;</p><p>UserService（cloud-api）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8643 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"615\" height=\"363\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-300x177.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-768x454.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23.png 1334w\" sizes=\"(max-width: 615px) 100vw, 615px\"></a></p><p>&nbsp;</p><p>UserServiceImpl（cloud-core）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8642 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"623\" height=\"278\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-300x134.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-768x343.png 768w\" sizes=\"(max-width: 623px) 100vw, 623px\"></a></p><p>&nbsp;</p>', '在没有接触微服务或者分布式项目之前，我们的项目时没有分层的，我们的服务也是没有分层的。比如，我们有5台服务器使用 Nginx 做负载均衡，上面都是安装了我们的 Tomcat 服务器，部署的一样的项目。当用户访问某个请求的时候，按照负载均衡的机制(随机、轮询之类)来转发到对应的服务器上，然后在该服务器', b'1', b'1', b'0', b'0', '2018-11-25 20:56:50', '2019-04-25 21:43:14', 3, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (21, '是是是搜索', NULL, '是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是是', NULL, b'0', b'1', b'0', b'0', '2018-11-25 16:47:05', '2018-11-25 23:56:08', 1, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (22, 'SpringCloud 中使用 Eureka 和 Feign 实现增删改查', NULL, '<p>在没有接触微服务或者分布式项目之前，我们的项目时没有分层的，我们的服务也是没有分层的。</p><p>比如，我们有5台服务器使用 Nginx 做负载均衡，上面都是安装了我们的 Tomcat 服务器，部署的一样的项目。当用户访问某个请求的时候，按照负载均衡的机制(随机、轮询之类)来转发到对应的服务器上，然后在该服务器上先是到 Controller，然后 Service，再到 DAO，然后返回给 Service，返回给 Controller，最后返回给前台。似乎这样也行。</p><p>但是当我们网站访问量不断飙升的时候，似乎有点撑不住了，只能加服务器，成本也明显增加。我们能不能再分一分呢 ？</p><p>同时，我们发现真正比较耗费时间的是一些 IO 操作，比如数据库操作、上传文件之类的。为了方便开发，我们可以把 DAO 和 Service 层放在一起，暂且称为业务层。业务层耗费的远远大于 Controller 层的。我们可以在 5 台服务器中拿 1 台部署 Controller 层，另外 4 台部署业务层代码。</p><p>如果将他们连接起来呢？</p><p>Eureka + Feign！</p><p>Eureka 做注册中心，业务层和控制器层每一个实例可以作为一个服务，比如 UserService 是一个服务,UserController 也可以是一个服务，一个服务可以有多个状态(可以有多台机器注册到该服务)。</p><p>下面通过一个例子来讲解</p><p>&nbsp;</p><p>源码地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/spring-cloud-demo\">https://github.com/saysky/spring-cloud-demo</a></p><p>&nbsp;</p><h2>一、下载源码</h2><p>请上 Github 上下载本例子源码</p><p>源码地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/spring-cloud-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/saysky/spring-cloud-demo</a></p><p>&nbsp;</p><h2>二、项目结构</h2><p>注意这是三个项目(不是一个项目)，用 IDEA 打开分别打开三个项目，最终如图</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8631 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"595\" height=\"224\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-1024x385.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-300x113.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-768x289.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40-530x200.png 530w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/springcloud40.png 1334w\" sizes=\"(max-width: 595px) 100vw, 595px\"></a></p><p>&nbsp;</p><p>1、eureka-server（一个 SpringBoot 项目）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8633 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"420\" height=\"262\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server.png 772w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server-300x187.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/eureka-server-768x480.png 768w\" sizes=\"(max-width: 420px) 100vw, 420px\"></a></p><p>&nbsp;</p><p>&nbsp;</p><p>2、cloud (一个多模块项目，API + 业务层)&nbsp; &nbsp;<a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8632 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"418\" height=\"121\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2.png 574w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud2-300x87.png 300w\" sizes=\"(max-width: 418px) 100vw, 418px\"></a></p><p>&nbsp;</p><p>&nbsp;</p><p>（1）其中 cloud-api 是 api，里面有 model 和 service接口，cloud-core 和 cloud-web 将依赖它</p><p>到时候需要首先将该模块 install，即打包到本地仓库中</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8634 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"463\" height=\"414\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/api.png 672w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/api-300x269.png 300w\" sizes=\"(max-width: 463px) 100vw, 463px\"></a></p><p>&nbsp;</p><p>（2）其中 cloud-core，里面 dao 和 serviceImpl，作为生产者的存在</p><p>启动类在这里面</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8635 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"439\" height=\"460\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/core.png 800w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/core-286x300.png 286w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/core-768x804.png 768w\" sizes=\"(max-width: 439px) 100vw, 439px\"></a></p><p>&nbsp;</p><p>3、cloud-web( 一个 SpringBoot 项目)</p><p>只有控制器层，需要依赖 cloud-api ，作为消费者的存在(可以是其他人调用)</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8636 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"439\" height=\"359\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web.png 746w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-web-300x245.png 300w\" sizes=\"(max-width: 439px) 100vw, 439px\"></a></p><p>&nbsp;</p><h2>三、如何启动</h2><p>1、新建数据库 summer，导入 user.sql</p><p>2、导入新项目，先后顺序随便(如eureka-server、cloud、cloud-web)</p><p>3、启动 eureka-server 项目，端口为 8761</p><p>4、对 cloud 项目中的 cloud-api 模块进行install，maven命令是 mvn clean install</p><p>5、启动 cloud-core 项目，端口为 8090</p><p>6、（可选）其实这时候我们可以在地址栏访问一下 localhost:8090/user 其实是可以访问的，如果你不行，说明有问题</p><p>7、启动 cloud-web 项目，端口为 8080</p><p>8、在地址栏访问 localhost:8080/user，如果可以看到数据，说明成功</p><p>&nbsp;</p><h2>四、补充</h2><p>1、我这里模拟了四台注册了业务层服务(cloud-producer) 和 一台控制器层服务(cloud-consumer)</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8637 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"644\" height=\"412\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-1024x655.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-300x192.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/server-768x491.png 768w\" sizes=\"(max-width: 644px) 100vw, 644px\"></a></p><p>ps：因为我是用本机测试，所以开了不同的端口表示不同的服务器</p><p>&nbsp;</p><p>2、访问控制器层，然后 Feign 会帮我们在注册中心中找到对应的服务名和对应的方法</p><p>我们访问 localhost:8080/user/1 首先到的是控制器层，控制器层调用 userService，userService 是 Cloud-API 里的，添加了 @FeignClient(name=\"cloud-producer\") 注解，然后找到在注册中心中寻找 cloud-producer 的服务，从一台(负载均衡)服务器中找到 userService 的实现类，即 userServiceImpl，也就是进入了 cloud-core，然后完成一系列 DAO 和 Service 操作，最后返回给 Controller。</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8638 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"625\" height=\"415\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-1024x680.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-300x199.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080-768x510.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/8080.png 1148w\" sizes=\"(max-width: 625px) 100vw, 625px\"></a></p><p>其中 Service 和 Service 的实现都需要加 RequestMapping，Service 实现需要加 @RestController，否则会出现 404</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8639 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"627\" height=\"228\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-1024x373.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-300x109.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api-768x280.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api.png 1538w\" sizes=\"(max-width: 627px) 100vw, 627px\"></a></p><p>所以，其实我们可以直接访问 cloud-core 这一层，在地址栏访问 localhost:8090/user/1</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8640 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"497\" height=\"383\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2.png 784w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2-300x231.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud-api2-768x592.png 768w\" sizes=\"(max-width: 497px) 100vw, 497px\"></a></p><p>&nbsp;</p><p>事实上，我们访问 控制器的时候，当需要某个 Service 的时候，Feign 帮我们向 Service 又发了一个同样的请求。我们可以直接访问这个 Service 请求</p><p>但是，通常我们会在生产环境中，不让别人直接访问到 Service，可以通过一些机制实现，比如内网啦。</p><p>&nbsp;</p><h2>六、学习过程中遇到的问题</h2><p>1、cloud-web 中注入 userService，一直注入失败，无法扫描到 userServiceImpl</p><p>解决方案：在 cloud-web 启动类上添加</p><p>@EnableFeignClients(basePackages = \"com.liuyanzhao.cloud\")</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8641 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"566\" height=\"159\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-1024x288.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-300x84.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22-768x216.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/cloud22.png 1572w\" sizes=\"(max-width: 566px) 100vw, 566px\"></a></p><p>&nbsp;</p><p>2、出现 404 错误</p><p>cloud-core 里的 userServiceImpl 也需要加 @RequestMapping，并且需要将 @Service 改成 @RestController</p><p>&nbsp;</p><p>UserService（cloud-api）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8643 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"615\" height=\"363\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-1024x605.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-300x177.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23-768x454.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user23.png 1334w\" sizes=\"(max-width: 615px) 100vw, 615px\"></a></p><p>&nbsp;</p><p>UserServiceImpl（cloud-core）</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8642 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png\" alt=\"SpringCloud 中使用 Eureka 和 Feign 实现增删改查\" width=\"623\" height=\"278\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-1024x457.png 1024w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-300x134.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/07/user22-768x343.png 768w\" sizes=\"(max-width: 623px) 100vw, 623px\"></a></p><p>&nbsp;</p>', '在没有接触微服务或者分布式项目之前，我们的项目时没有分层的，我们的服务也是没有分层的。比如，我们有5台服务器使用 Nginx 做负载均衡，上面都是安装了我们的 Tomcat 服务器，部署的一样的项目。当用户访问某个请求的时候，按照负载均衡的机制(随机、轮询之类)来转发到对应的服务器上，然后在该服务器', b'1', b'1', b'0', b'0', '2018-11-25 20:58:22', '2019-04-25 21:43:11', 2, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (23, 'IDEA启动EDAS项目', NULL, '<h2>一、下载EDAS配置中心</h2><p>这个有点像我们SpringCloud里的Eurake注册中心</p><p>下载地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/LCC/2018-11-01/edas-lite-configcenter.tar.gz?spm=a2c4g.11186623.2.14.1c1d4423eoGWQQ&amp;file=edas-lite-configcenter.tar.gz\" target=\"_blank\" rel=\"noopener noreferrer\">点此</a></p><p>官网地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://help.aliyun.com/document_detail/44163.html?spm=a2c4g.11186623.6.675.71d822b8fWyaNi\" target=\"_blank\" rel=\"noopener noreferrer\">点此</a></p><p>启动 edas配置中心：windows下点击 edas-lite-configcenter/bin 中的 startup.bat</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/edas-startup.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8903 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/edas-startup.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/edas-startup.png\" alt=\"IDEA启动EDAS项目\" width=\"333\" height=\"90\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/edas-startup.png 551w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/edas-startup-300x81.png 300w\" sizes=\"(max-width: 333px) 100vw, 333px\"></a></p><p>默认启动在 8080 端口</p><p>&nbsp;</p><h2>二、安装 Ali-Tomcat 和 Pandora</h2><p>1、下载&nbsp;<a title=\"Ali-Tomcat\" href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/tomcat/taobao-tomcat-7.0.59.tgz\">Ali-Tomcat</a>，保存后解压至相应的目录（如：d:\\work\\tomcat\\）。</p><p>&nbsp;</p><p>2、下载&nbsp;<a title=\"Pandora 容器\" href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/pandora/unauth/taobao-hsf.tgz\">Pandora 容器</a>，保存后将内容解压至上述保存的 Ali-Tomcat 的 deploy 目录(d:\\work\\tomcat\\deploy)下。</p><p>下载后是两个文件夹</p><p><img class=\"size-full wp-image-8902 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/QQ截图20181106100740.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/QQ%E6%88%AA%E5%9B%BE20181106100740.png\" alt=\"IDEA启动EDAS项目\" width=\"229\" height=\"60\"></p><p>&nbsp;</p><p>&nbsp;</p><p>解压后，将 taobao-haf 放到&nbsp;taobao-tomcat-7.0.59/deploy 里面</p><p>&nbsp;</p><p>比如我们有三个服务，分别是A、B、C</p><p>我们建立三个文件夹，分别是A、B 和 C，每个文件夹里都拷贝一份上面的&nbsp;taobao-tomcat-7.0.59</p><p>&nbsp;</p><h2>三、IDEA 配置 Tomcat</h2><p>1、创建三个Tomcat</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8905 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server.png\" alt=\"IDEA启动EDAS项目\" width=\"651\" height=\"473\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server.png 824w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server-300x218.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server-768x557.png 768w\" sizes=\"(max-width: 651px) 100vw, 651px\"></a></p><p>指定启动的端口，VM options里填写对应的 Tomcat 的启动参数</p><p>D:\\EDAS\\A\\taobao-tomcat-7.0.59\\deploy\\taobao-hsf.sar</p><p>&nbsp;</p><p>2、在Deployment里选择对应的项目</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8906 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2.png\" alt=\"IDEA启动EDAS项目\" width=\"641\" height=\"481\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2.png 801w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2-300x225.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2-768x576.png 768w, https://media.liuyanzhao.com/wp-content/uploads/2018/11/tomcat-server2-280x210.png 280w\" sizes=\"(max-width: 641px) 100vw, 641px\"></a></p><p>&nbsp;</p><p>然后依次启动几个项目就行了</p><p>&nbsp;</p><p>官方文档：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://help.aliyun.com/product/29500.html?spm=a2c4g.11186623.6.540.102bb8e7ETwPNH\" target=\"_blank\" rel=\"noopener noreferrer\">https://help.aliyun.com/product/29500.html?spm=a2c4g.11186623.6.540.102bb8e7ETwPNH</a></p><p>&nbsp;</p>', '一、下载EDAS配置中心这个有点像我们SpringCloud里的Eurake注册中心下载地址：点此官网地址：点此启动 edas配置中心：windows下点击 edas-lite-configcenter/bin 中的 startup.bat默认启动在 8080 端口&nbsp;二、安装 Ali-To', b'1', b'1', b'0', b'0', '2018-11-25 21:00:24', '2019-04-25 21:43:08', 8, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (24, 'SpringBoot + mongodb 整合, 记录网站操作日志，常用查询操作', NULL, '<div class=\"single-content\"><p>mongodb 是一种文档型数据库。跟 Redis 一样是非关系型数据库，Redis 属于那种小而快的数据库，常常用作缓存。</p><p>而如果我们需要存一些类似于日志的那种，可以尝试用 mongodb (当然也有人用 MySQL，就是有点慢)。我们尝试用 mongodb 来存储博客的日志信息。</p><p>本文主要介绍&nbsp;<a href=\"https://liuyanzhao.com/tag/springboot/\" title=\"查看与 SpringBoot 相关的文章\" target=\"_blank\">SpringBoot</a>&nbsp;和 mongodb 整合，和基本的查询操作。</p><p>&nbsp;</p><h2>一、依赖和配置</h2><p>创建 springboot 项目，引入 web 和 lombok，然后再添加 mongodb 依赖</p><p><strong>1、pom.xml</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-xml\" start=\"1\"><li class=\"alt\"><span class=\"comments\"><!--mongodb--></span></li><li class=\"\"><span class=\"tag\">&lt;</span><span class=\"tag-name\">dependency</span><span class=\"tag\">&gt;</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">groupId</span><span class=\"tag\">&gt;</span>org.springframework.boot<span class=\"tag\"><!--</span--><span class=\"tag-name\">groupId</span><span class=\"tag\">&gt;</span></span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"tag\">&lt;</span><span class=\"tag-name\">artifactId</span><span class=\"tag\">&gt;</span>spring-boot-starter-data-mongodb<span class=\"tag\"><!--</span--><span class=\"tag-name\">artifactId</span><span class=\"tag\">&gt;</span></span></li><li class=\"alt\"><span class=\"tag\"><!--</span--><span class=\"tag-name\">dependency</span><span class=\"tag\">&gt;</span></span></li></ol></div><p>类似 Spring Data JPA</p><p>&nbsp;</p><p><strong>2、application.properties</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\">spring.data.mongodb.uri=mongodb:<span class=\"comment\">//localhost:27017/saysky</span></li></ol></div><p>saysky是数据库名称，确保你本地启动了 mongodb</p><p>&nbsp;</p><h2>二、代码实例</h2><p><strong>1、日志实体</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mongodb.model;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;lombok.Data;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;日志</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;言曌</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@date&nbsp;2018/9/3&nbsp;20:00</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"\"><span class=\"annotation\">@Data</span></li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;Log&nbsp;{</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Long&nbsp;id;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Long&nbsp;userId;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Integer&nbsp;type;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;url;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;String&nbsp;desc;</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;Date&nbsp;createTime;</li><li class=\"\">}</li></ol></div><p>&nbsp;</p><p><strong>2、LogRepository</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mongodb.dao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;com.liuyanzhao.mongodb.model.Log;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.springframework.data.domain.Page;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.springframework.data.domain.Pageable;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.springframework.data.mongodb.repository.MongoRepository;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.springframework.stereotype.Repository;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.util.List;</li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;言曌</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;@date&nbsp;2018/9/3&nbsp;14:17</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"annotation\">@Repository</span></li><li class=\"\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">interface</span>&nbsp;LogRepository&nbsp;<span class=\"keyword\">extends</span>&nbsp; <log, long>&nbsp;{</log, long></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/**</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据用户ID查询</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;userId</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;List<log>&nbsp;findByUserId(Long&nbsp;userId);</log></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据描述查询</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;desc</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;List<log>&nbsp;findByDesc(String&nbsp;desc);</log></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/**</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据创建日期范围查询</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;startTime</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;endTime</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;List<log>&nbsp;findByCreateTimeBetween(Date&nbsp;startTime,&nbsp;Date&nbsp;endTime);</log></li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据描述查询</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;分页查询</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;desc</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;Page<log>&nbsp;findByDesc(String&nbsp;desc,&nbsp;Pageable&nbsp;pageable);</log></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据创建日期范围查询</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;分页查询</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;startTime</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;endTime</span></li><li class=\"\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;Page<log>&nbsp;findByCreateTimeBetween(Date&nbsp;startTime,&nbsp;Date&nbsp;endTime,Pageable&nbsp;pageable);</log></li><li class=\"alt\"></li><li class=\"\">}</li></ol></div><p>&nbsp;</p><p><strong>3、测试类</strong></p><div class=\"dp-highlighter\"><div class=\"bar\"></div><ol class=\"dp-j\" start=\"1\"><li class=\"alt\"><span class=\"keyword\">package</span>&nbsp;com.liuyanzhao.mongodb.dao;</li><li class=\"\"></li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;com.liuyanzhao.mongodb.model.Log;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.junit.Test;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.junit.runner.RunWith;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.springframework.beans.factory.annotation.Autowired;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.springframework.boot.test.context.<a href=\"https://liuyanzhao.com/tag/springboot/\" title=\"查看与 SpringBoot 相关的文章\" target=\"_blank\">SpringBoot</a>Test;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.springframework.data.domain.Page;</li><li class=\"alt\"><span class=\"keyword\">import</span>&nbsp;org.springframework.data.domain.PageRequest;</li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;org.springframework.test.context.junit4.SpringRunner;</li><li class=\"alt\"></li><li class=\"\"><span class=\"keyword\">import</span>&nbsp;java.util.Date;</li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\"><span class=\"comment\">/**</span></li><li class=\"\"><span class=\"comment\">&nbsp;*&nbsp;@author&nbsp;言曌</span></li><li class=\"alt\"><span class=\"comment\">&nbsp;*&nbsp;@date&nbsp;2018/9/3&nbsp;14:21</span></li><li class=\"\"><span class=\"comment\">&nbsp;*/</span></li><li class=\"alt\"><span class=\"annotation\">@<a href=\"https://liuyanzhao.com/tag/springboot/\" title=\"查看与 SpringBoot 相关的文章\" target=\"_blank\">SpringBoot</a>Test</span></li><li class=\"\"><span class=\"annotation\">@RunWith</span>(SpringRunner.<span class=\"keyword\">class</span>)</li><li class=\"alt\"><span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">class</span>&nbsp;LogRepositoryTest&nbsp;{</li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Autowired</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">private</span>&nbsp;LogRepository&nbsp;logRepository;</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Test</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;save()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log&nbsp;log&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Log();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setId(7L);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setType(<span class=\"number\">1</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setDesc(<span class=\"string\">\"更新用户\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setUserId(10002L);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setUrl(<span class=\"string\">\"/user/update\"</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.setCreateTime(<span class=\"keyword\">new</span>&nbsp;Date());</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logRepository.save(log);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Test</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;findById()&nbsp;{</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log&nbsp;Log&nbsp;=&nbsp;logRepository.findById(1L).get();</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Log);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Test</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;findByDes()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//不分页</span></li><li class=\"\"><span class=\"comment\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<log>&nbsp;LogList&nbsp;=&nbsp;logRepository.findByDesc(\"添加用户\");</log></span></li><li class=\"alt\"><span class=\"comment\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(LogList);</span></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//分页查询</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//查询第1页，每页显示2条</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PageRequest&nbsp;pageRequest&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;PageRequest(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page<log>&nbsp;logPage&nbsp;=&nbsp;logRepository.findByDesc(<span class=\"string\">\"添加用户\"</span>,pageRequest);</log></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(logPage);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"alt\"></li><li class=\"\"></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\">@Test</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">public</span>&nbsp;<span class=\"keyword\">void</span>&nbsp;findByCreateTimeBetween()&nbsp;{</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//根据时间区间查询</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//不分页</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;createdAtStart&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Date(1535974057016L);</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;createdAtEnd&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;Date(1535974145009L);</li><li class=\"alt\"><span class=\"comment\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<log>&nbsp;LogList&nbsp;=&nbsp;logRepository.findByCreateTimeBetween(createdAtStart,createdAtEnd);</log></span></li><li class=\"\"><span class=\"comment\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(LogList);</span></li><li class=\"alt\"></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//分页查询</span></li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">//查询第1页，每页显示2条</span></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PageRequest&nbsp;pageRequest&nbsp;=&nbsp;<span class=\"keyword\">new</span>&nbsp;PageRequest(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page<log>&nbsp;logPage&nbsp;=&nbsp;logRepository.findByCreateTimeBetween(createdAtStart,createdAtEnd,pageRequest);</log></li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(logPage);</li><li class=\"alt\">&nbsp;&nbsp;&nbsp;&nbsp;}</li><li class=\"\"></li><li class=\"alt\">}</li></ol></div><p>&nbsp;</p><p>我们通过mongodb可视化工具可以看到数据</p><p><a href=\"https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb.png\" class=\"fancybox\" data-fancybox-group=\"button\"><img class=\"wp-image-8733 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb.png\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb.png\" alt=\"SpringBoot + mongodb 整合, 记录网站操作日志，常用查询操作\" width=\"618\" height=\"320\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb.png 858w, https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb-300x155.png 300w, https://media.liuyanzhao.com/wp-content/uploads/2018/09/mongodb-768x397.png 768w\" sizes=\"(max-width: 618px) 100vw, 618px\"></a></p><p>&nbsp;</p><h2>三、更多查询</h2><p>因为引入的&nbsp;MongoRepository 是一种 JPA 框架，所以增删改查都很容易。</p><p>可以参考 Spring Data JPA 方法命名规范</p><p></p><p></p><p></p><p></p></div><div class=\"s-weixin\"><ul class=\"weimg1\" style=\"text-align: center;\"></ul></div>', 'mongodb 是一种文档型数据库。跟 Redis 一样是非关系型数据库，Redis 属于那种小而快的数据库，常常用作缓存。而如果我们需要存一些类似于日志的那种，可以尝试用 mongodb (当然也有人用 MySQL，就是有点慢)。我们尝试用 mongodb 来存储博客的日志信息。本文主要介绍&nb', b'1', b'1', b'0', b'0', '2018-11-25 21:01:24', '2019-04-25 21:43:06', 22, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (25, 'RocketMQ 实战之快速入门', NULL, '<div><p>最近 RocketMQ 刚刚上生产环境，闲暇之时在这里做一些分享，主要目的是让初学者能快速上手RocketMQ。</p>\r\n<h2>RocketMQ 是什么</h2>\r\n<p>Github 上关于 RocketMQ 的介绍：<br>\r\nRcoketMQ 是一款低延迟、高可靠、可伸缩、易于使用的消息中间件。具有以下特性：</p>\r\n<ol>\r\n<li>支持发布/订阅（Pub/Sub）和点对点（P2P）消息模型</li>\r\n<li>在一个队列中可靠的先进先出（FIFO）和严格的顺序传递</li>\r\n<li>支持拉（pull）和推（push）两种消息模式</li>\r\n<li>单一队列百万消息的堆积能力</li>\r\n<li>支持多种消息协议，如 JMS、MQTT 等</li>\r\n<li>分布式高可用的部署架构,满足至少一次消息传递语义</li>\r\n<li>提供 docker 镜像用于隔离测试和云集群部署</li>\r\n<li>提供配置、指标和监控等功能丰富的 Dashboard</li>\r\n</ol>\r\n<p>对于这些特性描述，大家简单过一眼就即可，深入学习之后自然就明白了。</p>\r\n<h2>专业术语</h2>\r\n<h3>Producer</h3>\r\n<p>消息生产者，生产者的作用就是将消息发送到 MQ，生产者本身既可以产生消息，如读取文本信息等。也可以对外提供接口，由外部应用来调用接口，再由生产者将收到的消息发送到 MQ。</p>\r\n<h3>Producer Group</h3>\r\n<p>生产者组，简单来说就是多个发送同一类消息的生产者称之为一个生产者组。在这里可以不用关心，只要知道有这么一个概念即可。</p>\r\n<h3>Consumer</h3>\r\n<p>消息消费者，简单来说，消费 MQ 上的消息的应用程序就是消费者，至于消息是否进行逻辑处理，还是直接存储到数据库等取决于业务需要。</p>\r\n<h3>Consumer Group</h3>\r\n<p>消费者组，和生产者类似，消费同一类消息的多个 consumer 实例组成一个消费者组。</p>\r\n<h3>Topic</h3>\r\n<p>Topic 是一种消息的逻辑分类，比如说你有订单类的消息，也有库存类的消息，那么就需要进行分类，一个是订单 Topic 存放订单相关的消息，一个是库存 Topic 存储库存相关的消息。</p>\r\n<h3>Message</h3>\r\n<p>Message 是消息的载体。一个 Message 必须指定 topic，相当于寄信的地址。Message 还有一个可选的 tag 设置，以便消费端可以基于 tag 进行过滤消息。也可以添加额外的键值对，例如你需要一个业务 key 来查找 broker 上的消息，方便在开发过程中诊断问题。</p>\r\n<h3>Tag</h3>\r\n<p>标签可以被认为是对 Topic 进一步细化。一般在相同业务模块中通过引入标签来标记不同用途的消息。</p>\r\n<h3>Broker</h3>\r\n<p>Broker 是 RocketMQ 系统的主要角色，其实就是前面一直说的 MQ。Broker 接收来自生产者的消息，储存以及为消费者拉取消息的请求做好准备。</p>\r\n<h3>Name Server</h3>\r\n<p>Name Server 为 producer 和 consumer 提供路由信息。</p>\r\n<h2>RocketMQ 架构</h2>\r\n<div class=\"image-package\">\r\n<div class=\"image-container\">\r\n<div class=\"image-container-fill\"></div>\r\n<div class=\"image-view\" data-width=\"975\" data-height=\"434\"><img data-original-src=\"//upload-images.jianshu.io/upload_images/6332814-7885601f065a3556.png\" data-original-width=\"975\" data-original-height=\"434\" data-original-format=\"image/png\" data-original-filesize=\"69606\" class=\"\" src=\"//upload-images.jianshu.io/upload_images/6332814-7885601f065a3556.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/975/format/webp\"></div>\r\n</div>\r\n<div class=\"image-caption\">RocketMQ 架构</div>\r\n</div>\r\n<p>由这张图可以看到有四个集群，分别是 NameServer 集群、Broker 集群、Producer 集群和 Consumer 集群：</p>\r\n<ol>\r\n<li>NameServer: 提供轻量级的服务发现和路由。 每个 NameServer 记录完整的路由信息，提供等效的读写服务，并支持快速存储扩展。</li>\r\n<li>Broker: 通过提供轻量级的 Topic 和 Queue 机制来处理消息存储,同时支持推（push）和拉（pull）模式以及主从结构的容错机制。</li>\r\n<li>Producer：生产者，产生消息的实例，拥有相同 Producer Group 的 Producer 组成一个集群。</li>\r\n<li>Consumer：消费者，接收消息进行消费的实例，拥有相同 Consumer Group 的<br>\r\nConsumer 组成一个集群。</li>\r\n</ol>\r\n<p>简单说明一下图中箭头含义，从 Broker 开始，Broker Master1 和 Broker Slave1 是主从结构，它们之间会进行数据同步，即 Date Sync。同时每个 Broker 与<br>\r\nNameServer 集群中的所有节<br>\r\n点建立长连接，定时注册 Topic 信息到所有 NameServer 中。</p>\r\n<p>Producer 与 NameServer 集群中的其中一个节点（随机选择）建立长连接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Broker Master 建立长连接，且定时向 Broker 发送心跳。Producer 只能将消息发送到 Broker master，但是 Consumer 则不一样，它同时和提供 Topic 服务的 Master 和 Slave<br>\r\n建立长连接，既可以从 Broker Master 订阅消息，也可以从 Broker Slave 订阅消息。</p>\r\n<h2>RocketMQ 集群部署模式</h2>\r\n<ol>\r\n<li>单 master 模式<br>\r\n也就是只有一个 master 节点，称不上是集群，一旦这个 master 节点宕机，那么整个服务就不可用，适合个人学习使用。</li>\r\n<li>多 master 模式<br>\r\n多个 master 节点组成集群，单个 master 节点宕机或者重启对应用没有影响。<br>\r\n优点：所有模式中性能最高<br>\r\n缺点：单个 master 节点宕机期间，未被消费的消息在节点恢复之前不可用，消息的实时性就受到影响。<br>\r\n<strong>注意</strong>：使用同步刷盘可以保证消息不丢失，同时 Topic 相对应的 queue 应该分布在集群中各个节点，而不是只在某各节点上，否则，该节点宕机会对订阅该 topic 的应用造成影响。</li>\r\n<li>多 master 多 slave 异步复制模式<br>\r\n在多 master 模式的基础上，每个 master 节点都有至少一个对应的 slave。master<br>\r\n节点可读可写，但是 slave 只能读不能写，类似于 mysql 的主备模式。<br>\r\n优点： 在 master 宕机时，消费者可以从 slave 读取消息，消息的实时性不会受影响，性能几乎和多 master 一样。<br>\r\n缺点：使用异步复制的同步方式有可能会有消息丢失的问题。</li>\r\n<li>多 master 多 slave 同步双写模式<br>\r\n同多 master 多 slave 异步复制模式类似，区别在于 master 和 slave 之间的数据同步方式。<br>\r\n优点：同步双写的同步模式能保证数据不丢失。<br>\r\n缺点：发送单个消息 RT 会略长，性能相比异步复制低10%左右。<br>\r\n刷盘策略：同步刷盘和异步刷盘（指的是节点自身数据是同步还是异步存储）<br>\r\n同步方式：同步双写和异步复制（指的一组 master 和 slave 之间数据的同步）<br>\r\n<strong>注意</strong>：要保证数据可靠，需采用同步刷盘和同步双写的方式，但性能会较其他方式低。</li>\r\n</ol>\r\n<h2>RocketMQ 单主部署</h2>\r\n<p>鉴于是快速入门，我选择的是第一种单 master 的部署模式。先说明一下我的安装环境：</p>\r\n<ol>\r\n<li>Centos 7.2</li>\r\n<li>jdk 1.8</li>\r\n<li>Maven 3.2.x</li>\r\n<li>Git</li>\r\n</ol>\r\n<p>这里 git 可用可不用，主要是用来直接下载 github 上的源码。也可以选择自己到<br>\r\ngithub 上下载，然后上传到服务器上。以git操作为示例。</p>\r\n<ol>\r\n<li>clone 源码并用 maven 编译</li>\r\n</ol>\r\n<pre class=\"hljs bash\"><code class=\"bash\">&gt; git <span class=\"hljs-built_in\">clone</span> https://github.com/alibaba/RocketMQ.git /opt/RocketMQ\r\n&gt; <span class=\"hljs-built_in\">cd</span> /opt/RocketMQ &amp;&amp; mvn -Dmaven.test.skip=<span class=\"hljs-literal\">true</span> clean package install assembly:assembly -U\r\n&gt; <span class=\"hljs-built_in\">cd</span> target/alibaba-rocketmq-broker/alibaba-rocketmq\r\n</code></pre>\r\n<p><strong>此处可能遇到的问题</strong><br>\r\n一、执行\"git clone <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Falibaba%2FRocketMQ.git\" target=\"_blank\" rel=\"nofollow\">https://github.com/alibaba/RocketMQ.git</a> /home/inspkgs/RocketMQ\"时出现以下提示：</p>\r\n<pre class=\"hljs python\"><code class=\"python\">fatal: unable to access <span class=\"hljs-string\">\'https://github.com/alibaba/RocketMQ.git/\'</span>: Could <span class=\"hljs-keyword\">not</span> resolve host: github.com; Unknown error\r\n</code></pre>\r\n<p>解决办法：一般是由于网络原因造成的，执行以下命令</p>\r\n<pre class=\"hljs css\"><code class=\"css\">&gt; <span class=\"hljs-selector-tag\">ping</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span>\r\n</code></pre>\r\n<p>确定可以 ping 通之后，再重新执行 git clone 命令。<br>\r\n二、执行\"mvn -Dmaven.test.skip=true clean package install assembly:assembly -U\"编译时，可能出现下载相关jar很慢的情况。<br>\r\n这也是由于默认 maven 中央仓库在国外的原因，可以根据需要在 /home/maven/conf/setting.xml 中的 <mirrors></mirrors> 添加以下内容后重新编译：</p>\r\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>aliyun<span class=\"hljs-tag\"><!--<span class=\"hljs-name\"-->id</span>&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\"><!--<span class=\"hljs-name\"-->mirrorOf</span>&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\"><!--<span class=\"hljs-name\"-->name</span>&gt;\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"hljs-tag\"><!--<span class=\"hljs-name\"-->url</span>&gt;\r\n<span class=\"hljs-tag\"><!--<span class=\"hljs-name\"-->mirror</span>&gt;\r\n</code></pre>\r\n<ol start=\"2\">\r\n<li>启动 Name Server</li>\r\n</ol>\r\n<pre class=\"hljs cpp\"><code class=\"cpp\">&gt; nohup sh /opt/RocketMQ/bin/mqnamesrv &amp;\r\n<span class=\"hljs-comment\">//执行 jps 查看进程</span>\r\n&gt; jps\r\n<span class=\"hljs-number\">25913</span> NamesrvStartup\r\n<span class=\"hljs-comment\">//查看日志确保服务已正常启动</span>\r\n&gt; tail -f ~/logs/rocketmqlogs/namesrv.<span class=\"hljs-built_in\">log</span>\r\nThe Name Server boot success...\r\n</code></pre>\r\n<ol start=\"3\">\r\n<li>启动 broker</li>\r\n</ol>\r\n<pre class=\"hljs cpp\"><code class=\"cpp\">&gt; nohup sh /opt/RocketMQ/bin/mqbroker -n localhost:<span class=\"hljs-number\">9876</span> &amp;\r\n<span class=\"hljs-comment\">//执行 jps 查看进程</span>\r\n&gt; jps\r\n<span class=\"hljs-number\">25954</span> BrokerStartup\r\n<span class=\"hljs-comment\">//查看日志确保服务已正常启动</span>\r\n&gt; tail -f ~/logs/rocketmqlogs/broker.<span class=\"hljs-built_in\">log</span> \r\nThe broker[broker-a, <span class=\"hljs-number\">10.1</span><span class=\"hljs-number\">.54</span><span class=\"hljs-number\">.121</span>:<span class=\"hljs-number\">10911</span>] boot success...\r\n</code></pre>\r\n<ol start=\"4\">\r\n<li>发送和接收消息<br>\r\n发送/接收消息之前,我们需要告诉客户端 NameServer 地址。RocketMQ 提供了多种方式来实现这一目标。为简单起见,我们使用环境变量 NAMESRV_ADDR。</li>\r\n</ol>\r\n<pre class=\"hljs bash\"><code class=\"bash\">&gt; <span class=\"hljs-built_in\">export</span> NAMESRV_ADDR=localhost:9876\r\n&gt; sh /opt/RocketMQ/bin/tools.sh com.alibaba.rocketmq.example.quickstart.Producer\r\nSendResult [sendStatus=SEND_OK, msgId= ...\r\n&gt; sh /opt/RocketMQ/bin/tools.sh com.alibaba.rocketmq.example.quickstart.Consumer\r\nConsumeMessageThread_%d Receive New Messages: [MessageExt...\r\n</code></pre>\r\n<ol start=\"5\">\r\n<li>关闭服务</li>\r\n</ol>\r\n<pre class=\"hljs python\"><code class=\"python\">&gt; sh /opt/RocketMQ/bin/mqshutdown broker\r\nThe mqbroker(<span class=\"hljs-number\">36695</span>) <span class=\"hljs-keyword\">is</span> running...\r\nSend shutdown request to mqbroker(<span class=\"hljs-number\">36695</span>) OK\r\n&gt; sh /opt/RocketMQ/bin/mqshutdown namesrv\r\nThe mqnamesrv(<span class=\"hljs-number\">36664</span>) <span class=\"hljs-keyword\">is</span> running...\r\nSend shutdown request to mqnamesrv(<span class=\"hljs-number\">36664</span>) OK\r\n</code></pre>\r\n<h2>生产者、消费者 Demo</h2>\r\n<ol>\r\n<li>生产者</li>\r\n</ol>\r\n<pre class=\"hljs java\"><code class=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span> </span>{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> MQClientException, InterruptedException </span>{\r\n\r\n        <span class=\"hljs-comment\">//声明并初始化一个producer</span>\r\n        <span class=\"hljs-comment\">//需要一个producer group名字作为构造方法的参数，这里为producer1</span>\r\n        DefaultMQProducer producer = <span class=\"hljs-keyword\">new</span> DefaultMQProducer(<span class=\"hljs-string\">\"producer1\"</span>);\r\n        \r\n        <span class=\"hljs-comment\">//设置NameServer地址,此处应改为实际NameServer地址，多个地址之间用；分隔</span>\r\n        <span class=\"hljs-comment\">//NameServer的地址必须有，但是也可以通过环境变量的方式设置，不一定非得写死在代码里</span>\r\n        producer.setNamesrvAddr(<span class=\"hljs-string\">\"10.1.54.121:9876;10.1.54.122:9876\"</span>);\r\n        \r\n        <span class=\"hljs-comment\">//调用start()方法启动一个producer实例</span>\r\n        producer.start();\r\n\r\n        <span class=\"hljs-comment\">//发送10条消息到Topic为TopicTest，tag为TagA，消息内容为“Hello RocketMQ”拼接上i的值</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\r\n            <span class=\"hljs-keyword\">try</span> {\r\n                Message msg = <span class=\"hljs-keyword\">new</span> Message(<span class=\"hljs-string\">\"TopicTest\"</span>,<span class=\"hljs-comment\">// topic</span>\r\n                        <span class=\"hljs-string\">\"TagA\"</span>,<span class=\"hljs-comment\">// tag</span>\r\n                        (<span class=\"hljs-string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)<span class=\"hljs-comment\">// body</span>\r\n                );\r\n                \r\n                <span class=\"hljs-comment\">//调用producer的send()方法发送消息</span>\r\n                <span class=\"hljs-comment\">//这里调用的是同步的方式，所以会有返回结果</span>\r\n                SendResult sendResult = producer.send(msg);\r\n                \r\n                <span class=\"hljs-comment\">//打印返回结果，可以看到消息发送的状态以及一些相关信息</span>\r\n                System.out.println(sendResult);\r\n            } <span class=\"hljs-keyword\">catch</span> (Exception e) {\r\n                e.printStackTrace();\r\n                Thread.sleep(<span class=\"hljs-number\">1000</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">//发送完消息之后，调用shutdown()方法关闭producer</span>\r\n        producer.shutdown();\r\n    }\r\n}\r\n</code></pre>\r\n<ol start=\"2\">\r\n<li>消费者</li>\r\n</ol>\r\n<pre class=\"hljs java\"><code class=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException, MQClientException </span>{\r\n    \r\n        <span class=\"hljs-comment\">//声明并初始化一个consumer</span>\r\n        <span class=\"hljs-comment\">//需要一个consumer group名字作为构造方法的参数，这里为consumer1</span>\r\n        DefaultMQPushConsumer consumer = <span class=\"hljs-keyword\">new</span> DefaultMQPushConsumer(<span class=\"hljs-string\">\"consumer1\"</span>);\r\n\r\n        <span class=\"hljs-comment\">//同样也要设置NameServer地址</span>\r\n        consumer.setNamesrvAddr(<span class=\"hljs-string\">\"10.1.54.121:9876;10.1.54.122:9876\"</span>);\r\n\r\n        <span class=\"hljs-comment\">//这里设置的是一个consumer的消费策略</span>\r\n        <span class=\"hljs-comment\">//CONSUME_FROM_LAST_OFFSET 默认策略，从该队列最尾开始消费，即跳过历史消息</span>\r\n        <span class=\"hljs-comment\">//CONSUME_FROM_FIRST_OFFSET 从队列最开始开始消费，即历史消息（还储存在broker的）全部消费一遍</span>\r\n        <span class=\"hljs-comment\">//CONSUME_FROM_TIMESTAMP 从某个时间点开始消费，和setConsumeTimestamp()配合使用，默认是半个小时以前</span>\r\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\r\n\r\n        <span class=\"hljs-comment\">//设置consumer所订阅的Topic和Tag，*代表全部的Tag</span>\r\n        consumer.subscribe(<span class=\"hljs-string\">\"TopicTest\"</span>, <span class=\"hljs-string\">\"*\"</span>);\r\n\r\n        <span class=\"hljs-comment\">//设置一个Listener，主要进行消息的逻辑处理</span>\r\n        consumer.registerMessageListener(<span class=\"hljs-keyword\">new</span> MessageListenerConcurrently() {\r\n\r\n            <span class=\"hljs-meta\">@Override</span>\r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"hljs-title\">consumeMessage</span><span class=\"hljs-params\">(List<messageext> msgs,\r\n                                                            ConsumeConcurrentlyContext context)</messageext></span> </span>{\r\n\r\n                System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">\" Receive New Messages: \"</span> + msgs);\r\n                \r\n                <span class=\"hljs-comment\">//返回消费状态</span>\r\n                <span class=\"hljs-comment\">//CONSUME_SUCCESS 消费成功</span>\r\n                <span class=\"hljs-comment\">//RECONSUME_LATER 消费失败，需要稍后重新消费</span>\r\n                <span class=\"hljs-keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\r\n            }\r\n        });\r\n\r\n        <span class=\"hljs-comment\">//调用start()方法启动consumer</span>\r\n        consumer.start();\r\n\r\n        System.out.println(<span class=\"hljs-string\">\"Consumer Started.\"</span>);\r\n    }\r\n}\r\n</code></pre>\r\n<p></p></div><br><br>', '最近 RocketMQ 刚刚上生产环境，闲暇之时在这里做一些分享，主要目的是让初学者能快速上手RocketMQ。\r\nRocketMQ 是什么\r\nGithub 上关于 RocketMQ 的介绍：\r\nRcoketMQ 是一款低延迟、高可靠、可伸缩、易于使用的消息中间件。具有以下特性：\r\n\r\n支持发布/订', b'1', b'1', b'0', b'0', '2018-11-25 21:02:40', '2019-04-25 21:43:02', 17, NULL, NULL, 1, b'0', 'NatsuKaze');
INSERT INTO `article` VALUES (26, 'Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', NULL, '<p>原文地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://blog.csdn.net/S_gy_Zetrov/article/details/78161154\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/S_gy_Zetrov/article/details/78161154</a></p><h2 id=\"写在前面\">写在前面</h2><ul><li>这篇博客适合谁？<ul><li>对于Docker并不了解，只是有一点模糊的感觉，觉得Docker可以当成虚拟机用之类的</li><li>只是下载了Docker软件，对于怎么配置，怎么玩，第一步干什么，完全一无所知</li><li>本文适用于mac，PC用户不保证文章的效果，现在离开来得及</li></ul></li><li>网上Docker相关的教程都泛滥了，为啥还要写，为啥我要看你的文章<ul><li>首先欢迎你，能搜索到我的博客就是缘分</li><li>其次，确实，现在Docker相关的文章真的太多了，那我为什么还要写呢？原因有三：<ul><li>其一，文章是很多，各种1小时入门什么的，相信你已经在知乎看过很多了，我也看过，<br>因为我就是从知乎那几篇教程为起点，自己抠出来的，现在把自己的心得和经验贴出来，我觉得既是对自己负责也能服务他人。</li><li>其二，我从对Docker只有及其模糊（真的是模糊，我除了知道Docker是跟虚拟系统有关其他啥都不知道），到现在起码一<br>问一不知（对应一问三不知）的状态，大概花了8个小时。这期间全靠我从网络上搜索到的资料。现在用我的话写出来，我觉得对于跟我相同开始情况的小白用户，能省不少时间，所以我要写。</li><li>其三，因为我自己是纯靠搜索到的教程和技术文章学习的Docker，我自然是懂得干涩的语言对学习的拖慢。所以我自己写的时候，自然会考虑到这个问题。本文尽量不用技术用语，尽量使用通俗易懂的文字，为进一步拉低Docker的入门门槛作出我自己的贡献。</li></ul></li></ul></li><li>这篇文章主要是哪方面的Docker文章，纯入门？你做了哪些工作？<ul><li>很高兴你问了我这个问题。本文主要：<ul><li>首先对于Docker的概念作出我的解释，尽量通俗易懂</li><li>接着针对我用Docker的目的，从最开始的软件下载，到最后push一个自己的镜像到hub，整个过程以白话的形式描述出来，降低入门门槛，节省你的学习时间</li></ul></li><li>我做了哪些工作？这是个好问题！<ul><li>首先，我一直都很好奇Docker这个东西，但从来没有机会去使用它。但是，这学期OS课的lab，纯Linux系统编程，虽然使用双系统或者虚拟机都是纯小学生的难易程度了，也不麻烦，但我想，为什么不用Docker呢？用双系统或者虚拟机也太过小儿科！所以，我就这样接触了Docker</li><li>那么我使用Docker实现了什么？在lab中，我们需要用到的是纯终端下的gcc工具链还有vim等，那么这就是我需要的全部软件了！于是我在Docker中实现了「gcc+gdb<br>+vim」环境，并push到了hub中。</li></ul></li></ul></li><li>你这篇博客有没有抄别人的？<ul><li>额，我学习Docker时确实看了很多很多（真的是很多）文章，现在写这篇博客，除了自己的经验心得，自然还得去看那些文章。但我能保证的是，我写的都是取精华去糟粕，不然这篇文章就不必存在了你说是不是？</li><li>参考资料会在文后统一附上，谢谢！</li></ul></li></ul><p>好了，闲话说完，我们开始吧！</p><p>&nbsp;</p><h2 id=\"入门docker你要下载什么注册什么\">入门Docker，你要下载什么？注册什么？</h2><p id=\"dockerapp你肯定是要下载的\"><strong><span>+ Docker.app你肯定是要下载的！</span></strong></p><p>Docker for mac，这个你肯定要下载：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://www.docker.com/community-edition\" target=\"_blank\" rel=\"noopener noreferrer\">点我下载Docker for mac的社区免费版本</a></p><p>&nbsp;</p><p id=\"注册docker官方账号你需要它\"><strong><span>+ 注册Docker官方账号，你需要它！</span></strong></p><p>注册一个Docker的官方账号，有利而无害，相信我！<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://cloud.docker.com/swarm/sgyzetrov/dashboard/onboarding/cloud-registry\" target=\"_blank\" rel=\"noopener noreferrer\">点我注册Docker Cloud官方账号</a></p><p>Docker安装好，账号也注册后，点击桌面顶栏的Docker图标，点击sign in，登陆你的Docker账号。</p><p>&nbsp;</p><h2 id=\"注册daocloud账号获取加速服务\"><span>+ 注册DaoCloud账号，获取加速服务！</span></h2><p>不可否认，有时直接从Docker官方往本地pull镜像会十分缓慢。。。这时我们可以通过国内的Docker服务提供商免费获取加速pull镜像服务，阿里网易好像都有这种服务，我选择的是DaoCloud：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://account.daocloud.io/signup\" target=\"_blank\" rel=\"noopener noreferrer\">点我注册DaoCloud账号</a></p><p>注册后登陆DaoCloud，找到这个按钮：</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005113053850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/1400/fill/I0ZGMDAwMA==/dissolve/90/gravity/Center\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker1.png\"></p><p>接着，按照它的步骤，为自己添加Docker加速服务</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005113639144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/1400/fill/I0ZGMDAwMA==/dissolve/70/gravity/Center\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker2\"></p><h4></h4><p id=\"到此准备工作结束进入下一部分\"><strong><span>+ 到此准备工作结束，进入下一部分！</span></strong></p><p>&nbsp;</p><h2 id=\"要想入门docker首先你需要理解docker\">要想入门Docker，首先你需要理解Docker！</h2><p>我也不扯淡了，直接上我对Docker的理解：(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><p>Docker，可以说是一个终端命令行的虚拟机，但更准确的说法，其实应该是一个虚拟环境。比如，你想要在PC上无缝使用Linux么？那么虚拟机并不是你唯一的出路，你还有Docker！我更愿意称Docker为一个容器，当然这只是Docker的一个狭义解释，Docker不止是一个容器。Docker包含3个重要概念：</p><ul><li>一个，是镜像（Image），镜像是静态的、可以被用户互相分享的文件。我们玩过双系统和虚拟机的人都知道，首先你需要一个.iso镜像，才能安装系统。Docker中的镜像也是这个东西，<strong><span>镜像是静态的，你不能对他操作，只能pull别人的镜像或者push自己的镜像</span></strong>。</li><li>还有一个，是容器（Container），前面说过，镜像是静态不可操作的，只能被分享和下载，那什么是能被操作的呢？就是容器里！容器可以理解为镜像的动态状态，也就是我们虚拟机中系统装好后的状态，其实这么说是不对的，容器最符合的描述应该是Linux的iso文件的<code>Live CD</code>模式，比如我们玩双系统时都进入过<code>Live CD</code>模式，不安装系统而直接进入系统，很神奇是吧，Docker的容器就是这个概念，只不过更加轻量更加迅速便捷。但是<code>Live CD</code>的害处就是你关机后作出的修改安装的软件全部gg，<strong><span>容器也是一样，一旦被直接推出，之前安装的gcc啊vim啊啥的就会全部gg掉。如果要保存修改，就需要将当前容器封装成一个新的镜像，这样下次启动这个新的镜像后之前作出的修改还都在</span></strong>。</li><li>最后，是仓库（Repository）。各位在前面看到我写的pull和push什么的，有没有晕？不知道各位对于git熟悉不熟悉，Docker中的仓库很像git的代码仓库，你可以pull自己之前push到自己仓库的镜像到本地，也可以pull别人push到公共仓库的镜像到自己本地。说白了就是百度云盘，你可以上传（push）自己做好环境的Docker上去，也可以下载（pull）自己云端的镜像到本地。同时，我们知道百度云最大的特点就是分享（你懂的嘿嘿嘿），类比Docker，如果你得到百度云分享链接（别人的镜像名字、标签和别人的用户名），你还可以下载（pull）别人分享的镜像到自己的本地，别人也可以下载（pull）你的镜像，因为Docker仓库都是公共的。当然，每个免费用户有一个名额把自己的一个镜像设为私有，也就是禁止被分享给别人，类比百度云上你自己保存的而没有被生成分享链接的小姐姐。</li></ul><p>接下来来张高大上的概念图，各位看个热闹2333</p><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005120538429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU19neV9aZXRyb3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker3.png\"></p><h3 id=\"接下来就是实战了打开你的iterm2我是iterm2党2333打开普通terminal也行这个不影响\">接下来就是实战了！打开你的iTerm2！（我是iTerm2党2333，打开普通terminal也行，这个不影响）</h3><p>&nbsp;</p><p id=\"查看docker版本信息\"><strong><span>+ 查看Docker版本信息</span></strong></p><pre class=\"prettyprint\"><code class=\"hljs livecodeserver has-numbering\">终端输入：\r\n<strong><span>docker <span class=\"hljs-built_in\">version</span></span></strong></code></pre><p>&nbsp;</p><p>显示的我的版本信息</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\"> ~$ docker version\r\nClient:\r\n Version:      <span class=\"hljs-number\">17.06</span><span class=\"hljs-number\">.2</span>-ce\r\n API version:  <span class=\"hljs-number\">1.30</span>\r\n Go version:   go1.8.3\r\n Git commit:   cec0b72\r\n Built:        Tue Sep  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">06</span> <span class=\"hljs-number\">2017</span>\r\n OS/Arch:      darwin/amd64\r\n <span class=\"hljs-keyword\">...</span>\r\n //omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n <span class=\"hljs-keyword\">...</span></code></pre><p>不过我一般不需要那么多信息，所以一直用的是<code>docker -v</code>命令</p><h4></h4><p id=\"是时候pull你的第一个镜像下来的\"><strong><span>+ 是时候pull你的第一个镜像下来的！</span></strong></p><p>Docker安装好后是不会自带镜像的，你需要从仓库自己pull一个镜像下来，自己制作自己的镜像也是一个道理，你可以通过在已有的镜像基础上生成自己的镜像或者看一下这篇博客:&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/shiqiangdexin/article/details/52472195\" target=\"_blank\" rel=\"noopener noreferrer\">随便百度的如何创建自己Docker镜像得到的教程</a></p><p>Docker镜像官方好像只提供Linux，这个很容易想，windows和mac是要交钱的吧大概？（否）</p><p>搜索ubuntu的Docker镜像<strong><span><code>docker search ubuntu</code></span></strong>，这个如果你想要什么centos，直接改就行，不区分写法,我的返回结果：</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">~$ docker search ubuntu\r\nNAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\r\nubuntu                                                 Ubuntu is a Debian-based Linux operating s...   <span class=\"hljs-number\">6636</span>                [OK]\r\ndorowu/ubuntu-desktop-lxde-vnc                         Ubuntu with openssh-server and NoVNC            <span class=\"hljs-number\">131</span>                                     [OK]\r\nrastasheep/ubuntu-sshd                                 Dockerized SSH service, built on top of of...   <span class=\"hljs-number\">105</span>                                     [OK]\r\nansible/ubuntu14.04-ansible                            Ubuntu <span class=\"hljs-number\">14.04</span> LTS with ansible                   <span class=\"hljs-number\">86</span>                                      [OK]\r\nubuntu-upstart                                         Upstart is an event-based replacement <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">...</span>   <span class=\"hljs-number\">80</span>                  [OK]\r\nneurodebian                                            NeuroDebian provides neuroscience research...   <span class=\"hljs-number\">40</span>                  [OK]\r\nubuntu-debootstrap                                     debootstrap --variant=minbase --components...   <span class=\"hljs-number\">31</span>                  [OK]\r\n<span class=\"hljs-keyword\">...</span>\r\n//omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n<span class=\"hljs-keyword\">...</span></code></pre><p>&nbsp;</p><p>拉取官方最新版的ubuntu镜像：<strong><span><code>docker pull ubuntu:latest</code></span></strong>，其中的latest是一个标签（tag），表示是当前最新版本。你应该得到的信息，类似这样的</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">～$ docker pull ubuntu:latest\r\nTrying to pull repository docker.io/<span class=\"hljs-keyword\">library</span>/ubuntu <span class=\"hljs-keyword\">...</span> \r\nlatest: Pulling from docker.io/<span class=\"hljs-keyword\">library</span>/ubuntu\r\naed158d74952: Pull complete \r\n773ae8273d14: Pull complete \r\nd1d487w88782: Pull complete \r\ncd3d6cd6c0cf: Pull complete \r\n8d73bu79120c: Pull complete \r\nDigest: sha256:35bc48a1ca97c3f74rhf378hj92hd82j29i4hf4hf84nf0dhnsid232de8d8\r\nStatus: Downloaded newer image <span class=\"hljs-keyword\">for</span> docker.io/ubuntu:latest</code></pre><p><strong><span>你输入的命令实际上相当于<code>docker pull registry.hub.docker.com/ubuntu:latest</code>命令，即从注册服务器<code>registry.hub.docker.com</code>中的名为<code>ubuntu</code>的仓库中下载标签为<code>latest</code>的镜像</span></strong>。</p><p>&nbsp;</p><p>由于我的lab统一要求，ubuntu需要14.04版本，所以我在hub里面搜了搜，<strong><span>找到了一个用户分享的14.04 64位纯净镜像（base image）</span></strong>，下面将他的镜像扒下来</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span>docker pull chug/ubuntu14.<span class=\"hljs-number\">04</span>x64</code></pre><p>这个用户还有很多其他版本的ubuntu系统，12 13 14的32位64位都有，全是纯净镜像。</p><h4></h4><p id=\"查看你本地的镜像仓库\"><strong><span>+ 查看你本地的镜像仓库！</span></strong></p><p>把初始镜像拉下来后，就可以启动它了，不过，可以先使用<code>docker images</code>命令查看你自己的本地镜像，我随便找了个例子，你的也应该是类似这样的：</p><pre class=\"prettyprint\"><code class=\"hljs lua has-numbering\">～$ <span><strong>docker images</strong></span>\r\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    <span class=\"hljs-number\">16.04</span>               e4415b714b62        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">128.1</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    latest              e4415b714b62        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">128.1</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/ubuntu    <span class=\"hljs-number\">12.04</span>               aefa163f7a7e        <span class=\"hljs-number\">11</span> days ago         <span class=\"hljs-number\">103.5</span> MB\r\ndocker.<span class=\"hljs-built_in\">io</span>/centos    latest              <span class=\"hljs-number\">0584</span>b3d2cf6d        <span class=\"hljs-number\">3</span> weeks ago         <span class=\"hljs-number\">196.5</span> MB</code></pre><p>&nbsp;</p><p>从网上一个教程中找到以下说法，比我说的好，那就看这个吧！</p><blockquote><p>在列出信息中，可以看到几个字段信息:</p><ul><li>来自于哪个仓库，比如 ubuntu</li><li>镜像的标记，比如 16.04</li><li>它的 ID 号(唯一)，比如e4415b714b62</li><li>创建时间</li><li>镜像大小</li></ul><p>其中镜像的 ID 唯一标识了镜像，注意到 ubuntu:16.04 和 ubuntu:latest具有相同的镜像 ID ，说明它们实际上是同一镜像。 TAG 信息用来标记来自同一个仓库的不同镜像。例如 ubuntu 仓库中有多个镜像，通过 TAG 信息来区分发行版本，例如10.04 、 12.04 、 12.10 、 13.04 、 14.04 等。例如可以使用<code>docker run -t -i ubuntu:16.04 /bin/bash</code>命令指定使用镜像<code>ubuntu:16.04</code>来启动一个容器。如果不指定具体的标记，则默认使用<code>latest</code>标记信息。</p></blockquote><h4></h4><p id=\"启动你的镜像并尽情安装软件吧\"><strong><span>+ 启动你的镜像并尽情安装软件吧！</span></strong></p><p>以下内容均以我自己pull下来的chug的初始镜像为例：</p><p>现在你已经有一个初始的镜像了，注意这个里面是什么都没有的，连vim都没装，是精简到不能再精简的镜像了。</p><p>首先启动它：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">～<span class=\"hljs-variable\">$ </span>docker run -it chug/ubuntu14.<span class=\"hljs-number\">04</span>x64 /bin/bash\r\nroot<span class=\"hljs-variable\">@aa97ba3292ce</span><span class=\"hljs-symbol\">:/</span><span class=\"hljs-comment\">#</span></code></pre><p><strong><span>-it 表示运行在交互模式，是-i -t的缩写，即-it是两个参数：-i和-t。前者表示打开并保持stdout，后者表示分配一个终端（pseudo-tty）一般这个模式就是可以启动bash，然后和容器有命令行的交互</span></strong></p><p>可以看到我们终端的字头变成<code>root@aa97ba3292ce:/#</code>了，这就意味着我们的镜像已经创建了一个容器实例。现在我们可以对这个“ubuntu系统”进行操作了</p><p>&nbsp;</p><p>比如安装vim：</p><pre class=\"prettyprint\"><code class=\"hljs applescript has-numbering\">root@aa97ba3292ce:/<span class=\"hljs-comment\"># <strong><span>apt-get install vim</span></strong></span>\r\nReading package lists... Done\r\nBuilding dependency tree... Done\r\nThe following extra packages will be installed:\r\n  <span class=\"hljs-type\">file</span> libexpat1 libffi6 libgpm2 libmagic1 libpython2<span class=\"hljs-number\">.7</span> libpython2<span class=\"hljs-number\">.7</span>-minimal libpython2<span class=\"hljs-number\">.7</span>-stdlib libsqlite3-<span class=\"hljs-number\">0</span> libssl1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> mime-support vim-common vim-runtime\r\nSuggested packages:\r\n  gpm ctags vim-doc vim-scripts\r\nThe following NEW packages will be installed:\r\n  <span class=\"hljs-type\">file</span> libexpat1 libffi6 libgpm2 libmagic1 libpython2<span class=\"hljs-number\">.7</span> libpython2<span class=\"hljs-number\">.7</span>-minimal libpython2<span class=\"hljs-number\">.7</span>-stdlib libsqlite3-<span class=\"hljs-number\">0</span> libssl1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> mime-support vim vim-common vim-runtime\r\n<span class=\"hljs-number\">0</span> upgraded, <span class=\"hljs-number\">14</span> newly installed, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> remove <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">not</span> upgraded.\r\nNeed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-number\">10.7</span> MB <span class=\"hljs-keyword\">of</span> archives.\r\nAfter this operation, <span class=\"hljs-number\">50.7</span> MB <span class=\"hljs-keyword\">of</span> additional disk <span class=\"hljs-constant\">space</span> will be used.\r\nDo you want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">continue</span>? [Y/n]</code></pre><p>看到我没有用sudo，是因为本来就已经是超级用户（root）状态了。</p><p>同理按照我自己的需求，我安装了gcc和gdb</p><h4></h4><p id=\"想退出容器很简单\"><span><strong>+ 想退出容器？很简单！</strong></span></p><p>如果使用exit，命令退出，则容器的状态处于Exit，而不是后台运行。如果想让容器一直运行，而不是停止，可以使用快捷键&nbsp;<strong><span>ctrl+p ctrl+q</span></strong>&nbsp;退出，此时容器的状态为Up。</p><p>查看当前正在运行的容器：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker ps</span></strong>\r\n<span class=\"hljs-constant\">CONTAINER</span> <span class=\"hljs-constant\">ID</span>        <span class=\"hljs-constant\">IMAGE</span>                 <span class=\"hljs-constant\">COMMAND</span>             <span class=\"hljs-constant\">CREATED</span>             <span class=\"hljs-constant\">STATUS</span>              <span class=\"hljs-constant\">PORTS</span>               <span class=\"hljs-constant\">NAMES</span>\r\naa97ba3292ce        chug/ubuntu14.<span class=\"hljs-number\">04</span>x64   <span class=\"hljs-string\">\"/bin/bash\"</span>         <span class=\"hljs-number\">7</span> minutes ago       <span class=\"hljs-constant\">Up</span> <span class=\"hljs-number\">7</span> minutes                           relaxed_hoover</code></pre><p>&nbsp;</p><p>看到当前有一个ID为aa97ba3292ce的容器(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><p>启动、停止、重启容器aa97ba3292ce的命令：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker start aa97ba3292ce</span></strong>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker stop aa97ba3292ce</strong></span>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker restart aa97ba3292ce</strong></span></code></pre><p>&nbsp;</p><p><strong><span>后台启动一个容器后，如果想进入到这个容器，可以使用attach命令</span></strong>：</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker attach aa97ba3292ce</span></strong></code></pre><h4></h4><h4></h4><p id=\"软件装完想保存环境commit帮你\"><span><strong>+ 软件装完，想保存环境？commit帮你！</strong></span></p><p>将容器转化为一个镜像，即执行commit操作，完成后可使用<strong><span><code>docker images</code></span></strong>查看</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">root<span class=\"hljs-variable\">@aa97ba3292ce</span><span class=\"hljs-symbol\">:/</span><span class=\"hljs-comment\">#exit //先退出容器</span>\r\n~<span class=\"hljs-variable\">$ </span><strong><span>docker commit -m <span class=\"hljs-string\">\"ubuntu with vim\"</span> -a <span class=\"hljs-string\">\"sgy\"</span> aa97ba3292ce sgy/<span class=\"hljs-symbol\">ubuntu:</span>vim</span></strong>\r\n~<span class=\"hljs-variable\">$ </span>docker images\r\n<span class=\"hljs-constant\">REPOSITORY</span>                    <span class=\"hljs-constant\">TAG</span>    <span class=\"hljs-constant\">IMAGE</span> <span class=\"hljs-constant\">ID</span>         <span class=\"hljs-constant\">CREATED</span>             <span class=\"hljs-constant\">SIZE</span>\r\nsgy/ubuntu                    vim    <span class=\"hljs-number\">52166</span>e4475ed     <span class=\"hljs-number\">5</span> seconds ago       <span class=\"hljs-number\">358.1</span> <span class=\"hljs-constant\">MB</span>\r\nchug/ubuntu14.<span class=\"hljs-number\">04</span>x64           latest <span class=\"hljs-number\">05</span>84b3d2cf6d     <span class=\"hljs-number\">9</span> days ago          <span class=\"hljs-number\">196.5</span> <span class=\"hljs-constant\">MB</span></code></pre><p>&nbsp;</p><p>其中，-m指定说明信息；-a指定用户信息；aa97ba3292ce代表容器的id；sgy/ubuntu:vim指定目标镜像的用户名、仓库名和 tag 信息。我这里都是为了博客瞎编的用户名，我自己的用户名也不是sgy，你运行命令的时候使用自己注册Docker时的用户名。</p><p>此时Docker中就有了我们新建的镜像sgy/ubuntu:vim，此镜像和原有的ubuntu镜像区别在于多了个vim工具。此时我们利用新镜像创建的容器，本身就自带vim了。</p><p>启动新创建的镜像，可以看到vim已经自带了。</p><pre class=\"prettyprint\"><code class=\"hljs r has-numbering\">~$ <strong><span>docker run -it sgy/ubuntu:vim /bin/bash</span></strong>\r\nroot@520afc596c51:/<span class=\"hljs-comment\"># vim --version</span>\r\nVIM - Vi IMproved <span class=\"hljs-number\">7.4</span> (<span class=\"hljs-number\">2013</span> Aug <span class=\"hljs-number\">10</span>, compiled Apr  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2017</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">54</span>)\r\n<span class=\"hljs-keyword\">...</span>\r\n//omitted by sgy(Copyright © http://blog.csdn.net/s_gy_zetrov. All Rights Reserved)\r\n<span class=\"hljs-keyword\">...</span></code></pre><p>利用exit退出容器。此时Docker引擎中就有了两个容器，可使用<code>docker ps -a</code>查看。</p><h4></h4><h4>+ 想要删除容器或者镜像？用这个！</h4><p>如果想删除容器或者镜像，可以使用rm命令，注意：<span><strong>删除镜像前必须先删除以此镜像为基础的容器（哪怕是已经停止的容器），否则无法删除该镜像，会报错<code>Failed to remove image (e4415b714b62): Error response from daemon: conflict: unable to delete e4415b714b62 (cannot be forced) - image has dependent child images</code>类似这种</strong></span>。</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker rm container_id</span></strong>\r\n~<span class=\"hljs-variable\">$ </span><span><strong>docker rmi image_id</strong></span></code></pre><p>&nbsp;</p><p>有的时候尽管删除了全部容器，镜像还是无法删除，这时点击mac顶栏中的docker logo，选择restart，然后再试一次rmi，应该就没问题了。(Copyright ©&nbsp;<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.csdn.net/s_gy_zetrov\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.csdn.net/s_gy_zetrov</a>. All Rights Reserved)</p><h4 id=\"附上一张高大上的docker命令图\">+ 附上一张高大上的Docker命令图</h4><p><img title=\"\" data-original=\"https://img-blog.csdn.net/20171005132826220\" src=\"https://media.liuyanzhao.com/wp-content/themes/begin/img/blank.gif\" alt=\"docker4.png\"></p><h4></h4><p id=\"一次配置到处使用那就push到hub上吧\"><span><strong>+ 一次配置，到处使用？那就push到hub上吧！</strong></span></p><p>因为之前已经在Docker.app中登陆了Docker账号，所以现在直接</p><pre class=\"prettyprint\"><code class=\"hljs ruby has-numbering\">~<span class=\"hljs-variable\">$ </span><strong><span>docker push sgy/<span class=\"hljs-symbol\">ubuntu:</span>vim</span></strong></code></pre><p>就可以了！</p><p>下次到了机房，在ubuntu系统中安装Docker，配置好加速器，启动Docker，<strong><span><code>docker login</code></span></strong>登陆自己的账号，然后直接<code>~$&nbsp;<span><strong>docker pull sgy/ubuntu:vim</strong></span></code>就可以把你push到hub的已经配置好的环境的镜像给扒下来。做完实验，再push上去就ok了！</p><h2></h2><h2>Docker中安装gcc、gdb时遇到的问题</h2><p id=\"add-apt-repository-command-not-found\"><span><strong>+ add-apt-repository: command not found</strong></span></p><p>14.04系统解决办法：</p><pre class=\"prettyprint\"><code class=\"hljs lasso has-numbering\">apt<span class=\"hljs-attribute\">-get</span> install software<span class=\"hljs-attribute\">-properties</span><span class=\"hljs-attribute\">-common</span></code></pre><p>&nbsp;</p><p>older版本的系统：</p><pre class=\"prettyprint\"><code class=\"hljs lasso has-numbering\">apt<span class=\"hljs-attribute\">-get</span> install python<span class=\"hljs-attribute\">-software</span><span class=\"hljs-attribute\">-properties</span></code></pre><h4></h4><p id=\"docker中使用gdb无法进入断点无法调试\"><strong><span>+ Docker中使用gdb无法进入断点，无法调试</span></strong></p><p>加上<code>--privileged</code>参数</p><pre class=\"prettyprint\"><code class=\"hljs applescript has-numbering\">～$ docker <span class=\"hljs-command\">run</span> -<span class=\"hljs-keyword\">it</span> <span class=\"hljs-comment\">--privileged sgy/ubuntu:vim /bin/bash</span></code></pre>', '原文地址：https://blog.csdn.net/S_gy_Zetrov/article/details/78161154写在前面这篇博客适合谁？对于Docker并不了解，只是有一点模糊的感觉，觉得Docker可以当成虚拟机用之类的只是下载了Docker软件，对于怎么配置，怎么玩，第一步干什么，', b'1', b'1', b'0', b'0', '2018-11-25 21:05:05', '2023-01-23 21:42:21', 46, NULL, NULL, 1, b'0', 'NatsuKaze');

-- ----------------------------
-- Table structure for article_tag_ref
-- ----------------------------
DROP TABLE IF EXISTS `article_tag_ref`;
CREATE TABLE `article_tag_ref`  (
  `article_id` int(32) NOT NULL COMMENT '文章ID',
  `tag_id` int(32) NOT NULL COMMENT '标签ID',
  PRIMARY KEY (`article_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_tag_ref
-- ----------------------------
INSERT INTO `article_tag_ref` VALUES (1, 1);
INSERT INTO `article_tag_ref` VALUES (1, 12);
INSERT INTO `article_tag_ref` VALUES (2, 12);
INSERT INTO `article_tag_ref` VALUES (3, 14);
INSERT INTO `article_tag_ref` VALUES (3, 18);
INSERT INTO `article_tag_ref` VALUES (4, 6);
INSERT INTO `article_tag_ref` VALUES (4, 26);
INSERT INTO `article_tag_ref` VALUES (5, 20);
INSERT INTO `article_tag_ref` VALUES (6, 21);
INSERT INTO `article_tag_ref` VALUES (7, 2);
INSERT INTO `article_tag_ref` VALUES (7, 21);
INSERT INTO `article_tag_ref` VALUES (7, 31);
INSERT INTO `article_tag_ref` VALUES (8, 13);
INSERT INTO `article_tag_ref` VALUES (8, 29);
INSERT INTO `article_tag_ref` VALUES (9, 1);
INSERT INTO `article_tag_ref` VALUES (9, 10);
INSERT INTO `article_tag_ref` VALUES (9, 19);
INSERT INTO `article_tag_ref` VALUES (10, 1);
INSERT INTO `article_tag_ref` VALUES (11, 13);
INSERT INTO `article_tag_ref` VALUES (12, 33);
INSERT INTO `article_tag_ref` VALUES (14, 10);
INSERT INTO `article_tag_ref` VALUES (15, 1);
INSERT INTO `article_tag_ref` VALUES (16, 28);
INSERT INTO `article_tag_ref` VALUES (17, 26);
INSERT INTO `article_tag_ref` VALUES (19, 38);
INSERT INTO `article_tag_ref` VALUES (21, 14);
INSERT INTO `article_tag_ref` VALUES (22, 15);
INSERT INTO `article_tag_ref` VALUES (23, 2);
INSERT INTO `article_tag_ref` VALUES (23, 14);
INSERT INTO `article_tag_ref` VALUES (24, 1);
INSERT INTO `article_tag_ref` VALUES (24, 15);
INSERT INTO `article_tag_ref` VALUES (24, 16);
INSERT INTO `article_tag_ref` VALUES (25, 3);
INSERT INTO `article_tag_ref` VALUES (25, 15);
INSERT INTO `article_tag_ref` VALUES (26, 1);
INSERT INTO `article_tag_ref` VALUES (26, 31);
INSERT INTO `article_tag_ref` VALUES (26, 32);

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT '分类ID',
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分类名称',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `category_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, '技术杂谈', NULL);
INSERT INTO `category` VALUES (2, '项目日志', NULL);
INSERT INTO `category` VALUES (3, '学习笔记', NULL);
INSERT INTO `category` VALUES (4, '想啥写啥', NULL);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT '评论ID',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '0' COMMENT '昵称',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '邮箱',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '头像地址',
  `create_time` datetime NULL DEFAULT NULL COMMENT '评论时间',
  `ip` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'IP地址',
  `is_published` bit(1) NULL DEFAULT NULL COMMENT '公开或隐藏',
  `is_admin_comment` bit(1) NULL DEFAULT NULL COMMENT '是否管理员评论',
  `page` int(10) NOT NULL COMMENT '0文章1友链2关于我',
  `reply_nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '回复的人昵称',
  `article_id` int(32) NULL DEFAULT NULL COMMENT '评论的文章ID',
  `origin_id` int(32) NOT NULL COMMENT '归属ID',
  `parent_comment_id` int(32) NOT NULL COMMENT '父论ID',
  `website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '个人主页',
  `qq` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'QQ',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 60 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (41, '手写的从前.', NULL, '你真帅！', 'http://175.178.247.100:8090/image/1c41d028-3112-4eab-93eb-8a72e38d1566.jpeg', '2022-08-07 23:45:36', NULL, b'1', NULL, 2, NULL, NULL, 41, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (44, '卡西欧', NULL, '关注嘉然今天吃什么', 'http://175.178.247.100:8090/image/0792a3fc-cb58-405d-8612-a4a5a13c0999.jpeg', '2022-08-08 18:35:17', NULL, b'1', NULL, 2, NULL, NULL, 44, -1, NULL, '440552');
INSERT INTO `comment` VALUES (46, 'Natsukaze', NULL, '友情链接页面现已经开放评论！！', 'avatar.jpg', '2022-08-09 13:20:19', NULL, b'1', NULL, 1, NULL, NULL, 46, -1, NULL, '1127695505');
INSERT INTO `comment` VALUES (47, '手写的从前.', NULL, '？', 'http://175.178.247.100:8090/image/174ad2b4-092c-4eeb-9436-a48f230c008f.jpeg', '2022-08-09 13:42:28', NULL, b'1', NULL, 2, NULL, NULL, 47, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (48, '手写的从前.', NULL, '你在赣神魔', 'http://175.178.247.100:8090/image/6b3534e3-087c-4bb4-9951-42c9369ad7b8.jpeg', '2022-08-09 13:43:18', NULL, b'1', NULL, 2, NULL, NULL, 48, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (54, 'Natsukaze', NULL, '现已支持表情😎', 'http://175.178.247.100:8090/image/cbf50a5a-d79c-40d9-b312-8ec6c1b25574.jpeg', '2022-08-13 12:17:51', NULL, b'1', NULL, 2, NULL, NULL, 54, -1, NULL, '1127695505');
INSERT INTO `comment` VALUES (55, '手写的从前.', NULL, '6666', 'http://175.178.247.100:8090/image/864383e2-7ba8-4ec1-a42a-229118ded5e7.jpeg', '2022-08-14 13:24:50', NULL, b'1', NULL, 2, NULL, NULL, 55, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (56, '手写的从前.', NULL, '6666', 'http://175.178.247.100:8090/image/f2db93f6-3c7a-474e-ba72-44c4bee71e61.jpeg', '2022-08-14 13:25:59', NULL, b'1', NULL, 2, NULL, NULL, 56, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (57, '手写的从前.', NULL, '666', 'http://175.178.247.100:8090/image/3e3cc3bc-b86f-46c9-a174-f6741fcc8789.jpeg', '2022-08-14 13:26:06', NULL, b'1', NULL, 2, NULL, NULL, 57, -1, NULL, '1046467693');
INSERT INTO `comment` VALUES (58, '卡西欧', NULL, '上香🕯️', 'http://175.178.247.100:8090/image/a82e171b-f425-408d-8b39-7cd5b5c19bb1.jpeg', '2022-08-23 18:22:10', NULL, b'1', NULL, 2, NULL, NULL, 58, -1, NULL, '440552');
INSERT INTO `comment` VALUES (59, '深林人不知', NULL, '不支持😂😅😡🤭😘🙃表情吗\n', 'http://175.178.247.100:8090/image/74ef71f1-a300-4660-9c42-b0985512a535.jpeg', '2022-08-23 22:05:28', NULL, b'1', NULL, 2, NULL, NULL, 59, -1, NULL, '2825073846');

-- ----------------------------
-- Table structure for moment
-- ----------------------------
DROP TABLE IF EXISTS `moment`;
CREATE TABLE `moment`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',
  `create_time` datetime NOT NULL COMMENT '发表时间',
  `like` int(11) NOT NULL COMMENT '点赞数',
  `is_published` bit(1) NOT NULL COMMENT '是否公开',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of moment
-- ----------------------------
INSERT INTO `moment` VALUES (1, '测试', '2022-07-28 09:11:41', 99, b'1');
INSERT INTO `moment` VALUES (2, '这是一条动态', '2022-07-30 08:45:58', 99, b'1');
INSERT INTO `moment` VALUES (3, '今天的目标是，完成博客前台的全部页面和接口', '2022-07-30 08:46:55', 99, b'1');
INSERT INTO `moment` VALUES (4, '我服了，特么大半夜停电，38°这谁顶的住啊', '2022-08-11 01:39:30', 99, b'1');
INSERT INTO `moment` VALUES (5, '哎，懒得修改了，就这样吧，什么时候想写代码了再更新。', '2022-08-12 17:39:41', 99, b'1');
INSERT INTO `moment` VALUES (6, '为什么要折磨自己呢？39℃天花那么多钱跑去面试，还不一定能过。😅我真是活该', '2022-08-18 17:30:00', 99, b'1');
INSERT INTO `moment` VALUES (7, '评论回复功能现已完成，每天进步一点，十天也只进步一点，哈哈哈哈哈🤣', '2022-08-24 13:05:45', 99, b'1');
INSERT INTO `moment` VALUES (8, '更新了系统就像换了新手机，😉', '2022-08-30 18:01:15', 99, b'1');
INSERT INTO `moment` VALUES (9, '人生最痛苦的事情莫过于，要换乘的车，就在自己车的前面，只能眼睁睁目送它离去，却无能为力，等下一辆还要等一整班车的时间。💔💔💔', '2022-09-16 15:00:00', 99, b'1');
INSERT INTO `moment` VALUES (10, '工作第二天！感觉还是蛮不错的，同事都挺好，只是就我一个00后，压力拉满有没有！！！工作内容是写web项目，和实习不是一个档次，也有人带，感觉挺不错的', '2022-09-23 19:58:29', 99, b'1');

-- ----------------------------
-- Table structure for site_setting
-- ----------------------------
DROP TABLE IF EXISTS `site_setting`;
CREATE TABLE `site_setting`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name_en` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `name_zh` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL,
  `page` int(11) NULL DEFAULT NULL COMMENT '1资料卡和logo，2页脚，3友链，4关于我',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of site_setting
-- ----------------------------
INSERT INTO `site_setting` VALUES (1, 'blogName', '博客名称', 'NatsuKaze\'s Blog', 1);
INSERT INTO `site_setting` VALUES (2, 'webTitleSuffix', '网页标题后缀', ' - NatsuKaze\'s Blog', 1);
INSERT INTO `site_setting` VALUES (3, 'avatar', '资料卡头像', 'favicon.ico', 1);
INSERT INTO `site_setting` VALUES (4, 'name', '资料卡名字', 'NatsuKaze', 1);
INSERT INTO `site_setting` VALUES (5, 'signature', '资料卡个性签名', '不忘初心，方得始终', 1);
INSERT INTO `site_setting` VALUES (6, 'content', '文案', '这是友情链接页面，没想好文案，先这样吧。添加友链的话，在评论区输入你的地址，头像地址，个性签名，我看到了可能会添加。', 3);
INSERT INTO `site_setting` VALUES (7, 'isComment', '是否允许评论', 'true', 3);
INSERT INTO `site_setting` VALUES (8, 'musicId', '网易云音乐ID', '31421001', 4);
INSERT INTO `site_setting` VALUES (9, 'content', '文案', '<h3 class=\"ui header\">关于我</h3>\r\n<ul class=\"ui list\">\r\n    <li>我是：刚毕业的菜鸡🙃</li>\r\n    <li>目标：实现财务自由😅</li>\r\n    <li>特征：很帅😎</li>\r\n    <li>爱好：打游戏，<s>写代码</s>✨</li>\r\n    <li>性格：老社恐了😥</li>\r\n</ul>\r\n<h3 class=\"ui header\">关于此博客</h3>\r\n<p style=\"text-indent:2em;\">本博客是学习的产物，功能不多，界面花哨。目前仅有博客前台，接下来除了增加前台的功能、优化体验外、还要开始进行后台管理系统的开发。目前本博客里面的文章均为测试数据，我自己的学习笔记暂时不会上传。</p>\r\n<p style=\"text-indent:2em;\">本博客使用SpringBoot和Vue开发。从没接触过前端的我，做完这个项目后，真的学到了好多。<s>甚至感觉自己可以做前端了。</s>这里我要感谢某位大佬的开源项目，本博客的前端布局排版、数据处理方式，全程参考<s>(抄袭)</s>了大佬的代码，要是看Vue的文档，怕是一辈子都做不出来。当然现在有了经验，不至于一问三不知。这是大佬的开源项目：<a href=\"https://github.com/Naccl/NBlog\">https://github.com/Naccl/NBlog</a>。虽然我很想做出自己的风格，无奈，一没想法，二出bug，干脆先做出来再说。未来把所有功能完善后，再重做布局。</p>\r\n<p style=\"text-indent:2em;\">为什么会产生做博客的想法？说起做博客，最早可以追溯到大三下半学期，刚开始学SSM的时候，闲来无事想着到github上找个SSM的项目学习学习，然后就发现了一个博客。梦的开始：<a href=\"https://github.com/saysky/ForestBlog\">https://github.com/saysky/ForestBlog</a>。在这个项目中我学会了SSM的基础用法，直到现在，本博客的测试数据都是使用的此博客的数据。当然，现在的数据库表结构已经被我重构了，也删掉了很多用不上的表。后来，到了毕设选题，就顺理成章的选了博客。<s>其实是想用开源项目忽悠老师</s>然后大四上出去实习，发现公司用SpringBoot和低代码，特么我不会，结果写了5个月SQL，还有Grafana。离职的前两个月，那时也正好，学校一直传来关于毕设的消息。虽然那时连文件夹都没建，但出于学习SpringBoot的目的，直接找了一个博客实战视频，就照着敲，但做了十几天，还是感觉太麻烦了<s>（特么的其实就是懒）</s>，做完后端还要做前端，就放弃了。于是干脆又到github找项目，就找到了上面提到的第一个项目，在答辩前一个月，疯狂魔改别人的代码，最终成功的通过了答辩。现在想想觉得好蠢，答辩老师根本不看项目，一个ppt就完事了。甚至根本都不用写代码。毕业后开始找工作，一直到现在都没找到满意的，很烦。上个月初，也就是7月，突然觉得不能这么无所事事，写点代码吧，于是就开始往去年新建的文件夹里，填充一些内容。从去年到现在（8月12号），断断续续的大概有2个半月时间吧，基本完善了此博客（前台）。说实话，没什么技术含量，但我却感觉学到了好多东西，足以见得我的水平。另外：有个人主页的同学，欢迎到旁边友情链接页面交换友链，一起学习。</p>\r\n<p style=\"text-indent:2em;\">评论注意事项：1.请不要在短时间内反复提交评论。2.如遇bug请向我反馈</p>\r\n<span>现已支持表情！🎉👍😜🤣。现可以回复评论！🎉🎉🎉🎉</span>\r\n', 4);
INSERT INTO `site_setting` VALUES (10, 'isComment', '是否允许评论', 'true', 4);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `id` int(32) NOT NULL AUTO_INCREMENT COMMENT '标签ID',
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签名称',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `tag_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 39 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (1, 'Java', NULL);
INSERT INTO `tag` VALUES (2, '算法', NULL);
INSERT INTO `tag` VALUES (3, '数据结构', NULL);
INSERT INTO `tag` VALUES (6, '计算机网络', NULL);
INSERT INTO `tag` VALUES (10, 'MySQL', NULL);
INSERT INTO `tag` VALUES (12, 'SpringMVC', NULL);
INSERT INTO `tag` VALUES (13, 'MyBatis', NULL);
INSERT INTO `tag` VALUES (14, 'JVM', NULL);
INSERT INTO `tag` VALUES (15, '设计模式', NULL);
INSERT INTO `tag` VALUES (16, '网络编程', NULL);
INSERT INTO `tag` VALUES (18, 'JSP', NULL);
INSERT INTO `tag` VALUES (19, 'Servlet', NULL);
INSERT INTO `tag` VALUES (20, 'JavaWeb', NULL);
INSERT INTO `tag` VALUES (21, 'Hibernate', NULL);
INSERT INTO `tag` VALUES (26, 'SpringCloud', NULL);
INSERT INTO `tag` VALUES (28, 'EDAS', NULL);
INSERT INTO `tag` VALUES (29, 'MongoDB', NULL);
INSERT INTO `tag` VALUES (31, 'SpringBoot', NULL);
INSERT INTO `tag` VALUES (32, 'ElasticSearch', NULL);
INSERT INTO `tag` VALUES (33, 'Docker', NULL);
INSERT INTO `tag` VALUES (38, 'RocketMQ', NULL);

-- ----------------------------
-- Table structure for visit_log
-- ----------------------------
DROP TABLE IF EXISTS `visit_log`;
CREATE TABLE `visit_log`  (
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '访客标识码',
  `uri` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求接口',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '请求方式',
  `param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `behavior` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '访问行为',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '访问内容',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `times` int(11) NOT NULL COMMENT '请求耗时（毫秒）',
  `create_time` datetime NOT NULL COMMENT '访问时间',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`uuid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of visit_log
-- ----------------------------
INSERT INTO `visit_log` VALUES ('0081fc6f3d7683e383acbfce83043654', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 22:06:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('00f479d2a6ad27d213f1865fce8d052a', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:20:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('00f662f2ac1f316a6f9904add79761a1', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 15:57:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('04299edcdeee58fd8297d43b9b15d5f3', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 19:29:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('05c743ad2962bf26741f11e3b9b75124', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 21, '2023-01-23 20:17:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('05e0aa79aa3af9a779efa6f2f46765ca', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:23:05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('06035744bc7b70b6c7a5fbaae3fb0782', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:23:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('078b8c909a03a007fb994ec3ebc405c2', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[2], isPublished=true)', '点击标签', '', '标签ID：[2]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 11, '2023-01-23 20:26:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('079d52645efb6327b692f5f4666b0d61', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 21:42:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('07e3a376c838ee435a37bc1180632d55', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 4, '2022-10-22 18:14:07', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('0843fbdf1dc5704fcbffa05f3513df44', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 20:11:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('09982ee9e0c5c45930ac6c2fa061fb31', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 20, '2023-01-23 20:10:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0a3988e458d751bcdb615f0e1c965a18', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 20:01:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0a96e7e3c702a06fa3f5b9f722af537d', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 929, '2023-01-23 20:31:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0b11b7170ff08271fd19617578f99826', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:23:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0dd4331974dba837b8b2f6892ea963bb', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0f4baae36b929bc97e67a8049e2d0a89', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 13, '2023-01-23 19:22:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('0f64de75e1ee7e7d0cf137eab8aad0bd', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-24 15:12:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('11f9ba3b9116b57b93a6c7c260ea7acb', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-23 22:20:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('15223669edc97ed4b73727db1afe8029', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 24, '2023-01-24 15:10:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1541d5f32a8de759bcc41b8157d85704', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[13], isPublished=true)', '点击标签', '', '标签ID：[13]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 11, '2023-01-23 20:26:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('16276021a13e8c672fa9d8d0a7f531a6', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 22:15:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1704bb1650e7ba3655ebd01df23e4ba2', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:20:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('178627305956e86d2a1363f7a0167c2f', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:24:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('17ead32d92c4b4cf7a37c0a594021cc4', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1094, '2023-02-04 19:02:37', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('17ed53cd04728e54c72c40f283647e20', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 22:20:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1aa7a6d31dfcb5417eaafcb9f3694167', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:30:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1abcdb220047e5db9b33da44cea2aa51', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:05:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1adf996458d1322a5117e8f70c192327', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 28, '2023-01-24 15:11:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1b932065e94abe20e5412b1f10cc8b68', '/articles/read', 'GET', '26', '查看博客', '', '文章标题：Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-23 21:32:07', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1c1fd7f883bdc6b643c1474090ca7727', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:11:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1e6b7928773aea43fdfb993985905662', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 36, '2023-01-23 19:29:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('1f9d1e411d5c9e6df1531e3efb3c6c1e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 19:25:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2036d5411d8a879b85e6d8095df664ee', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-24 16:36:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2582397469581f5a9737f43342733eab', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[1], isPublished=true)', '点击标签', '', '标签ID：[1]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 21, '2023-01-23 20:26:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('25dc833a0f925dd44b4e68fb4ef617ab', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-02-04 19:04:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('26574845a05ad6cb1a8e1451240167c9', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[6], isPublished=true)', '点击标签', '', '标签ID：[6]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:26:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2678e19afaf9eae8b209f892766ae408', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-24 15:12:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2791c67f0fd2605af74142ccdbc766e4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:23:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('279c12bb300a486864b9be54d6b66958', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 19:29:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('288bbdfb0a1cd633a9bae85360bed409', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-24 15:12:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2ac8d9543b545992a0862bf2c7c5058f', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 28, '2023-01-23 18:21:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2ad94d3f6e1325e590aef2f0077cbba9', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 24, '2023-01-24 16:36:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2b352bcee9aa8656afff22d1b71a418e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:21:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2b73cf9410dfa33866c0aaa174bae919', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:31:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2bd56971353bf7979f741563357550c7', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 22:21:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2ddd0695ad17586e11d69491f2719426', '/articles', 'GET', 'BaseQueryDTO(pageNo=3, pageSize=3, keyword=null)', '访问页面', '首页', '文章第3页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 20:23:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2f36d12b59d377c314e67a5f8982ff51', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 21:42:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('2fcfe5d83f967ee1384dd4f777c923f8', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[2], isPublished=true)', '点击标签', '', '标签ID：[2]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 20:26:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('30c37ea37e522d2d64586a3c495b5a0e', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:42:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('31450f1f5e6d20306dbc81763db76a26', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 12, '2023-01-23 20:27:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3281275a4c4ec5764fa55ee5284fc489', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[14], isPublished=true)', '点击标签', '', '标签ID：[14]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 20:26:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('33c23dddee11d2d42a35c7cfa51cbc6b', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 962, '2023-01-23 19:15:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('35e3253861bbb8b33b93f9a28b335ceb', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-02-04 19:04:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('370468a5f82b16a59dd652c54e03145f', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 7, '2022-10-22 18:14:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('371a047701f741bd53509ac20a92b967', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 14, '2023-01-23 22:20:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3730d8deae7cecbca172b5e3b757197d', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-01-23 20:10:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('37ba592447aae109346252c58c0f5f0f', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('37cd82541a15dc3640042fdb0d77d10e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('38045d0c4e5a0c0ed9acd1cfdd824201', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:24:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3a10210eb6398d60c21191ffd05789a3', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3a873c091bf750d2f1f9e830de62c594', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:50', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3ad54902df56d1ece8b43a82c3866dae', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 14, '2023-01-23 22:15:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3c0bdb02e3a9b61cd4e4cb313e93f985', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1, '2023-01-23 20:24:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3c74ad536e20ee851864a4d03841ce9b', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 14, '2023-01-24 15:57:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3c87406bc95204d9c4ba582228d0885f', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-02-04 19:04:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3d1ecfe540e979d14db149e22c28de38', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[6], isPublished=true)', '点击标签', '', '标签ID：[6]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 22:23:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3d5b30698d8c13b10491ef16da662c2a', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1011, '2023-01-23 21:59:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3e95b2bbb5d1270f0ab066b838b58d47', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 885, '2023-01-24 15:57:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3ebf93c55867d625db3247f13d94bbb7', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 900, '2023-01-24 15:52:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('3ecd60f16fee4da9211259a671ad7ad8', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 8, '2022-10-22 18:14:07', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('40b0f89d27d278f377eaa860ac6760d7', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 21:44:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('41a65789138d7a5aebbe6e3726b67ba8', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 22:21:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('432d35b8b158e2d0e10edf2ee843bc48', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1051, '2023-01-23 18:15:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('44834f802d8158117b74116d229c4043', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 12, '2022-10-23 11:25:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('44d4ee846fc4ba1dab12612b97cdb3c2', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('44ee1d1369369164be506d9188df94d4', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 9, '2022-10-23 11:23:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('456faa00dc5ce27e2d002e5a46ee67e0', '/moments', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=8, keyword=null)', '访问页面', '动态', '动态第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-24 15:53:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('45b4f646bcc3c21857fd1df6bf16d70d', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:24:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('45d84d5948ee28de7537b8a99cb8cc7c', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:04:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('472eb9b3d5bd8d79f4a95f7b14c86ab4', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('48a971cfa0d0961fc458406d112acf48', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 15:57:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('48e5a2cf13077c8e5caf484173962c15', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 20, '2023-01-23 20:15:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('49360e32a124671938f0cb8e72ff3f35', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-02-04 19:26:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('49887a3ba8352d39b510a8295ea34cc0', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-23 20:27:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('49a096beaaec22a84c191be8cb5ef9af', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4be5f5522d06b9cd5045ef6279fa5780', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 15, '2023-01-23 19:47:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4c24cb4009324509384c967602c44b64', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:23:00', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4cdd5a47df855b398ecf14980d979dea', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 18, '2023-01-23 20:06:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4e7254d88ff87dfd2a7ba3e036084c91', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:32:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4ea1f20ffaf96b198c9215276828ebe9', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:42', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4f203abad5d0cd61846b00edba251004', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:31:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4f218cd89ef8f63a676cd5239262e3ff', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:37:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('4f997b399ef491e85d6fff9361cc72ef', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5094eedd2fba570acc9296c506a1b934', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 20:00:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('52251fd7d16ce0c70f7a4412c25e4c90', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('54b9c2cb7635177f9f63c75a04365c16', '/articles/category', 'GET', 'ArticleQueryDTO(categoryId=1, tagIds=null, isPublished=true)', '点击分类', '', '分类ID：1', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 15, '2023-01-23 20:27:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('579ee897c22f9d26a449cae0b5000a6f', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 21:42:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('58c3093b6db74c671ad76758b6679b43', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:05:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5a5d3772aed01a5f5ebea9c6749edae0', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:14:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5a80a37f5a44dbdd313e30473135cc6c', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 25, '2023-02-04 19:04:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5af7e62f4d88c57c7d7b3f142b25082b', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 32, '2023-01-23 20:03:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5c4096ac533f0b1a150695177b7e270d', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:20:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5d98506468b5557854f210ac0fbe953f', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 16:36:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5e24fc8bc715ffebb6e0ada061b5067f', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-24 15:57:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5e99f4b0b2423aab4b9c061be0d1709c', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 32, '2023-01-23 20:37:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('5f10251c1a4986023609ad86794dc235', '/articles/read', 'GET', '26', '查看博客', '', '文章标题：Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 11, '2023-01-23 20:25:37', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('603fc11ce34f303585125bf5802debcb', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 17, '2023-01-23 20:10:39', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('609ff48e7343dfb3675e7f8587027e7f', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:20:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('61f7be06a006bb0018babfc3d221b4c9', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('6249d63fa6d751b956edf992f6f526c8', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-02-04 20:00:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('62a8a4f23d335cea4e2dfab321442f90', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 18, '2023-01-23 20:09:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('64d74ded741092ceac88266a87b11d34', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 20:04:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('65000adb99805b8ff710a5cf59bb6772', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:21:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('65a5a6060454f134892db9527d9066f4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:17:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('65b57986fc2f0a06b8baf26d62a2f005', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 8, '2022-10-22 18:14:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('66af6d474464e3573cefed13ec4385ec', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-02-04 19:05:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('671d28c7b3cccbf6130826c43f219b51', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-02-04 19:38:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('67ce0aced6c682fc81ad6de74c64b891', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-02-04 19:40:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('681d6e285f63c32cd0b5cafc3ecd6fd2', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:58:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('69383bc1b64cd608b8fa509470f90f39', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 4, '2022-10-23 11:24:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('6ab9a77a7b33c3aebf3ed3e15c0b556a', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 22:15:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('6b26a33f25dc109198bb027769c6ac82', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 992, '2023-01-23 21:58:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('6b5881ffa0c185f07476651cd883b4af', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-02-04 19:03:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('6bfb8fdc8b2662d2428943d30ce887b1', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-24 15:52:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('6cee6030594b1498a86cba37e8a5efdf', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:58:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('72552e4d43d24ffb1b12aba8215b03a7', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-24 15:57:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('72b5b3ce05cd83b7168695d4e0108ef1', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:24:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('73a335b0ed28d5995c885fd51209eeb6', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 16:36:44', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('74b186bd9bd024aa85273fc32e0c8ec9', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 28, '2023-01-23 19:29:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('74d6e38cd37dfbd0db26a31054fc1b83', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[19], isPublished=true)', '点击标签', '', '标签ID：[19]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 20:26:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('75ff0d8c090daeee359ed200c0a0e150', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[18], isPublished=true)', '点击标签', '', '标签ID：[18]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 20:26:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('76750d19857c2901c658a4279a91b4d7', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 949, '2023-01-23 21:44:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('76a9f756f7dddc3f5a9c53a970611fbf', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 31, '2023-01-23 20:01:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7a2d87fc835d1bbefa858a7afb656219', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1, '2023-02-04 19:36:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7b08cb6790680636e7ab3f23dbdbba69', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 19:27:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7b473f1db00c97033422a0328b3b0bcc', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-23 20:31:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7b4becc55d917fabf80770b74c8c9e30', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-24 15:53:19', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7b821f9f54af891ecd0b95662afa3107', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-24 16:36:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7c048635a7f81ba2dfc3d563848ec95e', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-23 20:24:00', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7cb62c917d490e62c99f3c4a81722b49', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:23:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7cf1b3026ff7989601056540ff5d37c3', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:16:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7ed8a9887d5a4be0ab48bbb1075874ee', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[15], isPublished=true)', '点击标签', '', '标签ID：[15]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-23 20:27:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7f627810abe7388256a86dbc518fd71e', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 25, '2023-01-24 15:12:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7f99379ff1f75538fb86bce16486a5cd', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-01-23 20:11:19', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('7fc8ab52b2c3df3bd105202518e233df', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 19:28:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('80d898374cb0c6ea2377ac079616c968', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 20:20:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('80ea8cbc402e34b6341174b98b323c4d', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 15:12:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('811cc5c2b2b11a5f8d1260452ec4ae4c', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:36:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8282aeaf520d6a28c68142a5c67e678f', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 21:43:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('834847fbbc7d0a7e9a49bd43b0887e1d', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 22:23:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('839174d238f0b22a1f4a14ded0915f7e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-23 19:14:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('83a64bda9c7a256b1e4949ce46a78fb9', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 29, '2023-01-24 16:36:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('85eda1bc08d01ae4f30fd0d924c8e260', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:28', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('877c8fb3ac65c8e2c3fc10c7ff693f6b', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-24 15:11:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('878758f50516a3499da7f833e93ab247', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[3], isPublished=true)', '点击标签', '', '标签ID：[3]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 20:26:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('88201baffcea7b8bac4d4c8ff7fa1041', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:25:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('884f5bc0831363c15138b353c7628daf', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-02-04 20:00:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8ab7870fabec522b789d5dbaa23c7590', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 20:31:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8b0faaeb5263021587d27ea479e5b3bb', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-24 15:57:36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8b46c667265659e39c33431e018ab1e4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 16:36:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8cd3d2691197d8e9bafb200060ac8c2e', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 20:23:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8e3d7be58bfae042fc422091c6f32579', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 21:45:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8f107294fc9a4764b80710c25a9516a4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:14:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('8fa9747365319a144488a6f7180623c5', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 18, '2023-02-04 19:32:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9135c25958939c47ac984ccbad7c91df', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 22:20:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('91662df150d35a1de9d3ddf41efeb1a0', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 961, '2023-01-23 22:14:03', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('927901304e8ead8ed6fab69b88b4c309', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 22:17:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('92a6cce3eb837d2f3a4799543b72cd5b', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 974, '2023-01-23 22:12:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('92b448e19f0ad0f42e582b343e153ec4', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:23:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('92edc60fb76d3e379f1bd18b051a75c8', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 15:53:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('93ca917433224f8d601977072bf24f1d', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 960, '2023-01-23 22:05:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('947fc9eb4aa47fbadd2dc05a1a0afeab', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[1], isPublished=true)', '点击标签', '', '标签ID：[1]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-01-23 22:23:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('95a0626a80f0fc0ddaaead337a0f81be', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:06:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('95d0a48a3bc7ac649cfd165fbe7c8524', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[6], isPublished=true)', '点击标签', '', '标签ID：[6]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 27, '2023-01-23 20:26:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('95f01e4cd6439fe89e7aea42a360fbf1', '/articles/category', 'GET', 'ArticleQueryDTO(categoryId=1, tagIds=null, isPublished=true)', '点击分类', '', '分类ID：1', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 27, '2023-01-23 22:23:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('962733aad86f1ef9ea53bfbc8a035bca', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 1047, '2022-10-23 12:58:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('9660b9b5971b35e04faeaa421658c80e', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:26:51', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('98796e9898ee46e0091a85d77623b174', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:17:47', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('98b672e69f29f1c891e9c7cd1f2438cf', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 13, '2023-01-24 16:36:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('992469c29aeb15b4db05980d45ab4f41', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[15], isPublished=true)', '点击标签', '', '标签ID：[15]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 11, '2023-01-23 20:26:58', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9a0e8e96761d2c8633c7d9ece53d2fef', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 25, '2023-01-24 15:10:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9ba3784c258600da72dedca4bfb0974b', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:23:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9d51f80dd78f0ae3ccf9641f2143e083', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-02-04 19:09:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9e77dd835c412bbe416c0d5281098274', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 14, '2023-01-23 21:42:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9ec348a85e9b63dc91103758e6846a0c', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:26:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9f09722f7fb0e8c5dffade1a011db582', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-02-04 19:36:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9f58b242fc00510a48510e3b22af2de1', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-24 15:12:05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('9fdca3adb30d717498b46573df42b424', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 20:03:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a0f0ac562a28a643c175e4fae37a0cb8', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 62, '2023-01-23 21:42:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a1152ef8e88bcfc3e6efc09bef12d187', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:28:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a1fe06a629bb522d225d47679cc702f8', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1024, '2023-01-23 19:13:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a31bdce851c5b074d8cd51ef7edf8ecc', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 39, '2023-01-23 22:21:30', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a4a9591de2f74d2a135ac0cd18ff9a07', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:57:10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a52ea046005c0d7620bd8c78f300d89e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:17:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a5d8acb48dee0388594ed02096e156be', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-24 15:53:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a66bdea42606c8c76b8dd8d726191d23', '/articles/read', 'GET', '26', '查看博客', '', '文章标题：Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 865, '2023-01-23 21:37:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a79a417dee3c2e0eb4a11d12ea2ca554', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 15, '2023-02-04 19:05:37', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a7f4878f15c101ff3361749e530cb9f0', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:38:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a8edf4861a4ba77bad73468ef43310ee', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:20:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a8fe7e95fc1300409f8a099012bcfc59', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-02-04 19:05:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a91336633d0094e35a6345676179c753', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:21:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('a9d4d80754c8cd44672c20a54b757b20', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:09:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('aa6413705ef60156e544f4b6759e837d', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 12, '2023-01-23 20:31:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ab4b7f6a04af7577ec89ac224c33ea97', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 12, '2023-02-04 19:59:22', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('abf19ac9fd72d8aeefc0badbc8e7a648', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 27, '2023-01-23 19:29:24', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('acc1b90d05c493ba16e0c5cd595a82ac', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:23:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ad872781a528fef38f798c98bb514a5e', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 20:05:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b02a66d90685218a770e6cff3e53acb8', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 8, '2023-01-23 18:59:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b02cbd8807c5c0096d0c227a429943d2', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:20:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b078245d475e84090d2dbd202e5f13ae', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 19:26:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b096aa9c8d6e711948c199fff2c4acd8', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b3229d86437ff15bf5560aad6cad41ba', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 948, '2023-01-23 21:45:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b3d72513250e06ca74cd87840af66a78', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 15, '2023-01-23 20:31:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b53a0182fa4070e7149ee9213d1920fb', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:58:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b7db4f780ea0a2c25df2ebb3b5b34758', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:24:48', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b8eb34b17213478b1ae77a8d8cb7b5c1', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:20:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('b8f168972d7923a80ad5faad2851c1d6', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 11, '2023-01-24 15:10:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ba114beae0522f4fd2dfeb0c0b9efb3f', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 1200, '2022-10-23 11:22:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('baa51c7d6ccbcdb2ef4b916f69b0ff15', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 24, '2023-01-23 18:16:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('bab1408dd36ab0304944fa1d806d1d96', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 20:37:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('bbdc39991351f26623209652f4ec0be4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 20:32:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('bd37de4eaafa36e91e8181a6d9a745e9', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-24 15:52:50', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c017e5d5ab3406839426312742cf1dc4', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 19:26:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c1a30c74f26f53cb4291fc88c964a441', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 9, '2023-01-23 19:07:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c219eb8dd8ef06ad02ab1eb430d4f7dc', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 21:42:45', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c2fd58bf4c5d99ff276c9bcd064d6faf', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:56:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c31a65eae49080219d3522079df6fbf5', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 16:36:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c3ec348d924c1f934e2e54cf840584be', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-24 15:57:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c492f4bbe33b6e0a282ad10de53cd0d8', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 36, '2023-01-23 18:15:35', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c592912a4e8d37bf0054b29fa0e6324f', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 18:35:31', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c5c69fd21e717057e8fa34177c9146b6', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 18:21:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c5f63a38705feb116d2aa0eb381a9f6b', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 46, '2023-01-23 22:17:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c75de4fdf909c9728f8a7d528f20f44a', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1, '2023-02-04 19:04:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c79247b61255a078236bd5cc12fa9188', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-02-04 19:24:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c913f17d499c43ccc99cf24dd76f5b1e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1107, '2023-01-23 19:18:11', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c940c2c1a1f1ac7077fdbc1e6e8d53ac', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:49', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('c98b6ab4e85caf5d61122415f7d7783e', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 20:01:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('cbf587bea6eca35abce3ad074f689f5b', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 15:57:37', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('cd6cf927ec9a7c8326f4155576ef5d8e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:16:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d1270de5c6b05d202def93308cfcea0a', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 15:53:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d2b65793fb874ac2c2a82d839cbe7a53', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-02-04 19:54:33', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d43443bcbeeb46309c4cb966a6b49a30', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 18, '2023-01-24 15:52:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d521d4b0c84149b1dd2bfda7fd2c2901', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 13, '2023-01-23 19:29:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d53374786417c4d9c029213bda0db2fe', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 27, '2022-10-23 11:23:02', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('d669a3060dad751c3975a3db13f1554e', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 22:21:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d71067ab1ab100af98fee437f5c89f60', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[3], isPublished=true)', '点击标签', '', '标签ID：[3]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 12, '2023-01-23 22:23:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d87923cb9dbb6ac8fe93bbd98a32ea90', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-01-23 20:05:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d8bd209b54e09975bdfed205932dbcee', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:54', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d8faf22cd9fe1ad64b9d639de384c517', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-02-04 19:05:41', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('d995b951ee7f45ec5989f5f39a4ab938', '/articles/read', 'GET', '26', '查看博客', '', '文章标题：Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-01-23 21:42:21', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('da03aceacca4a298f2002abf59ef6625', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 18:30:59', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('dcba4004790ac7875fd6fbaa871f7a11', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 9, '2023-01-24 15:12:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('de42be6802cabf8476769b4262c83ed5', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:22:53', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('de662476f1ead4693c790f678939dbca', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:24:55', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('de96f914b8e04808291047b26f02834b', '/articles', 'GET', 'BaseQueryDTO(pageNo=2, pageSize=3, keyword=null)', '访问页面', '首页', '文章第2页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 24, '2023-02-04 19:48:05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('df412c8a9628fbfc4d7fea21831577a6', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:57', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e0ba4d828f1c2f2d76a5a50f9184aa1c', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 28, '2022-10-23 12:58:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('e19c9977daa3f0f85fbfdc57b2b094ad', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-02-04 19:37:40', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e1c0f76421c200ea2d35de385188b648', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:05:27', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e1ea9f8421e54beea5ce9d8a99c5385e', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[2], isPublished=true)', '点击标签', '', '标签ID：[2]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 17, '2023-01-23 22:23:25', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e2116f34d3b2cd524b1986faa441154c', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:19:46', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e229338e740ae9e0c9635b10b3835897', '/articles/tag', 'GET', 'ArticleQueryDTO(categoryId=null, tagIds=[12], isPublished=true)', '点击标签', '', '标签ID：[12]', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:26:52', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e50449537cdc56d15954c56aa9090d5a', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 23, '2023-01-23 20:07:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e5350f9094a43120536b535897fe9e57', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 84, '2023-01-23 19:47:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e5b892c3134166ad4d198d9fe0a5290a', '/articles/read', 'GET', '26', '查看博客', '', '文章标题：Docker_入门？只要这篇就够了！（纯干货适合0基础小白）', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-23 18:16:17', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e5e74f965a8864a13a6d745c5a30195a', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 891, '2023-01-23 20:43:38', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e5e83dcd1688ffc8d15b6aaf6d027a8b', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:24:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e73f524ce215536a4d916603d3c6a9d9', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 948, '2023-01-23 21:31:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e872e4883c107b5e9f9a7cdaa8c8bfaf', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 13, '2023-01-24 15:12:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e8742157416710f7e9a3191b08b5af31', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 20:11:18', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e93c7ce5d73ffe79445181de74db3e03', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:25:00', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('e950a377d0d2333aa7aedd6da4d7e142', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 4, '2023-01-23 22:20:06', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ecad7750bbfb567b48740e5d10c82e77', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:42:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ede5159dc90fa4e96b9a452b04a350d0', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 20:20:13', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ee1e9876fe23aaecc00fdc04dbc985fd', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 6, '2023-01-23 22:23:16', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('efb4bbcec63a801bb8cb894ff8df854f', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 10, '2023-01-24 15:53:07', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f042604dcf290cc6a601fd6e9bc399e2', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:27:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f0c545295ce6d3f5c0342c3bf0c7852e', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 20, '2023-01-23 18:20:15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f2c1e473b4cb02c95f05936358bdecfa', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Edge 106.0.0.0', 4, '2022-10-22 18:14:08', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.34');
INSERT INTO `visit_log` VALUES ('f372091ed0339186a8fc416d61a0d122', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 22, '2023-01-23 20:17:26', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f43f3f8a6db9d928792452c1fa112cad', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-23 20:31:56', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f45e97d07dc079f0b0cd24f9e9715836', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 16, '2023-01-23 20:27:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f63885013b3e9c7de43a8b337ae2c785', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-02-04 19:15:32', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f6966b233a74942c3411d8224732f453', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 1130, '2023-01-24 15:10:34', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f848cd4b9e98593a635d149d8f0ee2ff', '/moments', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=8, keyword=null)', '访问页面', '动态', '动态第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 13, '2023-01-24 15:53:01', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f922be9ad330c81f7e9492de168e7072', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 19, '2023-02-04 19:38:29', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('f94ae1eb04e81c9a47d26d972708c3f3', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-23 20:11:20', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('fad9d1c80ef619ab92278df7072a671e', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 15, '2023-02-04 19:37:43', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('fd6a04e77049370cdcec1d1ea86ce189', '/articles', 'GET', 'BaseQueryDTO(pageNo=1, pageSize=3, keyword=null)', '访问页面', '首页', '文章第1页', '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 17, '2023-01-23 20:07:04', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('fe414e5e13f89c51290294ac6a57359d', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 2, '2023-01-23 20:20:14', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('fe842f9a27dd8c4aed06b451d8efca67', '/about', 'GET', NULL, '访问页面', '关于我', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 5, '2023-01-24 15:11:23', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('fe9106fa25d0ed7b67a46f88aab6c4d5', '/friends', 'GET', NULL, '访问页面', '友链', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 3, '2023-01-23 20:23:12', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');
INSERT INTO `visit_log` VALUES ('ff9ce64548b6cce70b314245d6d966ec', '/articles/archives', 'GET', NULL, '访问页面', '归档', NULL, '192.168.136.1', '内网IP|内网IP', 'Windows 10', 'Chrome 95.0.4638.69', 7, '2023-01-23 22:21:09', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36');

-- ----------------------------
-- Table structure for visit_record
-- ----------------------------
DROP TABLE IF EXISTS `visit_record`;
CREATE TABLE `visit_record`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `pv` int(11) NOT NULL COMMENT '访问量',
  `uv` int(11) NOT NULL COMMENT '独立用户',
  `date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '日期\"02-23\"',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of visit_record
-- ----------------------------

-- ----------------------------
-- Table structure for visitor
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor`  (
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '访客标识码',
  `ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `create_time` datetime NOT NULL COMMENT '首次访问时间',
  `last_time` datetime NOT NULL COMMENT '最后访问时间',
  `pv` int(11) NULL DEFAULT NULL COMMENT '访问页数统计',
  `user_agent` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'user-agent用户代理',
  PRIMARY KEY (`uuid`) USING BTREE,
  UNIQUE INDEX `idx_uuid`(`uuid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of visitor
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
